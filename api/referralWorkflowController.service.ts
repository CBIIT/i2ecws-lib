/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AcceptReferralActionDto } from '../model/acceptReferralActionDto';
import { AddCaInterestActionDto } from '../model/addCaInterestActionDto';
import { AssignRoActionDto } from '../model/assignRoActionDto';
import { CloseReferralActionDto } from '../model/closeReferralActionDto';
import { PdTransferActionDto } from '../model/pdTransferActionDto';
import { ReferActionDto } from '../model/referActionDto';
import { RejectReferralActionDto } from '../model/rejectReferralActionDto';
import { ReleaseDualActionDto } from '../model/releaseDualActionDto';
import { ReleaseDualSpclCaseActionDto } from '../model/releaseDualSpclCaseActionDto';
import { RemoveCaInterestActionDto } from '../model/removeCaInterestActionDto';
import { ReopenReferralActionDto } from '../model/reopenReferralActionDto';
import { TransferActionDto } from '../model/transferActionDto';
import { UnreferReferralActionDto } from '../model/unreferReferralActionDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReferralWorkflowControllerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * accept
     * 
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling acceptUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling acceptUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/accept/${encodeURIComponent(String(userId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * addCaInterest
     * 
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling addCaInterestUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling addCaInterestUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/add-ca-interest/${encodeURIComponent(String(userId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * assignRO
     * 
     * @param applToRos applToRos
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applToRos === null || applToRos === undefined) {
            throw new Error('Required parameter applToRos was null or undefined when calling assignROUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling assignROUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/assign-ro/${encodeURIComponent(String(userId))}`,
            applToRos,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * closeReferral
     * 
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling closeReferralUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling closeReferralUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/close-referral/${encodeURIComponent(String(userId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCurrentRefPssCode
     * 
     * @param applId applId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrentRefPssCodeUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCurrentRefPssCodeUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCurrentRefPssCodeUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCurrentRefPssCodeUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getCurrentRefPssCodeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/current-ref-pss-code/${encodeURIComponent(String(applId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPreviousPdCa
     * 
     * @param applId applId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPreviousPdCaUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPreviousPdCaUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPreviousPdCaUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPreviousPdCaUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getPreviousPdCaUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/previous-pd-ca/${encodeURIComponent(String(applId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReferralActionHistory
     * 
     * @param applId applId
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getReferralActionHistoryUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-action-history/${encodeURIComponent(String(applId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReopenPssCode
     * 
     * @param applId applId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReopenPssCodeUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getReopenPssCodeUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getReopenPssCodeUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getReopenPssCodeUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getReopenPssCodeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/reopen-pss-code/${encodeURIComponent(String(applId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReopenPssDescription
     * 
     * @param applId applId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReopenPssDescriptionUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getReopenPssDescriptionUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getReopenPssDescriptionUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getReopenPssDescriptionUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getReopenPssDescriptionUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/reopen-pss-description/${encodeURIComponent(String(applId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * refer
     * 
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling referUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling referUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/refer/${encodeURIComponent(String(userId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * rejectReferral
     * 
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling rejectReferralUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling rejectReferralUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/reject-referral/${encodeURIComponent(String(userId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * releaseDualSpclCase
     * 
     * @param npnId npnId
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (npnId === null || npnId === undefined) {
            throw new Error('Required parameter npnId was null or undefined when calling releaseDualSpclCaseUsingPOST.');
        }

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling releaseDualSpclCaseUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling releaseDualSpclCaseUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/release-dual-spcl-case/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * releaseDual
     * 
     * @param npnId npnId
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (npnId === null || npnId === undefined) {
            throw new Error('Required parameter npnId was null or undefined when calling releaseDualUsingPOST.');
        }

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling releaseDualUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling releaseDualUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/release-dual/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeCaInterest
     * 
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling removeCaInterestUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling removeCaInterestUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/remove-ca-interest/${encodeURIComponent(String(userId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * reopenReferral
     * 
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling reopenReferralUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling reopenReferralUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/reopen-referral/${encodeURIComponent(String(userId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * transfer
     * 
     * @param isXfer isXfer
     * @param npeId npeId
     * @param transfers transfers
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (isXfer === null || isXfer === undefined) {
            throw new Error('Required parameter isXfer was null or undefined when calling transferUsingPOST.');
        }

        if (npeId === null || npeId === undefined) {
            throw new Error('Required parameter npeId was null or undefined when calling transferUsingPOST.');
        }

        if (transfers === null || transfers === undefined) {
            throw new Error('Required parameter transfers was null or undefined when calling transferUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling transferUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/pd-assignment/transfer/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npeId))}/${encodeURIComponent(String(isXfer))}`,
            transfers,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * transfer
     * 
     * @param npnId npnId
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (npnId === null || npnId === undefined) {
            throw new Error('Required parameter npnId was null or undefined when calling transferUsingPOST1.');
        }

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling transferUsingPOST1.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling transferUsingPOST1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/transfer/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * unrefer
     * 
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling unreferUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling unreferUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/unrefer/${encodeURIComponent(String(userId))}`,
            referrals,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * validateReferralAction
     * 
     * @param action action
     * @param applId applId
     * @param userNpnId userNpnId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling validateReferralActionUsingGET.');
        }

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling validateReferralActionUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (action !== undefined && action !== null) {
            queryParameters = queryParameters.set('action', <any>action);
        }
        if (applId) {
            applId.forEach((element) => {
                queryParameters = queryParameters.append('applId', <any>element);
            })
        }
        if (userNpnId !== undefined && userNpnId !== null) {
            queryParameters = queryParameters.set('userNpnId', <any>userNpnId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/validation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * validateTransferGrantAction
     * 
     * @param applId applId
     * @param userCayCodes userCayCodes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling validateTransferGrantActionUsingGET.');
        }

        if (userCayCodes === null || userCayCodes === undefined) {
            throw new Error('Required parameter userCayCodes was null or undefined when calling validateTransferGrantActionUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (applId) {
            applId.forEach((element) => {
                queryParameters = queryParameters.append('applId', <any>element);
            })
        }
        if (userCayCodes) {
            userCayCodes.forEach((element) => {
                queryParameters = queryParameters.append('userCayCodes', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/transferGrants/validation`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
