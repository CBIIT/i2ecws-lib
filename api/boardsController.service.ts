/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BoardsDto } from '../model/boardsDto';
import { ResponseEntity } from '../model/responseEntity';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BoardsControllerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * findBoardByDate
     * 
     * @param month month
     * @param year year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findBoardByDateUsingGET(month: string, year: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findBoardByDateUsingGET(month: string, year: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findBoardByDateUsingGET(month: string, year: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findBoardByDateUsingGET(month: string, year: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling findBoardByDateUsingGET.');
        }

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling findBoardByDateUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/boards/${encodeURIComponent(String(year))}/${encodeURIComponent(String(month))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBoards
     * 
     * @param meetingDate meetingDate
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (meetingDate !== undefined && meetingDate !== null) {
            queryParameters = queryParameters.set('meetingDate', <any>meetingDate);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/boards`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBodDatesList
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBodDatesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getBodDatesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getBodDatesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getBodDatesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/ncabs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCurrentWorkingBoard
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrentWorkingBoardUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getCurrentWorkingBoardUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getCurrentWorkingBoardUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getCurrentWorkingBoardUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/v1/boards/current-working-board`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDefaultNcabDate
     * 
     * @param date date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDefaultNcabDateUsingGET(date?: Date, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getDefaultNcabDateUsingGET(date?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getDefaultNcabDateUsingGET(date?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getDefaultNcabDateUsingGET(date?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (date !== undefined && date !== null) {
            queryParameters = queryParameters.set('date', <any>date.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/v1/boards/default-ncab-date`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveBoard
     * 
     * @param boardsDto boardsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public saveBoardUsingPOST(boardsDto: BoardsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (boardsDto === null || boardsDto === undefined) {
            throw new Error('Required parameter boardsDto was null or undefined when calling saveBoardUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/boards`,
            boardsDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateBoard
     * 
     * @param boardsDto boardsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateBoardUsingPUT(boardsDto: BoardsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (boardsDto === null || boardsDto === undefined) {
            throw new Error('Required parameter boardsDto was null or undefined when calling updateBoardUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/v1/boards`,
            boardsDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateMeetingDate
     * 
     * @param meetingDate meetingDate
     * @param month month
     * @param year year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (meetingDate === null || meetingDate === undefined) {
            throw new Error('Required parameter meetingDate was null or undefined when calling updateMeetingDateUsingPATCH.');
        }

        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling updateMeetingDateUsingPATCH.');
        }

        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling updateMeetingDateUsingPATCH.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (meetingDate !== undefined && meetingDate !== null) {
            queryParameters = queryParameters.set('meetingDate', <any>meetingDate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.patch<ResponseEntity>(`${this.basePath}/api/v1/boards/${encodeURIComponent(String(year))}/${encodeURIComponent(String(month))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
