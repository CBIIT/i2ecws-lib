/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CaAssignmentRulesDto } from '../model/caAssignmentRulesDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CancerActivityControllerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * deactivateCa
     * 
     * @param caCode caCode
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deactivateCaUsingPATCH(caCode: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caCode === null || caCode === undefined) {
            throw new Error('Required parameter caCode was null or undefined when calling deactivateCaUsingPATCH.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deactivateCaUsingPATCH.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (caCode !== undefined && caCode !== null) {
            queryParameters = queryParameters.set('caCode', <any>caCode);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.patch<any>(`${this.basePath}/api/v1/cas/`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getActiveReferralCaAssignRules
     * 
     * @param active active
     * @param ignore ignore
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (active === null || active === undefined) {
            throw new Error('Required parameter active was null or undefined when calling getActiveReferralCaAssignRulesUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ignore !== undefined && ignore !== null) {
            queryParameters = queryParameters.set('ignore', <any>ignore);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-ca-assign-rules/${encodeURIComponent(String(active))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllActiveCaList
     * 
     * @param activeFlag activeFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeFlag !== undefined && activeFlag !== null) {
            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCaAssignmentRulesHistory
     * 
     * @param caCode caCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (caCode === null || caCode === undefined) {
            throw new Error('Required parameter caCode was null or undefined when calling getCaAssignmentRulesHistoryUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/ca-assignment-rules-history/${encodeURIComponent(String(caCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCaByPDActiveGrantPortfolio
     * 
     * @param npeId npeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (npeId === null || npeId === undefined) {
            throw new Error('Required parameter npeId was null or undefined when calling getCaByPDActiveGrantPortfolioUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/get-cas-by-pd-active-grant-portfolio/${encodeURIComponent(String(npeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCaListBasedOnMechCode
     * 
     * @param mechCode mechCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CaAssignmentRulesDto>>;
    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaAssignmentRulesDto>>>;
    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaAssignmentRulesDto>>>;
    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mechCode === null || mechCode === undefined) {
            throw new Error('Required parameter mechCode was null or undefined when calling getCaListBasedOnMechCodeUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (mechCode !== undefined && mechCode !== null) {
            queryParameters = queryParameters.set('mechCode', <any>mechCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CaAssignmentRulesDto>>(`${this.basePath}/api/v1/cas-mech-codes/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCaListBasedOnRfa
     * 
     * @param rfaPa rfaPa
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CaAssignmentRulesDto>>;
    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaAssignmentRulesDto>>>;
    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaAssignmentRulesDto>>>;
    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (rfaPa === null || rfaPa === undefined) {
            throw new Error('Required parameter rfaPa was null or undefined when calling getCaListBasedOnRfaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (rfaPa !== undefined && rfaPa !== null) {
            queryParameters = queryParameters.set('rfaPa', <any>rfaPa);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CaAssignmentRulesDto>>(`${this.basePath}/api/v1/cas-rfa/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCaXferPortfolio
     * 
     * @param pdId pdId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCaXferPortfolioUsingGET(pdId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCaXferPortfolioUsingGET(pdId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCaXferPortfolioUsingGET(pdId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCaXferPortfolioUsingGET(pdId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pdId === null || pdId === undefined) {
            throw new Error('Required parameter pdId was null or undefined when calling getCaXferPortfolioUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas-xfer/${encodeURIComponent(String(pdId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCancerActivityPocs
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCancerActivityPocsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCancerActivityPocsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCancerActivityPocsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCancerActivityPocsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas/pocs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCasForPd
     * 
     * @param pdId pdId
     * @param monitorFlag monitorFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (pdId === null || pdId === undefined) {
            throw new Error('Required parameter pdId was null or undefined when calling getCasForPdUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (monitorFlag !== undefined && monitorFlag !== null) {
            queryParameters = queryParameters.set('monitorFlag', <any>monitorFlag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas/${encodeURIComponent(String(pdId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCasForPortfolio
     * 
     * @param npeId npeId
     * @param monitorFlag monitorFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (npeId === null || npeId === undefined) {
            throw new Error('Required parameter npeId was null or undefined when calling getCasForPortfolioUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (monitorFlag !== undefined && monitorFlag !== null) {
            queryParameters = queryParameters.set('monitorFlag', <any>monitorFlag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas-portfolio/${encodeURIComponent(String(npeId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getNciOrgList
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNciOrgListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getNciOrgListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getNciOrgListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getNciOrgListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/nci-org-list/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPersonDetails
     * 
     * @param orgId orgId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPersonDetailsUsingGET(orgId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPersonDetailsUsingGET(orgId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPersonDetailsUsingGET(orgId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPersonDetailsUsingGET(orgId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orgId === null || orgId === undefined) {
            throw new Error('Required parameter orgId was null or undefined when calling getPersonDetailsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/i2e-person-details/${encodeURIComponent(String(orgId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReferralActivityCodesList
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReferralActivityCodesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getReferralActivityCodesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getReferralActivityCodesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getReferralActivityCodesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-activity-codes/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getRfaPaNoticeByNoticeNumber
     * 
     * @param noticeNumber noticeNumber
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (noticeNumber === null || noticeNumber === undefined) {
            throw new Error('Required parameter noticeNumber was null or undefined when calling getRfaPaNoticeByNoticeNumberUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/rfa-pa-notices/${encodeURIComponent(String(noticeNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getRfaPaNoticesList
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRfaPaNoticesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRfaPaNoticesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRfaPaNoticesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRfaPaNoticesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/rfa-pa-notices/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCancerActivity
     * 
     * @param addNew addNew
     * @param caCode caCode
     * @param caDesc caDesc
     * @param caOfcDiv caOfcDiv
     * @param caPoc caPoc
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (addNew === null || addNew === undefined) {
            throw new Error('Required parameter addNew was null or undefined when calling saveCancerActivityUsingPUT.');
        }

        if (caCode === null || caCode === undefined) {
            throw new Error('Required parameter caCode was null or undefined when calling saveCancerActivityUsingPUT.');
        }

        if (caDesc === null || caDesc === undefined) {
            throw new Error('Required parameter caDesc was null or undefined when calling saveCancerActivityUsingPUT.');
        }

        if (caOfcDiv === null || caOfcDiv === undefined) {
            throw new Error('Required parameter caOfcDiv was null or undefined when calling saveCancerActivityUsingPUT.');
        }

        if (caPoc === null || caPoc === undefined) {
            throw new Error('Required parameter caPoc was null or undefined when calling saveCancerActivityUsingPUT.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling saveCancerActivityUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (addNew !== undefined && addNew !== null) {
            queryParameters = queryParameters.set('addNew', <any>addNew);
        }
        if (caCode !== undefined && caCode !== null) {
            queryParameters = queryParameters.set('caCode', <any>caCode);
        }
        if (caDesc !== undefined && caDesc !== null) {
            queryParameters = queryParameters.set('caDesc', <any>caDesc);
        }
        if (caOfcDiv !== undefined && caOfcDiv !== null) {
            queryParameters = queryParameters.set('caOfcDiv', <any>caOfcDiv);
        }
        if (caPoc !== undefined && caPoc !== null) {
            queryParameters = queryParameters.set('caPoc', <any>caPoc);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/api/v1/cas/`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveMechCaAssignment
     * 
     * @param mechCode mechCode
     * @param userId userId
     * @param assignedCas assignedCas[]
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (mechCode === null || mechCode === undefined) {
            throw new Error('Required parameter mechCode was null or undefined when calling saveMechCaAssignmentUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling saveMechCaAssignmentUsingPOST.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (assignedCas) {
            assignedCas.forEach((element) => {
                queryParameters = queryParameters.append('assignedCas[]', <any>element);
            })
        }
        if (mechCode !== undefined && mechCode !== null) {
            queryParameters = queryParameters.set('mechCode', <any>mechCode);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/v1/mech-ca-assignment/`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveRfaPaAssignment
     * 
     * @param rfaPa rfaPa
     * @param userId userId
     * @param assignedCas assignedCas[]
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (rfaPa === null || rfaPa === undefined) {
            throw new Error('Required parameter rfaPa was null or undefined when calling saveRfaPaAssignmentUsingPOST.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling saveRfaPaAssignmentUsingPOST.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (assignedCas) {
            assignedCas.forEach((element) => {
                queryParameters = queryParameters.append('assignedCas[]', <any>element);
            })
        }
        if (rfaPa !== undefined && rfaPa !== null) {
            queryParameters = queryParameters.set('rfaPa', <any>rfaPa);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/v1/rfa-pa-assignment/`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
