/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NciReferralGrantsControllerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * exportGrantSearchResults
     * 
     * @param remainingParams remainingParams
     * @param activeSegments 
     * @param applIds 
     * @param applStatusGroupCode 
     * @param araMatchStatus 
     * @param cancerActivities 
     * @param composedGrantNumber 
     * @param dualCas 
     * @param formerGrantNumber 
     * @param fyFrom 
     * @param fyTo 
     * @param grantIc 
     * @param grantMech 
     * @param grantSerial 
     * @param grantSuffix 
     * @param grantsWitCa 
     * @param grantType 
     * @param grantYear 
     * @param groupCode 
     * @param includeDeleted 
     * @param includeOrphans 
     * @param institution 
     * @param irgCode 
     * @param irgFlexCode 
     * @param myCancerActivities 
     * @param ncabFrom 
     * @param ncabTo 
     * @param npnId 
     * @param orderBy orderBy
     * @param pdAssignmentSearch 
     * @param pdId 
     * @param piName 
     * @param referralOfficer 
     * @param referralStatus 
     * @param rfaPaNumber 
     * @param role 
     * @param roNpnId 
     * @param selectFrom 
     * @param sraDesignatorCode 
     * @param sraFlexCode 
     * @param wBSearch 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling exportGrantSearchResultsUsingGET.');
        }









































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', <any>element);
            })
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);
            })
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', <any>element);
            })
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', <any>element);
            })
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', <any>dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', <any>fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', <any>grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', <any>grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', <any>grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', <any>grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', <any>groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', <any>institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', <any>irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', <any>element);
            })
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', <any>npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', <any>pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', <any>piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', <any>element);
            })
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', <any>element);
            })
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/transfer-grants`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * exportSearchResults
     * 
     * @param remainingParams remainingParams
     * @param activeSegments 
     * @param applIds 
     * @param applStatusGroupCode 
     * @param araMatchStatus 
     * @param cancerActivities 
     * @param composedGrantNumber 
     * @param dualCas 
     * @param formerGrantNumber 
     * @param fyFrom 
     * @param fyTo 
     * @param grantIc 
     * @param grantMech 
     * @param grantSerial 
     * @param grantSuffix 
     * @param grantsWitCa 
     * @param grantType 
     * @param grantYear 
     * @param groupCode 
     * @param includeDeleted 
     * @param includeOrphans 
     * @param institution 
     * @param irgCode 
     * @param irgFlexCode 
     * @param myCancerActivities 
     * @param ncabFrom 
     * @param ncabTo 
     * @param npnId 
     * @param orderBy orderBy
     * @param pdAssignmentSearch 
     * @param pdId 
     * @param piName 
     * @param referralOfficer 
     * @param referralStatus 
     * @param rfaPaNumber 
     * @param role 
     * @param roNpnId 
     * @param selectFrom 
     * @param sraDesignatorCode 
     * @param sraFlexCode 
     * @param wBSearch 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling exportSearchResultsUsingGET.');
        }









































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', <any>element);
            })
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);
            })
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', <any>element);
            })
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', <any>element);
            })
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', <any>dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', <any>fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', <any>grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', <any>grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', <any>grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', <any>grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', <any>groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', <any>institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', <any>irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', <any>element);
            })
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', <any>npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', <any>pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', <any>piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', <any>element);
            })
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', <any>element);
            })
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/referral-grants`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * exportSearchResults
     * 
     * @param remainingParams remainingParams
     * @param activeSegments 
     * @param applIds 
     * @param applStatusGroupCode 
     * @param araMatchStatus 
     * @param cancerActivities 
     * @param composedGrantNumber 
     * @param dualCas 
     * @param formerGrantNumber 
     * @param fyFrom 
     * @param fyTo 
     * @param grantIc 
     * @param grantMech 
     * @param grantSerial 
     * @param grantSuffix 
     * @param grantsWitCa 
     * @param grantType 
     * @param grantYear 
     * @param groupCode 
     * @param includeDeleted 
     * @param includeOrphans 
     * @param institution 
     * @param irgCode 
     * @param irgFlexCode 
     * @param myCancerActivities 
     * @param ncabFrom 
     * @param ncabTo 
     * @param npnId 
     * @param orderBy orderBy
     * @param pdAssignmentSearch 
     * @param pdId 
     * @param piName 
     * @param referralOfficer 
     * @param referralStatus 
     * @param rfaPaNumber 
     * @param role 
     * @param roNpnId 
     * @param selectFrom 
     * @param sraDesignatorCode 
     * @param sraFlexCode 
     * @param wBSearch 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling exportSearchResultsUsingPOST.');
        }









































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', <any>element);
            })
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);
            })
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', <any>element);
            })
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', <any>element);
            })
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', <any>dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', <any>fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', <any>grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', <any>grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', <any>grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', <any>grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', <any>groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', <any>institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', <any>irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', <any>element);
            })
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', <any>npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', <any>pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', <any>piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', <any>element);
            })
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', <any>element);
            })
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/v1/export/referral-grants`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findWithdrawnGrants
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findWithdrawnGrantsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findWithdrawnGrantsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findWithdrawnGrantsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findWithdrawnGrantsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants/withdrawn`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSuggestedCayCodes
     * 
     * @param applId applId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestedCayCodesUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSuggestedCayCodesUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSuggestedCayCodesUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSuggestedCayCodesUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getSuggestedCayCodesUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants/suggested-cay-codes/${encodeURIComponent(String(applId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchGrantsForPDAssignment
     * 
     * @param remainingParams remainingParams
     * @param activeSegments 
     * @param applId applId
     * @param applIds 
     * @param applStatusGroupCode 
     * @param araMatchStatus 
     * @param cancerActivities 
     * @param composedGrantNumber 
     * @param dualCas 
     * @param formerGrantNumber 
     * @param fyFrom 
     * @param fyTo 
     * @param grantIc 
     * @param grantMech 
     * @param grantSerial 
     * @param grantSuffix 
     * @param grantsWitCa 
     * @param grantType 
     * @param grantYear 
     * @param groupCode 
     * @param includeDeleted 
     * @param includeOrphans 
     * @param institution 
     * @param irgCode 
     * @param irgFlexCode 
     * @param myCancerActivities 
     * @param ncabFrom 
     * @param ncabTo 
     * @param npnId 
     * @param orderBy orderBy
     * @param pdAssignmentSearch 
     * @param pdId 
     * @param piName 
     * @param referralOfficer 
     * @param referralStatus 
     * @param rfaPaNumber 
     * @param role 
     * @param roNpnId 
     * @param selectFrom 
     * @param sraDesignatorCode 
     * @param sraFlexCode 
     * @param wBSearch 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling searchGrantsForPDAssignmentUsingGET.');
        }










































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);
        }
        if (applId) {
            applId.forEach((element) => {
                queryParameters = queryParameters.append('applId', <any>element);
            })
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', <any>element);
            })
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);
            })
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', <any>element);
            })
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', <any>element);
            })
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', <any>dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', <any>fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', <any>grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', <any>grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', <any>grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', <any>grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', <any>groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', <any>institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', <any>irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', <any>element);
            })
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', <any>npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', <any>pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', <any>piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', <any>element);
            })
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', <any>element);
            })
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/pd-assignment/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchReferralGrants
     * 
     * @param remainingParams remainingParams
     * @param activeSegments 
     * @param applIds 
     * @param applStatusGroupCode 
     * @param araMatchStatus 
     * @param cancerActivities 
     * @param composedGrantNumber 
     * @param dualCas 
     * @param formerGrantNumber 
     * @param fyFrom 
     * @param fyTo 
     * @param grantIc 
     * @param grantMech 
     * @param grantSerial 
     * @param grantSuffix 
     * @param grantsWitCa 
     * @param grantType 
     * @param grantYear 
     * @param groupCode 
     * @param includeDeleted 
     * @param includeOrphans 
     * @param institution 
     * @param irgCode 
     * @param irgFlexCode 
     * @param myCancerActivities 
     * @param ncabFrom 
     * @param ncabTo 
     * @param npnId 
     * @param orderBy orderBy
     * @param pdAssignmentSearch 
     * @param pdId 
     * @param piName 
     * @param referralOfficer 
     * @param referralStatus 
     * @param rfaPaNumber 
     * @param role 
     * @param roNpnId 
     * @param selectFrom 
     * @param sraDesignatorCode 
     * @param sraFlexCode 
     * @param wBSearch 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling searchReferralGrantsUsingGET.');
        }









































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', <any>element);
            })
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);
            })
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', <any>element);
            })
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', <any>element);
            })
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', <any>dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', <any>fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', <any>grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', <any>grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', <any>grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', <any>grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', <any>groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', <any>institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', <any>irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', <any>element);
            })
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', <any>npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', <any>pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', <any>piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', <any>element);
            })
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', <any>element);
            })
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchReferralGrants
     * 
     * @param remainingParams remainingParams
     * @param activeSegments 
     * @param applIds 
     * @param applStatusGroupCode 
     * @param araMatchStatus 
     * @param cancerActivities 
     * @param composedGrantNumber 
     * @param dualCas 
     * @param formerGrantNumber 
     * @param fyFrom 
     * @param fyTo 
     * @param grantIc 
     * @param grantMech 
     * @param grantSerial 
     * @param grantSuffix 
     * @param grantsWitCa 
     * @param grantType 
     * @param grantYear 
     * @param groupCode 
     * @param includeDeleted 
     * @param includeOrphans 
     * @param institution 
     * @param irgCode 
     * @param irgFlexCode 
     * @param myCancerActivities 
     * @param ncabFrom 
     * @param ncabTo 
     * @param npnId 
     * @param orderBy orderBy
     * @param pdAssignmentSearch 
     * @param pdId 
     * @param piName 
     * @param referralOfficer 
     * @param referralStatus 
     * @param rfaPaNumber 
     * @param role 
     * @param roNpnId 
     * @param selectFrom 
     * @param sraDesignatorCode 
     * @param sraFlexCode 
     * @param wBSearch 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling searchReferralGrantsUsingPOST.');
        }









































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', <any>element);
            })
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);
            })
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', <any>element);
            })
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', <any>element);
            })
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', <any>dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', <any>fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', <any>grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', <any>grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', <any>grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', <any>grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', <any>groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', <any>institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', <any>irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', <any>element);
            })
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', <any>npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', <any>pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', <any>piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', <any>element);
            })
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', <any>element);
            })
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral-grants/search`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * search
     * 
     * @param applId applId
     * @param cancerActivity cancerActivity
     * @param grantsWithoutInterest grantsWithoutInterest
     * @param mech mech
     * @param minDaysSinceReferral minDaysSinceReferral
     * @param ncabFromDate ncabFromDate
     * @param ncabToDate ncabToDate
     * @param orderBy orderBy
     * @param pocNpnId pocNpnId
     * @param referralDateHigh referralDateHigh
     * @param referralDateLow referralDateLow
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {












        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (applId) {
            applId.forEach((element) => {
                queryParameters = queryParameters.append('applId', <any>element);
            })
        }
        if (cancerActivity !== undefined && cancerActivity !== null) {
            queryParameters = queryParameters.set('cancerActivity', <any>cancerActivity);
        }
        if (grantsWithoutInterest !== undefined && grantsWithoutInterest !== null) {
            queryParameters = queryParameters.set('grantsWithoutInterest', <any>grantsWithoutInterest);
        }
        if (mech !== undefined && mech !== null) {
            queryParameters = queryParameters.set('mech', <any>mech);
        }
        if (minDaysSinceReferral !== undefined && minDaysSinceReferral !== null) {
            queryParameters = queryParameters.set('minDaysSinceReferral', <any>minDaysSinceReferral);
        }
        if (ncabFromDate !== undefined && ncabFromDate !== null) {
            queryParameters = queryParameters.set('ncabFromDate', <any>ncabFromDate);
        }
        if (ncabToDate !== undefined && ncabToDate !== null) {
            queryParameters = queryParameters.set('ncabToDate', <any>ncabToDate);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (pocNpnId !== undefined && pocNpnId !== null) {
            queryParameters = queryParameters.set('pocNpnId', <any>pocNpnId);
        }
        if (referralDateHigh !== undefined && referralDateHigh !== null) {
            queryParameters = queryParameters.set('referralDateHigh', <any>referralDateHigh);
        }
        if (referralDateLow !== undefined && referralDateLow !== null) {
            queryParameters = queryParameters.set('referralDateLow', <any>referralDateLow);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
