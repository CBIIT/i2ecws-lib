/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ActivationParamsHolder } from '../model/activationParamsHolder';
import { AraReasonsDto } from '../model/araReasonsDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AraReasonsControllerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Activate or deactivate the specified ARA Reason
     * 
     * @param id id
     * @param paramsHolder paramsHolder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling activateOrDeactivateAraReasonUsingPATCH.');
        }

        if (paramsHolder === null || paramsHolder === undefined) {
            throw new Error('Required parameter paramsHolder was null or undefined when calling activateOrDeactivateAraReasonUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<any>(`${this.basePath}/api/v1/ara-reasons/${encodeURIComponent(String(id))}`,
            paramsHolder,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAraReasonsHistory
     * 
     * @param code code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAraReasonsHistoryUsingGET(code: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAraReasonsHistoryUsingGET(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAraReasonsHistoryUsingGET(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAraReasonsHistoryUsingGET(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling getAraReasonsHistoryUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons-history/${encodeURIComponent(String(code))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAraReasonsPrecedences
     * 
     * @param available available
     * @param include include
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (available !== undefined && available !== null) {
            queryParameters = queryParameters.set('available', <any>available);
        }
        if (include !== undefined && include !== null) {
            queryParameters = queryParameters.set('include', <any>include);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons-precedences`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAraReasons
     * 
     * @param activeFlag activeFlag
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeFlag !== undefined && activeFlag !== null) {
            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAraReasons
     * 
     * @param code code
     * @param activeFlag activeFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling getAraReasonsUsingGET1.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeFlag !== undefined && activeFlag !== null) {
            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons/${encodeURIComponent(String(code))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getEraAraReasons
     * 
     * @param activeFlag activeFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeFlag !== undefined && activeFlag !== null) {
            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/era-ara-reasons`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getEraAraReasons
     * 
     * @param code code
     * @param activeFlag activeFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling getEraAraReasonsUsingGET1.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activeFlag !== undefined && activeFlag !== null) {
            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/era-ara-reasons/${encodeURIComponent(String(code))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveAraReason
     * 
     * @param araReasonsDto araReasonsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (araReasonsDto === null || araReasonsDto === undefined) {
            throw new Error('Required parameter araReasonsDto was null or undefined when calling saveAraReasonUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/ara-reasons`,
            araReasonsDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAraReason
     * 
     * @param araReasonsDto araReasonsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (araReasonsDto === null || araReasonsDto === undefined) {
            throw new Error('Required parameter araReasonsDto was null or undefined when calling updateAraReasonUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/v1/ara-reasons`,
            araReasonsDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
