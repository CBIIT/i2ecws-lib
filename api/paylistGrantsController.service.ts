/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PaylistGrantsCriteriaDto } from '../model/paylistGrantsCriteriaDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PaylistGrantsControllerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * findPaylistGrants
     * 
     * @param criteriaDto criteriaDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (criteriaDto === null || criteriaDto === undefined) {
            throw new Error('Required parameter criteriaDto was null or undefined when calling findPaylistGrantsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylist-grants/find-open`,
            criteriaDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getExceptionMapping
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExceptionMappingUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getExceptionMappingUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getExceptionMappingUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getExceptionMappingUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/exception-mapping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * massGenPaylistEnabled
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public massGenPaylistEnabledUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public massGenPaylistEnabledUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public massGenPaylistEnabledUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public massGenPaylistEnabledUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/mass-gen-enabled`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * massGeneratePaylists
     * 
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public massGeneratePaylistsUsingPOST(userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public massGeneratePaylistsUsingPOST(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public massGeneratePaylistsUsingPOST(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public massGeneratePaylistsUsingPOST(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling massGeneratePaylistsUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylist-grants/mass-gen-paylists`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * retrievePaylistGrantsById
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrievePaylistGrantsByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public retrievePaylistGrantsByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public retrievePaylistGrantsByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public retrievePaylistGrantsByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrievePaylistGrantsByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/retrieve/id/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchPaylinePaylistGrants
     * 
     * @param criteriaDto criteriaDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (criteriaDto === null || criteriaDto === undefined) {
            throw new Error('Required parameter criteriaDto was null or undefined when calling searchPaylinePaylistGrantsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylist-grants/search-ppg`,
            criteriaDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
