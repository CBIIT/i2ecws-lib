/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { FindPaylistCriteriaDto } from '../model/findPaylistCriteriaDto';
import { PaylistDto } from '../model/paylistDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PaylistControllerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * certifyPaylist
     * 
     * @param paylistDto paylistDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (paylistDto === null || paylistDto === undefined) {
            throw new Error('Required parameter paylistDto was null or undefined when calling certifyPaylistUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylists/certify-paylist`,
            paylistDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deletePaylist
     * 
     * @param paylistId paylistId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (paylistId === null || paylistId === undefined) {
            throw new Error('Required parameter paylistId was null or undefined when calling deletePaylistUsingDELETE.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deletePaylistUsingDELETE.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (paylistId !== undefined && paylistId !== null) {
            queryParameters = queryParameters.set('paylistId', <any>paylistId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/v1/paylists/delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findPaylists
     * 
     * @param criteriaDto criteriaDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (criteriaDto === null || criteriaDto === undefined) {
            throw new Error('Required parameter criteriaDto was null or undefined when calling findPaylistsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylists/find-paylists`,
            criteriaDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDeactivated
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDeactivatedUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getDeactivatedUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getDeactivatedUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getDeactivatedUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/deactivated-paylists`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylineHistoryById
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylineHistoryByIdUsingGET1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylineHistoryByIdUsingGET1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylineHistoryByIdUsingGET1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylineHistoryByIdUsingGET1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPaylineHistoryByIdUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylists/history/id/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylistFiscalYears
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylistFiscalYearsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylistFiscalYearsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylistFiscalYearsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylistFiscalYearsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-fiscal-years`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylistGrantsById
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylistGrantsByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylistGrantsByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylistGrantsByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylistGrantsByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPaylistGrantsByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/id/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylistGrants
     * 
     * @param activityCode activityCode
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (activityCode === null || activityCode === undefined) {
            throw new Error('Required parameter activityCode was null or undefined when calling getPaylistGrantsUsingGET.');
        }

        if (fy === null || fy === undefined) {
            throw new Error('Required parameter fy was null or undefined when calling getPaylistGrantsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/${encodeURIComponent(String(fy))}/${encodeURIComponent(String(activityCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylists
     * 
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylistsUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylistsUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylistsUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylistsUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fy === null || fy === undefined) {
            throw new Error('Required parameter fy was null or undefined when calling getPaylistsUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fy !== undefined && fy !== null) {
            queryParameters = queryParameters.set('fy', <any>fy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/view-paylists`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPendingGrants
     * 
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPendingGrantsUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPendingGrantsUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPendingGrantsUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPendingGrantsUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fy === null || fy === undefined) {
            throw new Error('Required parameter fy was null or undefined when calling getPendingGrantsUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fy !== undefined && fy !== null) {
            queryParameters = queryParameters.set('fy', <any>fy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/pending-grants`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getUncertified
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUncertifiedUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getUncertifiedUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getUncertifiedUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getUncertifiedUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/uncertified-paylists`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * savePaylist
     * 
     * @param paylistDto paylistDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public savePaylistUsingPOST(paylistDto: PaylistDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (paylistDto === null || paylistDto === undefined) {
            throw new Error('Required parameter paylistDto was null or undefined when calling savePaylistUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylists/save-paylist`,
            paylistDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
