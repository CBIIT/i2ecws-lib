/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PaylinesDto } from '../model/paylinesDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PaylineControllerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * cancelPaylines
     * 
     * @param paylineId payline_id
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (paylineId === null || paylineId === undefined) {
            throw new Error('Required parameter paylineId was null or undefined when calling cancelPaylinesUsingPATCH.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling cancelPaylinesUsingPATCH.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (paylineId !== undefined && paylineId !== null) {
            queryParameters = queryParameters.set('payline_id', <any>paylineId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.patch<any>(`${this.basePath}/api/v1/paylines/`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * certifyPaylines
     * 
     * @param paylinesDto paylinesDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (paylinesDto === null || paylinesDto === undefined) {
            throw new Error('Required parameter paylinesDto was null or undefined when calling certifyPaylinesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylines/certify`,
            paylinesDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findCertifiedPaylines
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCertifiedPaylinesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public findCertifiedPaylinesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public findCertifiedPaylinesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public findCertifiedPaylinesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/certified-paylines`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getFiscalYear
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFiscalYearUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getFiscalYearUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getFiscalYearUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getFiscalYearUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/fiscal-years`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getNewPaylines
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNewPaylinesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getNewPaylinesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getNewPaylinesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getNewPaylinesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/new-paylines`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getOEFIAPaylines
     * 
     * @param certifiedFlag 
     * @param fy 
     * @param isOefiaCertifier 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (certifiedFlag !== undefined && certifiedFlag !== null) {
            queryParameters = queryParameters.set('certifiedFlag', <any>certifiedFlag);
        }
        if (fy !== undefined && fy !== null) {
            queryParameters = queryParameters.set('fy', <any>fy);
        }
        if (isOefiaCertifier !== undefined && isOefiaCertifier !== null) {
            queryParameters = queryParameters.set('isOefiaCertifier', <any>isOefiaCertifier);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/oefia-paylines`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylineHistoryById
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylineHistoryByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylineHistoryByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylineHistoryByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylineHistoryByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPaylineHistoryByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/history/id/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylineHistory
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylineHistoryUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylineHistoryUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylineHistoryUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylineHistoryUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPaylineHistoryUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/${encodeURIComponent(String(id))}/history`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylinesById
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylinesByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylinesByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylinesByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylinesByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPaylinesByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/view-paylines/id/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylinesByParameters
     * 
     * @param fy fy
     * @param activityCode activityCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fy === null || fy === undefined) {
            throw new Error('Required parameter fy was null or undefined when calling getPaylinesByParametersUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (activityCode !== undefined && activityCode !== null) {
            queryParameters = queryParameters.set('activityCode', <any>activityCode);
        }
        if (fy !== undefined && fy !== null) {
            queryParameters = queryParameters.set('fy', <any>fy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylines
     * 
     * @param activityCode activityCode
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylinesUsingGET(activityCode: string, fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (activityCode === null || activityCode === undefined) {
            throw new Error('Required parameter activityCode was null or undefined when calling getPaylinesUsingGET.');
        }

        if (fy === null || fy === undefined) {
            throw new Error('Required parameter fy was null or undefined when calling getPaylinesUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/${encodeURIComponent(String(fy))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPaylines
     * 
     * @param activityCode activityCode
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPaylinesUsingGET1(activityCode: string, fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (activityCode === null || activityCode === undefined) {
            throw new Error('Required parameter activityCode was null or undefined when calling getPaylinesUsingGET1.');
        }

        if (fy === null || fy === undefined) {
            throw new Error('Required parameter fy was null or undefined when calling getPaylinesUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/${encodeURIComponent(String(fy))}/${encodeURIComponent(String(activityCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * unCertifyPaylines
     * 
     * @param paylinesDto paylinesDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (paylinesDto === null || paylinesDto === undefined) {
            throw new Error('Required parameter paylinesDto was null or undefined when calling unCertifyPaylinesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylines/un-certify`,
            paylinesDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
