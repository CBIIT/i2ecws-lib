/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Payload } from '../model/payload';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class IcDataControllerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * appdFundinggsAssign
     * 
     * @param applId applId
     * @param directcostAmt directcostAmt
     * @param indirectcostAmt indirectcostAmt
     * @param phsOrgCode phsOrgCode
     * @param totalPeriodAmt totalPeriodAmt
     * @param transType transType
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }

        if (directcostAmt === null || directcostAmt === undefined) {
            throw new Error('Required parameter directcostAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }

        if (indirectcostAmt === null || indirectcostAmt === undefined) {
            throw new Error('Required parameter indirectcostAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }

        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }

        if (totalPeriodAmt === null || totalPeriodAmt === undefined) {
            throw new Error('Required parameter totalPeriodAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }

        if (transType === null || transType === undefined) {
            throw new Error('Required parameter transType was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (directcostAmt !== undefined && directcostAmt !== null) {
            queryParameters = queryParameters.set('directcostAmt', <any>directcostAmt);
        }
        if (indirectcostAmt !== undefined && indirectcostAmt !== null) {
            queryParameters = queryParameters.set('indirectcostAmt', <any>indirectcostAmt);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);
        }
        if (totalPeriodAmt !== undefined && totalPeriodAmt !== null) {
            queryParameters = queryParameters.set('totalPeriodAmt', <any>totalPeriodAmt);
        }
        if (transType !== undefined && transType !== null) {
            queryParameters = queryParameters.set('transType', <any>transType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/appd-fundings/assign/${encodeURIComponent(String(applId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * awdFundingsAssign
     * 
     * @param applId applId
     * @param phsOrgCode phsOrgCode
     * @param transType transType
     * @param newCan newCan
     * @param newPcc newPcc
     * @param oldCan oldCan
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling awdFundingsAssignUsingPOST.');
        }

        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling awdFundingsAssignUsingPOST.');
        }

        if (transType === null || transType === undefined) {
            throw new Error('Required parameter transType was null or undefined when calling awdFundingsAssignUsingPOST.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (newCan !== undefined && newCan !== null) {
            queryParameters = queryParameters.set('newCan', <any>newCan);
        }
        if (newPcc !== undefined && newPcc !== null) {
            queryParameters = queryParameters.set('newPcc', <any>newPcc);
        }
        if (oldCan !== undefined && oldCan !== null) {
            queryParameters = queryParameters.set('oldCan', <any>oldCan);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);
        }
        if (transType !== undefined && transType !== null) {
            queryParameters = queryParameters.set('transType', <any>transType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/awd-fundings/assign/${encodeURIComponent(String(applId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * fedPersonInvolvementAssign
     * 
     * @param applId applId
     * @param personId personId
     * @param phsOrgCode phsOrgCode
     * @param roleTypeCode roleTypeCode
     * @param transactionType transactionType
     * @param versionCode versionCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }

        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }

        if (roleTypeCode === null || roleTypeCode === undefined) {
            throw new Error('Required parameter roleTypeCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }

        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }

        if (versionCode === null || versionCode === undefined) {
            throw new Error('Required parameter versionCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (personId !== undefined && personId !== null) {
            queryParameters = queryParameters.set('personId', <any>personId);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);
        }
        if (roleTypeCode !== undefined && roleTypeCode !== null) {
            queryParameters = queryParameters.set('roleTypeCode', <any>roleTypeCode);
        }
        if (transactionType !== undefined && transactionType !== null) {
            queryParameters = queryParameters.set('transactionType', <any>transactionType);
        }
        if (versionCode !== undefined && versionCode !== null) {
            queryParameters = queryParameters.set('versionCode', <any>versionCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/fed-person-involvement/assign/${encodeURIComponent(String(applId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * icPccAssignMerge
     * 
     * @param applId applId
     * @param phsOrgCode phsOrgCode
     * @param transactionType transactionType
     * @param newPccCode newPccCode
     * @param oldPccCode oldPccCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling icPccAssignMergeUsingPOST.');
        }

        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling icPccAssignMergeUsingPOST.');
        }

        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling icPccAssignMergeUsingPOST.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (newPccCode !== undefined && newPccCode !== null) {
            queryParameters = queryParameters.set('newPccCode', <any>newPccCode);
        }
        if (oldPccCode !== undefined && oldPccCode !== null) {
            queryParameters = queryParameters.set('oldPccCode', <any>oldPccCode);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);
        }
        if (transactionType !== undefined && transactionType !== null) {
            queryParameters = queryParameters.set('transactionType', <any>transactionType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/ic-pcc/assign-merge/${encodeURIComponent(String(applId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * icPccAssign
     * 
     * @param applId applId
     * @param phsOrgCode phsOrgCode
     * @param transactionType transactionType
     * @param newPccCode newPccCode
     * @param oldPccCode oldPccCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling icPccAssignUsingPOST.');
        }

        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling icPccAssignUsingPOST.');
        }

        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling icPccAssignUsingPOST.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (newPccCode !== undefined && newPccCode !== null) {
            queryParameters = queryParameters.set('newPccCode', <any>newPccCode);
        }
        if (oldPccCode !== undefined && oldPccCode !== null) {
            queryParameters = queryParameters.set('oldPccCode', <any>oldPccCode);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);
        }
        if (transactionType !== undefined && transactionType !== null) {
            queryParameters = queryParameters.set('transactionType', <any>transactionType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/ic-pcc/assign/${encodeURIComponent(String(applId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * mainPccAssign
     * 
     * @param applId applId
     * @param overWriteFlag overWriteFlag
     * @param phsOrgCode phsOrgCode
     * @param progClassCode progClassCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling mainPccAssignUsingPOST.');
        }

        if (overWriteFlag === null || overWriteFlag === undefined) {
            throw new Error('Required parameter overWriteFlag was null or undefined when calling mainPccAssignUsingPOST.');
        }

        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling mainPccAssignUsingPOST.');
        }

        if (progClassCode === null || progClassCode === undefined) {
            throw new Error('Required parameter progClassCode was null or undefined when calling mainPccAssignUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (overWriteFlag !== undefined && overWriteFlag !== null) {
            queryParameters = queryParameters.set('overWriteFlag', <any>overWriteFlag);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);
        }
        if (progClassCode !== undefined && progClassCode !== null) {
            queryParameters = queryParameters.set('progClassCode', <any>progClassCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/main-pcc/assign/${encodeURIComponent(String(applId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pccDetails
     * 
     * @param applId applId
     * @param phsOrgCode phsOrgCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling pccDetailsUsingPOST.');
        }

        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling pccDetailsUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/pcc-details/${encodeURIComponent(String(applId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
