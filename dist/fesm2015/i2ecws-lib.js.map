{"version":3,"file":"i2ecws-lib.js","sources":["../../variables.ts","../../configuration.ts","../../api/activitiesCodeController.service.ts","../../api/apiQueueEntity.service.ts","../../encoder.ts","../../api/appNavigationTController.service.ts","../../api/appNavigationTEntity.service.ts","../../api/araController.service.ts","../../api/araReasonsController.service.ts","../../api/boardsController.service.ts","../../api/cancerActivityController.service.ts","../../api/cancerActivityRolesController.service.ts","../../api/cgRefCodController.service.ts","../../api/emController.service.ts","../../api/exportController.service.ts","../../api/gwbLinksController.service.ts","../../api/i2eUserActiveRolesController.service.ts","../../api/icDataController.service.ts","../../api/jasperReportController.service.ts","../../api/lookupsController.service.ts","../../api/nciReferralGrantsController.service.ts","../../api/paylineCertificationsTEntity.service.ts","../../api/paylineController.service.ts","../../api/paylineStatusesTEntity.service.ts","../../api/paylistController.service.ts","../../api/paylistGrantsController.service.ts","../../api/paylistUtilController.service.ts","../../api/pdController.service.ts","../../api/propertiesController.service.ts","../../api/referralMessagesController.service.ts","../../api/referralMessagesTEntity.service.ts","../../api/referralSearchCriteriaController.service.ts","../../api/referralWorkflowController.service.ts","../../api/roAssignmentController.service.ts","../../api/userController.service.ts","../../api/workbenchController.service.ts","../../api/api.ts","../../model/acceptReferralActionDto.ts","../../model/activationParamsHolder.ts","../../model/addCaInterestActionDto.ts","../../model/apiServices.ts","../../model/appLookupT.ts","../../model/araReasonsDto.ts","../../model/assignRoActionDto.ts","../../model/boardsDto.ts","../../model/caAssignmentRulesDto.ts","../../model/closeReferralActionDto.ts","../../model/findPaylistCriteriaDto.ts","../../model/grantedAuthority.ts","../../model/gwbLinksT.ts","../../model/i2ERoles.ts","../../model/linkRelation.ts","../../model/links.ts","../../model/modelAndView.ts","../../model/parameter.ts","../../model/paylinesDto.ts","../../model/paylistGrantDto.ts","../../model/paylistGrantsCriteriaDto.ts","../../model/payload.ts","../../model/pccDetails.ts","../../model/pdTransferActionDto.ts","../../model/referActionDto.ts","../../model/referralMessagesReadT.ts","../../model/referralMessagesReadTDto.ts","../../model/rejectReferralActionDto.ts","../../model/releaseDualActionDto.ts","../../model/releaseDualSpclCaseActionDto.ts","../../model/removeCaInterestActionDto.ts","../../model/reopenReferralActionDto.ts","../../model/responseEntity.ts","../../model/templateVariable.ts","../../model/transferActionDto.ts","../../model/unreferReferralActionDto.ts","../../model/view.ts","../../api.module.ts","../../i2ecws-lib.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ActivitiesCodeControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getActivitiesCodes\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getActivitiesCodesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getActivitiesCodesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getActivitiesCodesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getActivitiesCodesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/activities-code/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EntityModelApiServices } from '../model/entityModelApiServices';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiQueueEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiQueueApiServicesUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiQueueApiServicesUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiQueueApiServicesUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelApiServices>;\n    public apiQueueApiServicesUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EntityModelApiServices>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingPATCH(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelApiServices>;\n    public apiQueueApiServicesUsingPATCH(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPATCH(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPATCH(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling apiQueueApiServicesUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<EntityModelApiServices>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingPOST(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelApiServices>;\n    public apiQueueApiServicesUsingPOST(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPOST(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPOST(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling apiQueueApiServicesUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<EntityModelApiServices>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingPUT(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelApiServices>;\n    public apiQueueApiServicesUsingPUT(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPUT(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPUT(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling apiQueueApiServicesUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<EntityModelApiServices>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AppNavigationTControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getNavLinks\n     * \n     * @param roles roles\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNavLinksUsingGET(roles: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNavLinksUsingGET(roles: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNavLinksUsingGET(roles: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNavLinksUsingGET(roles: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (roles === null || roles === undefined) {\n            throw new Error('Required parameter roles was null or undefined when calling getNavLinksUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (roles) {\n            roles.forEach((element) => {\n                queryParameters = queryParameters.append('roles', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/nav-links/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EntityModelGwbLinksT } from '../model/entityModelGwbLinksT';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AppNavigationTEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public appNavigationTGwbLinksTUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public appNavigationTGwbLinksTUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public appNavigationTGwbLinksTUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelGwbLinksT>;\n    public appNavigationTGwbLinksTUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EntityModelGwbLinksT>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingPATCH(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelGwbLinksT>;\n    public appNavigationTGwbLinksTUsingPATCH(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPATCH(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPATCH(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling appNavigationTGwbLinksTUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<EntityModelGwbLinksT>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingPOST(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelGwbLinksT>;\n    public appNavigationTGwbLinksTUsingPOST(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPOST(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPOST(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling appNavigationTGwbLinksTUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<EntityModelGwbLinksT>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingPUT(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelGwbLinksT>;\n    public appNavigationTGwbLinksTUsingPUT(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPUT(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPUT(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling appNavigationTGwbLinksTUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<EntityModelGwbLinksT>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AraControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getUnmatchedAras\n     * \n     * @param ncab ncab\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUnmatchedArasUsingGET(ncab: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUnmatchedArasUsingGET(ncab: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUnmatchedArasUsingGET(ncab: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUnmatchedArasUsingGET(ncab: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (ncab === null || ncab === undefined) {\n            throw new Error('Required parameter ncab was null or undefined when calling getUnmatchedArasUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-match/${encodeURIComponent(String(ncab))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ActivationParamsHolder } from '../model/activationParamsHolder';\nimport { AraReasonsDto } from '../model/araReasonsDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AraReasonsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Activate or deactivate the specified ARA Reason\n     * \n     * @param id id\n     * @param paramsHolder paramsHolder\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling activateOrDeactivateAraReasonUsingPATCH.');\n        }\n\n        if (paramsHolder === null || paramsHolder === undefined) {\n            throw new Error('Required parameter paramsHolder was null or undefined when calling activateOrDeactivateAraReasonUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<any>(`${this.basePath}/api/v1/ara-reasons/${encodeURIComponent(String(id))}`,\n            paramsHolder,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAraReasonsHistory\n     * \n     * @param code code\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraReasonsHistoryUsingGET(code: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraReasonsHistoryUsingGET(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraReasonsHistoryUsingGET(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraReasonsHistoryUsingGET(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (code === null || code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getAraReasonsHistoryUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons-history/${encodeURIComponent(String(code))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAraReasonsPrecedences\n     * \n     * @param available available\n     * @param include include\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (available !== undefined && available !== null) {\n            queryParameters = queryParameters.set('available', <any>available);\n        }\n        if (include !== undefined && include !== null) {\n            queryParameters = queryParameters.set('include', <any>include);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons-precedences`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAraReasons\n     * \n     * @param activeFlag activeFlag\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAraReasons\n     * \n     * @param code code\n     * @param activeFlag activeFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (code === null || code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getAraReasonsUsingGET1.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons/${encodeURIComponent(String(code))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getEraAraReasons\n     * \n     * @param activeFlag activeFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/era-ara-reasons`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getEraAraReasons\n     * \n     * @param code code\n     * @param activeFlag activeFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (code === null || code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getEraAraReasonsUsingGET1.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/era-ara-reasons/${encodeURIComponent(String(code))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveAraReason\n     * \n     * @param araReasonsDto araReasonsDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (araReasonsDto === null || araReasonsDto === undefined) {\n            throw new Error('Required parameter araReasonsDto was null or undefined when calling saveAraReasonUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/ara-reasons`,\n            araReasonsDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * updateAraReason\n     * \n     * @param araReasonsDto araReasonsDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (araReasonsDto === null || araReasonsDto === undefined) {\n            throw new Error('Required parameter araReasonsDto was null or undefined when calling updateAraReasonUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/ara-reasons`,\n            araReasonsDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { BoardsDto } from '../model/boardsDto';\nimport { ResponseEntity } from '../model/responseEntity';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class BoardsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * findBoardByDate\n     * \n     * @param month month\n     * @param year year\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findBoardByDateUsingGET(month: string, year: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findBoardByDateUsingGET(month: string, year: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findBoardByDateUsingGET(month: string, year: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findBoardByDateUsingGET(month: string, year: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (month === null || month === undefined) {\n            throw new Error('Required parameter month was null or undefined when calling findBoardByDateUsingGET.');\n        }\n\n        if (year === null || year === undefined) {\n            throw new Error('Required parameter year was null or undefined when calling findBoardByDateUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/boards/${encodeURIComponent(String(year))}/${encodeURIComponent(String(month))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getBoards\n     * \n     * @param meetingDate meetingDate\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (meetingDate !== undefined && meetingDate !== null) {\n            queryParameters = queryParameters.set('meetingDate', <any>meetingDate);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/boards`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getBodDatesList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBodDatesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getBodDatesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getBodDatesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getBodDatesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ncabs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCurrentWorkingBoard\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCurrentWorkingBoardUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getCurrentWorkingBoardUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getCurrentWorkingBoardUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getCurrentWorkingBoardUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/api/v1/boards/current-working-board`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getDefaultNcabDate\n     * \n     * @param date date\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDefaultNcabDateUsingGET(date?: Date, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getDefaultNcabDateUsingGET(date?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getDefaultNcabDateUsingGET(date?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getDefaultNcabDateUsingGET(date?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (date !== undefined && date !== null) {\n            queryParameters = queryParameters.set('date', <any>date.toISOString());\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/api/v1/boards/default-ncab-date`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveBoard\n     * \n     * @param boardsDto boardsDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveBoardUsingPOST(boardsDto: BoardsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (boardsDto === null || boardsDto === undefined) {\n            throw new Error('Required parameter boardsDto was null or undefined when calling saveBoardUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/boards`,\n            boardsDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * updateBoard\n     * \n     * @param boardsDto boardsDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateBoardUsingPUT(boardsDto: BoardsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (boardsDto === null || boardsDto === undefined) {\n            throw new Error('Required parameter boardsDto was null or undefined when calling updateBoardUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/boards`,\n            boardsDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * updateMeetingDate\n     * \n     * @param meetingDate meetingDate\n     * @param month month\n     * @param year year\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;\n    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;\n    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;\n    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (meetingDate === null || meetingDate === undefined) {\n            throw new Error('Required parameter meetingDate was null or undefined when calling updateMeetingDateUsingPATCH.');\n        }\n\n        if (month === null || month === undefined) {\n            throw new Error('Required parameter month was null or undefined when calling updateMeetingDateUsingPATCH.');\n        }\n\n        if (year === null || year === undefined) {\n            throw new Error('Required parameter year was null or undefined when calling updateMeetingDateUsingPATCH.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (meetingDate !== undefined && meetingDate !== null) {\n            queryParameters = queryParameters.set('meetingDate', <any>meetingDate);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<ResponseEntity>(`${this.basePath}/api/v1/boards/${encodeURIComponent(String(year))}/${encodeURIComponent(String(month))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CaAssignmentRulesDto } from '../model/caAssignmentRulesDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CancerActivityControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * deactivateCa\n     * \n     * @param caCode caCode\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deactivateCaUsingPATCH(caCode: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (caCode === null || caCode === undefined) {\n            throw new Error('Required parameter caCode was null or undefined when calling deactivateCaUsingPATCH.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling deactivateCaUsingPATCH.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (caCode !== undefined && caCode !== null) {\n            queryParameters = queryParameters.set('caCode', <any>caCode);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<any>(`${this.basePath}/api/v1/cas/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getActiveReferralCaAssignRules\n     * \n     * @param active active\n     * @param ignore ignore\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (active === null || active === undefined) {\n            throw new Error('Required parameter active was null or undefined when calling getActiveReferralCaAssignRulesUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (ignore !== undefined && ignore !== null) {\n            queryParameters = queryParameters.set('ignore', <any>ignore);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-ca-assign-rules/${encodeURIComponent(String(active))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAllActiveCaList\n     * \n     * @param activeFlag activeFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaAssignmentRulesHistory\n     * \n     * @param caCode caCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (caCode === null || caCode === undefined) {\n            throw new Error('Required parameter caCode was null or undefined when calling getCaAssignmentRulesHistoryUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ca-assignment-rules-history/${encodeURIComponent(String(caCode))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaByPDActiveGrantPortfolio\n     * \n     * @param npeId npeId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling getCaByPDActiveGrantPortfolioUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/get-cas-by-pd-active-grant-portfolio/${encodeURIComponent(String(npeId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaListBasedOnMechCode\n     * \n     * @param mechCode mechCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CaAssignmentRulesDto>>;\n    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaAssignmentRulesDto>>>;\n    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaAssignmentRulesDto>>>;\n    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (mechCode === null || mechCode === undefined) {\n            throw new Error('Required parameter mechCode was null or undefined when calling getCaListBasedOnMechCodeUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (mechCode !== undefined && mechCode !== null) {\n            queryParameters = queryParameters.set('mechCode', <any>mechCode);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<CaAssignmentRulesDto>>(`${this.basePath}/api/v1/cas-mech-codes/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaListBasedOnRfa\n     * \n     * @param rfaPa rfaPa\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CaAssignmentRulesDto>>;\n    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaAssignmentRulesDto>>>;\n    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaAssignmentRulesDto>>>;\n    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (rfaPa === null || rfaPa === undefined) {\n            throw new Error('Required parameter rfaPa was null or undefined when calling getCaListBasedOnRfaUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (rfaPa !== undefined && rfaPa !== null) {\n            queryParameters = queryParameters.set('rfaPa', <any>rfaPa);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<CaAssignmentRulesDto>>(`${this.basePath}/api/v1/cas-rfa/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaXferPortfolio\n     * \n     * @param pdId pdId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaXferPortfolioUsingGET(pdId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCaXferPortfolioUsingGET(pdId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCaXferPortfolioUsingGET(pdId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCaXferPortfolioUsingGET(pdId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (pdId === null || pdId === undefined) {\n            throw new Error('Required parameter pdId was null or undefined when calling getCaXferPortfolioUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas-xfer/${encodeURIComponent(String(pdId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCancerActivityPocs\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCancerActivityPocsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCancerActivityPocsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCancerActivityPocsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCancerActivityPocsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas/pocs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCasForPd\n     * \n     * @param pdId pdId\n     * @param monitorFlag monitorFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (pdId === null || pdId === undefined) {\n            throw new Error('Required parameter pdId was null or undefined when calling getCasForPdUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (monitorFlag !== undefined && monitorFlag !== null) {\n            queryParameters = queryParameters.set('monitorFlag', <any>monitorFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas/${encodeURIComponent(String(pdId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCasForPortfolio\n     * \n     * @param npeId npeId\n     * @param monitorFlag monitorFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling getCasForPortfolioUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (monitorFlag !== undefined && monitorFlag !== null) {\n            queryParameters = queryParameters.set('monitorFlag', <any>monitorFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas-portfolio/${encodeURIComponent(String(npeId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getNciOrgList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNciOrgListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNciOrgListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNciOrgListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNciOrgListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/nci-org-list/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPersonDetails\n     * \n     * @param orgId orgId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPersonDetailsUsingGET(orgId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPersonDetailsUsingGET(orgId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPersonDetailsUsingGET(orgId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPersonDetailsUsingGET(orgId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgId === null || orgId === undefined) {\n            throw new Error('Required parameter orgId was null or undefined when calling getPersonDetailsUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/i2e-person-details/${encodeURIComponent(String(orgId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralActivityCodesList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralActivityCodesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralActivityCodesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralActivityCodesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralActivityCodesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-activity-codes/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getRfaPaNoticeByNoticeNumber\n     * \n     * @param noticeNumber noticeNumber\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (noticeNumber === null || noticeNumber === undefined) {\n            throw new Error('Required parameter noticeNumber was null or undefined when calling getRfaPaNoticeByNoticeNumberUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/rfa-pa-notices/${encodeURIComponent(String(noticeNumber))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getRfaPaNoticesList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRfaPaNoticesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getRfaPaNoticesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getRfaPaNoticesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getRfaPaNoticesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/rfa-pa-notices/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveCancerActivity\n     * \n     * @param addNew addNew\n     * @param caCode caCode\n     * @param caDesc caDesc\n     * @param caOfcDiv caOfcDiv\n     * @param caPoc caPoc\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (addNew === null || addNew === undefined) {\n            throw new Error('Required parameter addNew was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (caCode === null || caCode === undefined) {\n            throw new Error('Required parameter caCode was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (caDesc === null || caDesc === undefined) {\n            throw new Error('Required parameter caDesc was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (caOfcDiv === null || caOfcDiv === undefined) {\n            throw new Error('Required parameter caOfcDiv was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (caPoc === null || caPoc === undefined) {\n            throw new Error('Required parameter caPoc was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (addNew !== undefined && addNew !== null) {\n            queryParameters = queryParameters.set('addNew', <any>addNew);\n        }\n        if (caCode !== undefined && caCode !== null) {\n            queryParameters = queryParameters.set('caCode', <any>caCode);\n        }\n        if (caDesc !== undefined && caDesc !== null) {\n            queryParameters = queryParameters.set('caDesc', <any>caDesc);\n        }\n        if (caOfcDiv !== undefined && caOfcDiv !== null) {\n            queryParameters = queryParameters.set('caOfcDiv', <any>caOfcDiv);\n        }\n        if (caPoc !== undefined && caPoc !== null) {\n            queryParameters = queryParameters.set('caPoc', <any>caPoc);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/cas/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveMechCaAssignment\n     * \n     * @param mechCode mechCode\n     * @param userId userId\n     * @param assignedCas assignedCas[]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (mechCode === null || mechCode === undefined) {\n            throw new Error('Required parameter mechCode was null or undefined when calling saveMechCaAssignmentUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling saveMechCaAssignmentUsingPOST.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (assignedCas) {\n            assignedCas.forEach((element) => {\n                queryParameters = queryParameters.append('assignedCas[]', <any>element);\n            })\n        }\n        if (mechCode !== undefined && mechCode !== null) {\n            queryParameters = queryParameters.set('mechCode', <any>mechCode);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/mech-ca-assignment/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveRfaPaAssignment\n     * \n     * @param rfaPa rfaPa\n     * @param userId userId\n     * @param assignedCas assignedCas[]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (rfaPa === null || rfaPa === undefined) {\n            throw new Error('Required parameter rfaPa was null or undefined when calling saveRfaPaAssignmentUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling saveRfaPaAssignmentUsingPOST.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (assignedCas) {\n            assignedCas.forEach((element) => {\n                queryParameters = queryParameters.append('assignedCas[]', <any>element);\n            })\n        }\n        if (rfaPa !== undefined && rfaPa !== null) {\n            queryParameters = queryParameters.set('rfaPa', <any>rfaPa);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/rfa-pa-assignment/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CancerActivityRolesControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * gatAllCancerActivityRoles\n     * \n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public gatAllCancerActivityRolesUsingGET(orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public gatAllCancerActivityRolesUsingGET(orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public gatAllCancerActivityRolesUsingGET(orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public gatAllCancerActivityRolesUsingGET(orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cancer-activity-roles/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCancerActivityRolesByNpeId\n     * \n     * @param npeId npeId\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCancerActivityRolesByNpeIdUsingGET(npeId: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCancerActivityRolesByNpeIdUsingGET(npeId: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCancerActivityRolesByNpeIdUsingGET(npeId: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCancerActivityRolesByNpeIdUsingGET(npeId: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling getCancerActivityRolesByNpeIdUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cancer-activity-roles/${encodeURIComponent(String(npeId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CgRefCodControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getRemoveCaInterestReasons\n     * \n     * @param domain domain\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRemoveCaInterestReasonsUsingGET(domain: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getRemoveCaInterestReasonsUsingGET(domain: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getRemoveCaInterestReasonsUsingGET(domain: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getRemoveCaInterestReasonsUsingGET(domain: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (domain === null || domain === undefined) {\n            throw new Error('Required parameter domain was null or undefined when calling getRemoveCaInterestReasonsUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-reasons/${encodeURIComponent(String(domain))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class EmControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * hello\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public helloUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public helloUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public helloUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public helloUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/em/api/v1/hello-em/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ExportControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * exportAraMatchReport\n     * \n     * @param ncab ncab\n     * @param requestParams requestParams\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (ncab === null || ncab === undefined) {\n            throw new Error('Required parameter ncab was null or undefined when calling exportAraMatchReportUsingGET.');\n        }\n\n        if (requestParams === null || requestParams === undefined) {\n            throw new Error('Required parameter requestParams was null or undefined when calling exportAraMatchReportUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (requestParams !== undefined && requestParams !== null) {\n            queryParameters = queryParameters.set('requestParams', <any>requestParams);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/ara-match/${encodeURIComponent(String(ncab))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * exportCancerActivities\n     * \n     * @param active active\n     * @param requestParams requestParams\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (active === null || active === undefined) {\n            throw new Error('Required parameter active was null or undefined when calling exportCancerActivitiesUsingGET.');\n        }\n\n        if (requestParams === null || requestParams === undefined) {\n            throw new Error('Required parameter requestParams was null or undefined when calling exportCancerActivitiesUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (requestParams !== undefined && requestParams !== null) {\n            queryParameters = queryParameters.set('requestParams', <any>requestParams);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/api/v1/export/cas/${encodeURIComponent(String(active))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * exportCancerActivities\n     * \n     * @param active active\n     * @param requestParams requestParams\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (active === null || active === undefined) {\n            throw new Error('Required parameter active was null or undefined when calling exportCancerActivitiesUsingGET1.');\n        }\n\n        if (requestParams === null || requestParams === undefined) {\n            throw new Error('Required parameter requestParams was null or undefined when calling exportCancerActivitiesUsingGET1.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (requestParams !== undefined && requestParams !== null) {\n            queryParameters = queryParameters.set('requestParams', <any>requestParams);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/api/v1/export/${encodeURIComponent(String(active))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCancerActivityPocs\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCancerActivityPocsUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCancerActivityPocsUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCancerActivityPocsUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCancerActivityPocsUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/cas/pocs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getTransferRolePocs\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTransferRolePocsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getTransferRolePocsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getTransferRolePocsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getTransferRolePocsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/xfer/pocs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class GwbLinksControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getLinks\n     * \n     * @param names names\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getLinksUsingGET(names?: Array<string>, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getLinksUsingGET(names?: Array<string>, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getLinksUsingGET(names?: Array<string>, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getLinksUsingGET(names?: Array<string>, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (names) {\n            names.forEach((element) => {\n                queryParameters = queryParameters.append('names', <any>element);\n            })\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/gwb-links`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class I2eUserActiveRolesControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getUsersByRoleCode\n     * \n     * @param roleCode roleCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsersByRoleCodeUsingGET(roleCode: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUsersByRoleCodeUsingGET(roleCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUsersByRoleCodeUsingGET(roleCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUsersByRoleCodeUsingGET(roleCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (roleCode === null || roleCode === undefined) {\n            throw new Error('Required parameter roleCode was null or undefined when calling getUsersByRoleCodeUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/i2eusers-by-rolecode/${encodeURIComponent(String(roleCode))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Payload } from '../model/payload';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class IcDataControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * appdFundinggsAssign\n     * \n     * @param applId applId\n     * @param directcostAmt directcostAmt\n     * @param indirectcostAmt indirectcostAmt\n     * @param phsOrgCode phsOrgCode\n     * @param totalPeriodAmt totalPeriodAmt\n     * @param transType transType\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (directcostAmt === null || directcostAmt === undefined) {\n            throw new Error('Required parameter directcostAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (indirectcostAmt === null || indirectcostAmt === undefined) {\n            throw new Error('Required parameter indirectcostAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (totalPeriodAmt === null || totalPeriodAmt === undefined) {\n            throw new Error('Required parameter totalPeriodAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (transType === null || transType === undefined) {\n            throw new Error('Required parameter transType was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (directcostAmt !== undefined && directcostAmt !== null) {\n            queryParameters = queryParameters.set('directcostAmt', <any>directcostAmt);\n        }\n        if (indirectcostAmt !== undefined && indirectcostAmt !== null) {\n            queryParameters = queryParameters.set('indirectcostAmt', <any>indirectcostAmt);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (totalPeriodAmt !== undefined && totalPeriodAmt !== null) {\n            queryParameters = queryParameters.set('totalPeriodAmt', <any>totalPeriodAmt);\n        }\n        if (transType !== undefined && transType !== null) {\n            queryParameters = queryParameters.set('transType', <any>transType);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/appd-fundings/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * awdFundingsAssign\n     * \n     * @param applId applId\n     * @param phsOrgCode phsOrgCode\n     * @param transType transType\n     * @param newCan newCan\n     * @param newPcc newPcc\n     * @param oldCan oldCan\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling awdFundingsAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling awdFundingsAssignUsingPOST.');\n        }\n\n        if (transType === null || transType === undefined) {\n            throw new Error('Required parameter transType was null or undefined when calling awdFundingsAssignUsingPOST.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (newCan !== undefined && newCan !== null) {\n            queryParameters = queryParameters.set('newCan', <any>newCan);\n        }\n        if (newPcc !== undefined && newPcc !== null) {\n            queryParameters = queryParameters.set('newPcc', <any>newPcc);\n        }\n        if (oldCan !== undefined && oldCan !== null) {\n            queryParameters = queryParameters.set('oldCan', <any>oldCan);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (transType !== undefined && transType !== null) {\n            queryParameters = queryParameters.set('transType', <any>transType);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/awd-fundings/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * fedPersonInvolvementAssign\n     * \n     * @param applId applId\n     * @param personId personId\n     * @param phsOrgCode phsOrgCode\n     * @param roleTypeCode roleTypeCode\n     * @param transactionType transactionType\n     * @param versionCode versionCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (personId === null || personId === undefined) {\n            throw new Error('Required parameter personId was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (roleTypeCode === null || roleTypeCode === undefined) {\n            throw new Error('Required parameter roleTypeCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (transactionType === null || transactionType === undefined) {\n            throw new Error('Required parameter transactionType was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (versionCode === null || versionCode === undefined) {\n            throw new Error('Required parameter versionCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (personId !== undefined && personId !== null) {\n            queryParameters = queryParameters.set('personId', <any>personId);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (roleTypeCode !== undefined && roleTypeCode !== null) {\n            queryParameters = queryParameters.set('roleTypeCode', <any>roleTypeCode);\n        }\n        if (transactionType !== undefined && transactionType !== null) {\n            queryParameters = queryParameters.set('transactionType', <any>transactionType);\n        }\n        if (versionCode !== undefined && versionCode !== null) {\n            queryParameters = queryParameters.set('versionCode', <any>versionCode);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/fed-person-involvement/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * icPccAssignMerge\n     * \n     * @param applId applId\n     * @param phsOrgCode phsOrgCode\n     * @param transactionType transactionType\n     * @param newPccCode newPccCode\n     * @param oldPccCode oldPccCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling icPccAssignMergeUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling icPccAssignMergeUsingPOST.');\n        }\n\n        if (transactionType === null || transactionType === undefined) {\n            throw new Error('Required parameter transactionType was null or undefined when calling icPccAssignMergeUsingPOST.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (newPccCode !== undefined && newPccCode !== null) {\n            queryParameters = queryParameters.set('newPccCode', <any>newPccCode);\n        }\n        if (oldPccCode !== undefined && oldPccCode !== null) {\n            queryParameters = queryParameters.set('oldPccCode', <any>oldPccCode);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (transactionType !== undefined && transactionType !== null) {\n            queryParameters = queryParameters.set('transactionType', <any>transactionType);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/ic-pcc/assign-merge/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * icPccAssign\n     * \n     * @param applId applId\n     * @param phsOrgCode phsOrgCode\n     * @param transactionType transactionType\n     * @param newPccCode newPccCode\n     * @param oldPccCode oldPccCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling icPccAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling icPccAssignUsingPOST.');\n        }\n\n        if (transactionType === null || transactionType === undefined) {\n            throw new Error('Required parameter transactionType was null or undefined when calling icPccAssignUsingPOST.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (newPccCode !== undefined && newPccCode !== null) {\n            queryParameters = queryParameters.set('newPccCode', <any>newPccCode);\n        }\n        if (oldPccCode !== undefined && oldPccCode !== null) {\n            queryParameters = queryParameters.set('oldPccCode', <any>oldPccCode);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (transactionType !== undefined && transactionType !== null) {\n            queryParameters = queryParameters.set('transactionType', <any>transactionType);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/ic-pcc/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * mainPccAssign\n     * \n     * @param applId applId\n     * @param overWriteFlag overWriteFlag\n     * @param phsOrgCode phsOrgCode\n     * @param progClassCode progClassCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling mainPccAssignUsingPOST.');\n        }\n\n        if (overWriteFlag === null || overWriteFlag === undefined) {\n            throw new Error('Required parameter overWriteFlag was null or undefined when calling mainPccAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling mainPccAssignUsingPOST.');\n        }\n\n        if (progClassCode === null || progClassCode === undefined) {\n            throw new Error('Required parameter progClassCode was null or undefined when calling mainPccAssignUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (overWriteFlag !== undefined && overWriteFlag !== null) {\n            queryParameters = queryParameters.set('overWriteFlag', <any>overWriteFlag);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (progClassCode !== undefined && progClassCode !== null) {\n            queryParameters = queryParameters.set('progClassCode', <any>progClassCode);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/main-pcc/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * pccDetails\n     * \n     * @param applId applId\n     * @param phsOrgCode phsOrgCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling pccDetailsUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling pccDetailsUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/pcc-details/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Report } from '../model/report';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class JasperReportControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * generateJasperReport\n     * \n     * @param EXPORT_FMT EXPORT_FMT\n     * @param id id\n     * @param name name\n     * @param promptexPReportId promptex-pReportId\n     * @param promptexPSessionId promptex-pSessionId\n     * @param type type\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (EXPORT_FMT !== undefined && EXPORT_FMT !== null) {\n            queryParameters = queryParameters.set('EXPORT_FMT', <any>EXPORT_FMT);\n        }\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('id', <any>id);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (promptexPReportId !== undefined && promptexPReportId !== null) {\n            queryParameters = queryParameters.set('promptex-pReportId', <any>promptexPReportId);\n        }\n        if (promptexPSessionId !== undefined && promptexPSessionId !== null) {\n            queryParameters = queryParameters.set('promptex-pSessionId', <any>promptexPSessionId);\n        }\n        if (type !== undefined && type !== null) {\n            queryParameters = queryParameters.set('type', <any>type);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/pdf',\n            'application/vnd.ms-excel'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/generate-jasper-report`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * generateJasperReport\n     * \n     * @param report report\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public generateJasperReportUsingPOST(report: Report, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public generateJasperReportUsingPOST(report: Report, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public generateJasperReportUsingPOST(report: Report, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public generateJasperReportUsingPOST(report: Report, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (report === null || report === undefined) {\n            throw new Error('Required parameter report was null or undefined when calling generateJasperReportUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/generate-jasper-report`,\n            report,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * generatePaylistReport\n     * \n     * @param paylistId paylistId\n     * @param reportName reportName\n     * @param type type\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylistId === null || paylistId === undefined) {\n            throw new Error('Required parameter paylistId was null or undefined when calling generatePaylistReportUsingGET.');\n        }\n\n        if (reportName === null || reportName === undefined) {\n            throw new Error('Required parameter reportName was null or undefined when calling generatePaylistReportUsingGET.');\n        }\n\n        if (type === null || type === undefined) {\n            throw new Error('Required parameter type was null or undefined when calling generatePaylistReportUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/pdf',\n            'application/vnd.ms-excel'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/generate-paylist-report/${encodeURIComponent(String(paylistId))}/${encodeURIComponent(String(reportName))}/${encodeURIComponent(String(type))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class LookupsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getDocAndCayCodes\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDocAndCayCodesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getDocAndCayCodesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getDocAndCayCodesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getDocAndCayCodesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/lookups/cayCode-doc`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getNciDocs\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNciDocsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNciDocsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNciDocsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNciDocsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/lookups/nci-doc`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPiInstitutes\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPiInstitutesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPiInstitutesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPiInstitutesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPiInstitutesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/lookups/pi-institutes`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class NciReferralGrantsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * exportGrantSearchResults\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling exportGrantSearchResultsUsingGET.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/transfer-grants`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * exportSearchResults\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling exportSearchResultsUsingGET.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/referral-grants`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * exportSearchResults\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling exportSearchResultsUsingPOST.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/export/referral-grants`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * findWithdrawnGrants\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findWithdrawnGrantsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findWithdrawnGrantsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findWithdrawnGrantsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findWithdrawnGrantsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants/withdrawn`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getSuggestedCayCodes\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSuggestedCayCodesUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getSuggestedCayCodesUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getSuggestedCayCodesUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getSuggestedCayCodesUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getSuggestedCayCodesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants/suggested-cay-codes/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * searchGrantsForPDAssignment\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applId applId\n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling searchGrantsForPDAssignmentUsingGET.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applId) {\n            applId.forEach((element) => {\n                queryParameters = queryParameters.append('applId', <any>element);\n            })\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pd-assignment/search`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * searchReferralGrants\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling searchReferralGrantsUsingGET.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants/search`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * searchReferralGrants\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling searchReferralGrantsUsingPOST.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral-grants/search`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * search\n     * \n     * @param applId applId\n     * @param cancerActivity cancerActivity\n     * @param grantsWithoutInterest grantsWithoutInterest\n     * @param mech mech\n     * @param minDaysSinceReferral minDaysSinceReferral\n     * @param ncabFromDate ncabFromDate\n     * @param ncabToDate ncabToDate\n     * @param orderBy orderBy\n     * @param pocNpnId pocNpnId\n     * @param referralDateHigh referralDateHigh\n     * @param referralDateLow referralDateLow\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (applId) {\n            applId.forEach((element) => {\n                queryParameters = queryParameters.append('applId', <any>element);\n            })\n        }\n        if (cancerActivity !== undefined && cancerActivity !== null) {\n            queryParameters = queryParameters.set('cancerActivity', <any>cancerActivity);\n        }\n        if (grantsWithoutInterest !== undefined && grantsWithoutInterest !== null) {\n            queryParameters = queryParameters.set('grantsWithoutInterest', <any>grantsWithoutInterest);\n        }\n        if (mech !== undefined && mech !== null) {\n            queryParameters = queryParameters.set('mech', <any>mech);\n        }\n        if (minDaysSinceReferral !== undefined && minDaysSinceReferral !== null) {\n            queryParameters = queryParameters.set('minDaysSinceReferral', <any>minDaysSinceReferral);\n        }\n        if (ncabFromDate !== undefined && ncabFromDate !== null) {\n            queryParameters = queryParameters.set('ncabFromDate', <any>ncabFromDate);\n        }\n        if (ncabToDate !== undefined && ncabToDate !== null) {\n            queryParameters = queryParameters.set('ncabToDate', <any>ncabToDate);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pocNpnId !== undefined && pocNpnId !== null) {\n            queryParameters = queryParameters.set('pocNpnId', <any>pocNpnId);\n        }\n        if (referralDateHigh !== undefined && referralDateHigh !== null) {\n            queryParameters = queryParameters.set('referralDateHigh', <any>referralDateHigh);\n        }\n        if (referralDateLow !== undefined && referralDateLow !== null) {\n            queryParameters = queryParameters.set('referralDateLow', <any>referralDateLow);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CollectionModelPaylineStatusesT } from '../model/collectionModelPaylineStatusesT';\nimport { EntityModelPaylineStatusesT } from '../model/entityModelPaylineStatusesT';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylineCertificationsTEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param id id\n     * @param paylinestatusestId paylinestatusestId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingDELETE(id: number, paylinestatusestId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE(id: number, paylinestatusestId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE(id: number, paylinestatusestId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE(id: number, paylinestatusestId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingDELETE.');\n        }\n\n        if (paylinestatusestId === null || paylinestatusestId === undefined) {\n            throw new Error('Required parameter paylinestatusestId was null or undefined when calling paylineCertificationsTPaylineStatusesUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses/${encodeURIComponent(String(paylinestatusestId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingDELETE1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CollectionModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param id id\n     * @param paylinestatusestId paylinestatusestId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingGET1(id: number, paylinestatusestId: string, observe?: 'body', reportProgress?: boolean): Observable<EntityModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingGET1(id: number, paylinestatusestId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingGET1(id: number, paylinestatusestId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingGET1(id: number, paylinestatusestId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingGET1.');\n        }\n\n        if (paylinestatusestId === null || paylinestatusestId === undefined) {\n            throw new Error('Required parameter paylinestatusestId was null or undefined when calling paylineCertificationsTPaylineStatusesUsingGET1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/hal+json'\n        ];\n\n        return this.httpClient.get<EntityModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses/${encodeURIComponent(String(paylinestatusestId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<CollectionModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<CollectionModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<CollectionModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { PaylinesDto } from '../model/paylinesDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylineControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * cancelPaylines\n     * \n     * @param paylineId payline_id\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylineId === null || paylineId === undefined) {\n            throw new Error('Required parameter paylineId was null or undefined when calling cancelPaylinesUsingPATCH.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling cancelPaylinesUsingPATCH.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (paylineId !== undefined && paylineId !== null) {\n            queryParameters = queryParameters.set('payline_id', <any>paylineId);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<any>(`${this.basePath}/api/v1/paylines/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * certifyPaylines\n     * \n     * @param paylinesDto paylinesDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylinesDto === null || paylinesDto === undefined) {\n            throw new Error('Required parameter paylinesDto was null or undefined when calling certifyPaylinesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylines/certify`,\n            paylinesDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * findCertifiedPaylines\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findCertifiedPaylinesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findCertifiedPaylinesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findCertifiedPaylinesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findCertifiedPaylinesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/certified-paylines`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getFiscalYear\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getFiscalYearUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getFiscalYearUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getFiscalYearUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getFiscalYearUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/fiscal-years`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getNewPaylines\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNewPaylinesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNewPaylinesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNewPaylinesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNewPaylinesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/new-paylines`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getOEFIAPaylines\n     * \n     * @param certifiedFlag \n     * @param fy \n     * @param isOefiaCertifier \n     * @param userId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (certifiedFlag !== undefined && certifiedFlag !== null) {\n            queryParameters = queryParameters.set('certifiedFlag', <any>certifiedFlag);\n        }\n        if (fy !== undefined && fy !== null) {\n            queryParameters = queryParameters.set('fy', <any>fy);\n        }\n        if (isOefiaCertifier !== undefined && isOefiaCertifier !== null) {\n            queryParameters = queryParameters.set('isOefiaCertifier', <any>isOefiaCertifier);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/oefia-paylines`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylineHistoryById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylineHistoryByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylineHistoryByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylineHistoryByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylineHistoryByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylineHistoryByIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/history/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylineHistory\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylineHistoryUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylineHistoryUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylineHistoryUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylineHistoryUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylineHistoryUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/${encodeURIComponent(String(id))}/history`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylinesById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylinesByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylinesByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylinesByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylinesByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylinesByIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/view-paylines/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylinesByParameters\n     * \n     * @param fy fy\n     * @param activityCode activityCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylinesByParametersUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activityCode !== undefined && activityCode !== null) {\n            queryParameters = queryParameters.set('activityCode', <any>activityCode);\n        }\n        if (fy !== undefined && fy !== null) {\n            queryParameters = queryParameters.set('fy', <any>fy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylines\n     * \n     * @param activityCode activityCode\n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylinesUsingGET(activityCode: string, fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (activityCode === null || activityCode === undefined) {\n            throw new Error('Required parameter activityCode was null or undefined when calling getPaylinesUsingGET.');\n        }\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylinesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/${encodeURIComponent(String(fy))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylines\n     * \n     * @param activityCode activityCode\n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylinesUsingGET1(activityCode: string, fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (activityCode === null || activityCode === undefined) {\n            throw new Error('Required parameter activityCode was null or undefined when calling getPaylinesUsingGET1.');\n        }\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylinesUsingGET1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/${encodeURIComponent(String(fy))}/${encodeURIComponent(String(activityCode))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * unCertifyPaylines\n     * \n     * @param paylinesDto paylinesDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylinesDto === null || paylinesDto === undefined) {\n            throw new Error('Required parameter paylinesDto was null or undefined when calling unCertifyPaylinesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylines/un-certify`,\n            paylinesDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EntityModelAppLookupT } from '../model/entityModelAppLookupT';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylineStatusesTEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public paylineStatusesTStatusIdUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public paylineStatusesTStatusIdUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public paylineStatusesTStatusIdUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelAppLookupT>;\n    public paylineStatusesTStatusIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EntityModelAppLookupT>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingPATCH(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelAppLookupT>;\n    public paylineStatusesTStatusIdUsingPATCH(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPATCH(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPATCH(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineStatusesTStatusIdUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<EntityModelAppLookupT>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingPOST(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelAppLookupT>;\n    public paylineStatusesTStatusIdUsingPOST(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPOST(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPOST(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineStatusesTStatusIdUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<EntityModelAppLookupT>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingPUT(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelAppLookupT>;\n    public paylineStatusesTStatusIdUsingPUT(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPUT(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPUT(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineStatusesTStatusIdUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<EntityModelAppLookupT>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { FindPaylistCriteriaDto } from '../model/findPaylistCriteriaDto';\nimport { PaylistDto } from '../model/paylistDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylistControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * certifyPaylist\n     * \n     * @param paylistDto paylistDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylistDto === null || paylistDto === undefined) {\n            throw new Error('Required parameter paylistDto was null or undefined when calling certifyPaylistUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylists/certify-paylist`,\n            paylistDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * deletePaylist\n     * \n     * @param paylistId paylistId\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylistId === null || paylistId === undefined) {\n            throw new Error('Required parameter paylistId was null or undefined when calling deletePaylistUsingDELETE.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling deletePaylistUsingDELETE.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (paylistId !== undefined && paylistId !== null) {\n            queryParameters = queryParameters.set('paylistId', <any>paylistId);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/api/v1/paylists/delete`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * findPaylists\n     * \n     * @param criteriaDto criteriaDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (criteriaDto === null || criteriaDto === undefined) {\n            throw new Error('Required parameter criteriaDto was null or undefined when calling findPaylistsUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylists/find-paylists`,\n            criteriaDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getDeactivated\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDeactivatedUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getDeactivatedUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getDeactivatedUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getDeactivatedUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/deactivated-paylists`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylineHistoryById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylineHistoryByIdUsingGET1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylineHistoryByIdUsingGET1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylineHistoryByIdUsingGET1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylineHistoryByIdUsingGET1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylineHistoryByIdUsingGET1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylists/history/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistFiscalYears\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistFiscalYearsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistFiscalYearsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistFiscalYearsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistFiscalYearsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-fiscal-years`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistGrantsById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistGrantsByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistGrantsByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistGrantsByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistGrantsByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylistGrantsByIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistGrants\n     * \n     * @param activityCode activityCode\n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (activityCode === null || activityCode === undefined) {\n            throw new Error('Required parameter activityCode was null or undefined when calling getPaylistGrantsUsingGET.');\n        }\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylistGrantsUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/${encodeURIComponent(String(fy))}/${encodeURIComponent(String(activityCode))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylists\n     * \n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistsUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistsUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistsUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistsUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylistsUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (fy !== undefined && fy !== null) {\n            queryParameters = queryParameters.set('fy', <any>fy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/view-paylists`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPendingGrants\n     * \n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPendingGrantsUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPendingGrantsUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPendingGrantsUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPendingGrantsUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPendingGrantsUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (fy !== undefined && fy !== null) {\n            queryParameters = queryParameters.set('fy', <any>fy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pending-grants`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getUncertified\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUncertifiedUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUncertifiedUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUncertifiedUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUncertifiedUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/uncertified-paylists`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * savePaylist\n     * \n     * @param paylistDto paylistDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public savePaylistUsingPOST(paylistDto: PaylistDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylistDto === null || paylistDto === undefined) {\n            throw new Error('Required parameter paylistDto was null or undefined when calling savePaylistUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylists/save-paylist`,\n            paylistDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { PaylistGrantsCriteriaDto } from '../model/paylistGrantsCriteriaDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylistGrantsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * findPaylistGrants\n     * \n     * @param criteriaDto criteriaDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (criteriaDto === null || criteriaDto === undefined) {\n            throw new Error('Required parameter criteriaDto was null or undefined when calling findPaylistGrantsUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylist-grants/find-open`,\n            criteriaDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getExceptionMapping\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getExceptionMappingUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getExceptionMappingUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getExceptionMappingUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getExceptionMappingUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/exception-mapping`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * massGenPaylistEnabled\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public massGenPaylistEnabledUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public massGenPaylistEnabledUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public massGenPaylistEnabledUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public massGenPaylistEnabledUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/mass-gen-enabled`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * massGeneratePaylists\n     * \n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public massGeneratePaylistsUsingPOST(userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public massGeneratePaylistsUsingPOST(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public massGeneratePaylistsUsingPOST(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public massGeneratePaylistsUsingPOST(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling massGeneratePaylistsUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylist-grants/mass-gen-paylists`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * retrievePaylistGrantsById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public retrievePaylistGrantsByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public retrievePaylistGrantsByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public retrievePaylistGrantsByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public retrievePaylistGrantsByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling retrievePaylistGrantsByIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/retrieve/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * searchPaylinePaylistGrants\n     * \n     * @param criteriaDto criteriaDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (criteriaDto === null || criteriaDto === undefined) {\n            throw new Error('Required parameter criteriaDto was null or undefined when calling searchPaylinePaylistGrantsUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylist-grants/search-ppg`,\n            criteriaDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylistUtilControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getBudgetMechanismsForFy\n     * \n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBudgetMechanismsForFyUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getBudgetMechanismsForFyUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getBudgetMechanismsForFyUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getBudgetMechanismsForFyUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getBudgetMechanismsForFyUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-util/budget-mechanisms/${encodeURIComponent(String(fy))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCostCenters\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCostCentersUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCostCentersUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCostCentersUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCostCentersUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-util/cost-centers`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistStatuses\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistStatusesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistStatusesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistStatusesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistStatusesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-util/paylist-statuses`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistTypes\n     * \n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistTypesUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistTypesUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistTypesUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistTypesUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylistTypesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-util/paylist-types/${encodeURIComponent(String(fy))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PdControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getPDList\n     * \n     * @param active active\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPDListUsingGET(active: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPDListUsingGET(active: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPDListUsingGET(active: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPDListUsingGET(active: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (active === null || active === undefined) {\n            throw new Error('Required parameter active was null or undefined when calling getPDListUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pd-list/${encodeURIComponent(String(active))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPDPortfolios\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPDPortfoliosUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPDPortfoliosUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPDPortfoliosUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPDPortfoliosUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pd-portfolios/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPdsByCayCode\n     * \n     * @param ca ca\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (ca === null || ca === undefined) {\n            throw new Error('Required parameter ca was null or undefined when calling getPdsByCayCodeUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pds/${encodeURIComponent(String(ca))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPdsByCayCodes\n     * \n     * @param cas cas\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (cas === null || cas === undefined) {\n            throw new Error('Required parameter cas was null or undefined when calling getPdsByCayCodesUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (cas) {\n            cas.forEach((element) => {\n                queryParameters = queryParameters.append('cas', <any>element);\n            })\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pds/ca/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * isPdHasActiveGrantPortfolio\n     * \n     * @param npeId npeId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling isPdHasActiveGrantPortfolioUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/check-pd-has-active-grant-portfolio/${encodeURIComponent(String(npeId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PropertiesControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getProperties\n     * \n     * @param app app\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPropertiesUsingGET(app: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPropertiesUsingGET(app: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPropertiesUsingGET(app: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPropertiesUsingGET(app: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (app === null || app === undefined) {\n            throw new Error('Required parameter app was null or undefined when calling getPropertiesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/properties/${encodeURIComponent(String(app))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getProperties\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPropertiesUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPropertiesUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPropertiesUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPropertiesUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/properties/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getProperty\n     * \n     * @param app app\n     * @param propKey propKey\n     * @param defaultValue defaultValue\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPropertyUsingGET(app: string, propKey: string, defaultValue?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPropertyUsingGET(app: string, propKey: string, defaultValue?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPropertyUsingGET(app: string, propKey: string, defaultValue?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPropertyUsingGET(app: string, propKey: string, defaultValue?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (app === null || app === undefined) {\n            throw new Error('Required parameter app was null or undefined when calling getPropertyUsingGET.');\n        }\n\n        if (propKey === null || propKey === undefined) {\n            throw new Error('Required parameter propKey was null or undefined when calling getPropertyUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (defaultValue !== undefined && defaultValue !== null) {\n            queryParameters = queryParameters.set('defaultValue', <any>defaultValue);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/properties/${encodeURIComponent(String(app))}/${encodeURIComponent(String(propKey))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ReferralMessagesReadTDto } from '../model/referralMessagesReadTDto';\nimport { ReferralMessagesTDto } from '../model/referralMessagesTDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReferralMessagesControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getMessagesForApplId\n     * \n     * @param applId applId\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getMessagesForApplIdUsingGET(applId: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getMessagesForApplIdUsingGET(applId: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getMessagesForApplIdUsingGET(applId: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getMessagesForApplIdUsingGET(applId: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getMessagesForApplIdUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/message/${encodeURIComponent(String(applId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * readAllMessages\n     * \n     * @param applId applId\n     * @param npnId npnId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public readAllMessagesUsingPOST(applId: number, npnId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public readAllMessagesUsingPOST(applId: number, npnId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public readAllMessagesUsingPOST(applId: number, npnId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public readAllMessagesUsingPOST(applId: number, npnId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling readAllMessagesUsingPOST.');\n        }\n\n        if (npnId === null || npnId === undefined) {\n            throw new Error('Required parameter npnId was null or undefined when calling readAllMessagesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/message-read/${encodeURIComponent(String(applId))}/${encodeURIComponent(String(npnId))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * readMessage\n     * \n     * @param message message\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public readMessageUsingPOST(message: ReferralMessagesReadTDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public readMessageUsingPOST(message: ReferralMessagesReadTDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public readMessageUsingPOST(message: ReferralMessagesReadTDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public readMessageUsingPOST(message: ReferralMessagesReadTDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (message === null || message === undefined) {\n            throw new Error('Required parameter message was null or undefined when calling readMessageUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/message-read`,\n            message,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveMessage\n     * \n     * @param message message\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveMessageUsingPOST(message: ReferralMessagesTDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveMessageUsingPOST(message: ReferralMessagesTDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveMessageUsingPOST(message: ReferralMessagesTDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveMessageUsingPOST(message: ReferralMessagesTDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (message === null || message === undefined) {\n            throw new Error('Required parameter message was null or undefined when calling saveMessageUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/message`,\n            message,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CollectionModelReferralMessagesReadT } from '../model/collectionModelReferralMessagesReadT';\nimport { EntityModelReferralMessagesReadT } from '../model/entityModelReferralMessagesReadT';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReferralMessagesTEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param id id\n     * @param referralmessagesreadtId referralmessagesreadtId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingDELETE.');\n        }\n\n        if (referralmessagesreadtId === null || referralmessagesreadtId === undefined) {\n            throw new Error('Required parameter referralmessagesreadtId was null or undefined when calling referralMessagesTMessagesReadUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead/${encodeURIComponent(String(referralmessagesreadtId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public referralMessagesTMessagesReadUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public referralMessagesTMessagesReadUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public referralMessagesTMessagesReadUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingDELETE1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CollectionModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param id id\n     * @param referralmessagesreadtId referralmessagesreadtId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe?: 'body', reportProgress?: boolean): Observable<EntityModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingGET1.');\n        }\n\n        if (referralmessagesreadtId === null || referralmessagesreadtId === undefined) {\n            throw new Error('Required parameter referralmessagesreadtId was null or undefined when calling referralMessagesTMessagesReadUsingGET1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/hal+json'\n        ];\n\n        return this.httpClient.get<EntityModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead/${encodeURIComponent(String(referralmessagesreadtId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling referralMessagesTMessagesReadUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<CollectionModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling referralMessagesTMessagesReadUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<CollectionModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling referralMessagesTMessagesReadUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<CollectionModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReferralSearchCriteriaControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getAraMatchStatuses\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraMatchStatusesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraMatchStatusesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraMatchStatusesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraMatchStatusesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-statuses/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getI2eStatuses\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getI2eStatusesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getI2eStatusesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getI2eStatusesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getI2eStatusesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/i2e-statuses`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralCloseReasons\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralCloseReasonsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralCloseReasonsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralCloseReasonsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralCloseReasonsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-close-reasons`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralFrom\n     * \n     * @param role role\n     * @param npnId npnId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralFromUsingGET(role: string, npnId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralFromUsingGET(role: string, npnId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralFromUsingGET(role: string, npnId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralFromUsingGET(role: string, npnId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (role === null || role === undefined) {\n            throw new Error('Required parameter role was null or undefined when calling getReferralFromUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-from/${encodeURIComponent(String(role))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralStatuses\n     * \n     * @param role role\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralStatusesUsingGET(role: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralStatusesUsingGET(role: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralStatusesUsingGET(role: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralStatusesUsingGET(role: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (role === null || role === undefined) {\n            throw new Error('Required parameter role was null or undefined when calling getReferralStatusesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-statuses/${encodeURIComponent(String(role))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { AcceptReferralActionDto } from '../model/acceptReferralActionDto';\nimport { AddCaInterestActionDto } from '../model/addCaInterestActionDto';\nimport { AssignRoActionDto } from '../model/assignRoActionDto';\nimport { CloseReferralActionDto } from '../model/closeReferralActionDto';\nimport { PdTransferActionDto } from '../model/pdTransferActionDto';\nimport { ReferActionDto } from '../model/referActionDto';\nimport { RejectReferralActionDto } from '../model/rejectReferralActionDto';\nimport { ReleaseDualActionDto } from '../model/releaseDualActionDto';\nimport { ReleaseDualSpclCaseActionDto } from '../model/releaseDualSpclCaseActionDto';\nimport { RemoveCaInterestActionDto } from '../model/removeCaInterestActionDto';\nimport { ReopenReferralActionDto } from '../model/reopenReferralActionDto';\nimport { TransferActionDto } from '../model/transferActionDto';\nimport { UnreferReferralActionDto } from '../model/unreferReferralActionDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReferralWorkflowControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * accept\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling acceptUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling acceptUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/accept/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * addCaInterest\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling addCaInterestUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling addCaInterestUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/add-ca-interest/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * assignRO\n     * \n     * @param applToRos applToRos\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applToRos === null || applToRos === undefined) {\n            throw new Error('Required parameter applToRos was null or undefined when calling assignROUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling assignROUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/assign-ro/${encodeURIComponent(String(userId))}`,\n            applToRos,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * closeReferral\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling closeReferralUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling closeReferralUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/close-referral/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCurrentRefPssCode\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCurrentRefPssCodeUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCurrentRefPssCodeUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCurrentRefPssCodeUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCurrentRefPssCodeUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getCurrentRefPssCodeUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/current-ref-pss-code/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPreviousPdCa\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPreviousPdCaUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPreviousPdCaUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPreviousPdCaUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPreviousPdCaUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getPreviousPdCaUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/previous-pd-ca/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralActionHistory\n     * \n     * @param applId applId\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getReferralActionHistoryUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-action-history/${encodeURIComponent(String(applId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReopenPssCode\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReopenPssCodeUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReopenPssCodeUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReopenPssCodeUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReopenPssCodeUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getReopenPssCodeUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/reopen-pss-code/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReopenPssDescription\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReopenPssDescriptionUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReopenPssDescriptionUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReopenPssDescriptionUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReopenPssDescriptionUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getReopenPssDescriptionUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/reopen-pss-description/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * refer\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling referUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling referUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/refer/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * rejectReferral\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling rejectReferralUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling rejectReferralUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/reject-referral/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * releaseDualSpclCase\n     * \n     * @param npnId npnId\n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npnId === null || npnId === undefined) {\n            throw new Error('Required parameter npnId was null or undefined when calling releaseDualSpclCaseUsingPOST.');\n        }\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling releaseDualSpclCaseUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling releaseDualSpclCaseUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/release-dual-spcl-case/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * releaseDual\n     * \n     * @param npnId npnId\n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npnId === null || npnId === undefined) {\n            throw new Error('Required parameter npnId was null or undefined when calling releaseDualUsingPOST.');\n        }\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling releaseDualUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling releaseDualUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/release-dual/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * removeCaInterest\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling removeCaInterestUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling removeCaInterestUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/remove-ca-interest/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * reopenReferral\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling reopenReferralUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling reopenReferralUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/reopen-referral/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * transfer\n     * \n     * @param isXfer isXfer\n     * @param npeId npeId\n     * @param transfers transfers\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (isXfer === null || isXfer === undefined) {\n            throw new Error('Required parameter isXfer was null or undefined when calling transferUsingPOST.');\n        }\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling transferUsingPOST.');\n        }\n\n        if (transfers === null || transfers === undefined) {\n            throw new Error('Required parameter transfers was null or undefined when calling transferUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling transferUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/pd-assignment/transfer/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npeId))}/${encodeURIComponent(String(isXfer))}`,\n            transfers,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * transfer\n     * \n     * @param npnId npnId\n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npnId === null || npnId === undefined) {\n            throw new Error('Required parameter npnId was null or undefined when calling transferUsingPOST1.');\n        }\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling transferUsingPOST1.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling transferUsingPOST1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/transfer/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * unrefer\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling unreferUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling unreferUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/unrefer/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * validateReferralAction\n     * \n     * @param action action\n     * @param applId applId\n     * @param userNpnId userNpnId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (action === null || action === undefined) {\n            throw new Error('Required parameter action was null or undefined when calling validateReferralActionUsingGET.');\n        }\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling validateReferralActionUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (action !== undefined && action !== null) {\n            queryParameters = queryParameters.set('action', <any>action);\n        }\n        if (applId) {\n            applId.forEach((element) => {\n                queryParameters = queryParameters.append('applId', <any>element);\n            })\n        }\n        if (userNpnId !== undefined && userNpnId !== null) {\n            queryParameters = queryParameters.set('userNpnId', <any>userNpnId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/validation`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * validateTransferGrantAction\n     * \n     * @param applId applId\n     * @param userCayCodes userCayCodes\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling validateTransferGrantActionUsingGET.');\n        }\n\n        if (userCayCodes === null || userCayCodes === undefined) {\n            throw new Error('Required parameter userCayCodes was null or undefined when calling validateTransferGrantActionUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (applId) {\n            applId.forEach((element) => {\n                queryParameters = queryParameters.append('applId', <any>element);\n            })\n        }\n        if (userCayCodes) {\n            userCayCodes.forEach((element) => {\n                queryParameters = queryParameters.append('userCayCodes', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/transferGrants/validation`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class RoAssignmentControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getActiveROList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getActiveROListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getActiveROListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getActiveROListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getActiveROListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ro-list/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getDefaultRO\n     * \n     * @param isDefaultRO isDefaultRO\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDefaultROUsingGET(isDefaultRO: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getDefaultROUsingGET(isDefaultRO: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getDefaultROUsingGET(isDefaultRO: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getDefaultROUsingGET(isDefaultRO: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (isDefaultRO === null || isDefaultRO === undefined) {\n            throw new Error('Required parameter isDefaultRO was null or undefined when calling getDefaultROUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ro-assignment-rules/${encodeURIComponent(String(isDefaultRO))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getRoAssignmentRulesList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRoAssignmentRulesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getRoAssignmentRulesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getRoAssignmentRulesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getRoAssignmentRulesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ro-assignment-rules/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * inactivateAllRoAssignments\n     * \n     * @param roNpeId roNpeId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public inactivateAllRoAssignmentsUsingPATCH(roNpeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public inactivateAllRoAssignmentsUsingPATCH(roNpeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public inactivateAllRoAssignmentsUsingPATCH(roNpeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public inactivateAllRoAssignmentsUsingPATCH(roNpeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (roNpeId === null || roNpeId === undefined) {\n            throw new Error('Required parameter roNpeId was null or undefined when calling inactivateAllRoAssignmentsUsingPATCH.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (roNpeId !== undefined && roNpeId !== null) {\n            queryParameters = queryParameters.set('roNpeId', <any>roNpeId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<any>(`${this.basePath}/api/v1/ro-assignment-rules/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveOrUpdateDefaultRo\n     * \n     * @param defaultRoNpeId defaultRoNpeId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveOrUpdateDefaultRoUsingPUT(defaultRoNpeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveOrUpdateDefaultRoUsingPUT(defaultRoNpeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveOrUpdateDefaultRoUsingPUT(defaultRoNpeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveOrUpdateDefaultRoUsingPUT(defaultRoNpeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (defaultRoNpeId === null || defaultRoNpeId === undefined) {\n            throw new Error('Required parameter defaultRoNpeId was null or undefined when calling saveOrUpdateDefaultRoUsingPUT.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (defaultRoNpeId !== undefined && defaultRoNpeId !== null) {\n            queryParameters = queryParameters.set('defaultRoNpeId', <any>defaultRoNpeId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/ro-assignment-rules/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveRoAssignment\n     * \n     * @param npeId npeId\n     * @param userId userId\n     * @param mechList mechList[]\n     * @param rfaList rfaList[]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveRoAssignmentUsingPUT(npeId: string, userId: string, mechList?: Array<string>, rfaList?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveRoAssignmentUsingPUT(npeId: string, userId: string, mechList?: Array<string>, rfaList?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveRoAssignmentUsingPUT(npeId: string, userId: string, mechList?: Array<string>, rfaList?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveRoAssignmentUsingPUT(npeId: string, userId: string, mechList?: Array<string>, rfaList?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling saveRoAssignmentUsingPUT.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling saveRoAssignmentUsingPUT.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (mechList) {\n            mechList.forEach((element) => {\n                queryParameters = queryParameters.append('mechList[]', <any>element);\n            })\n        }\n        if (rfaList) {\n            rfaList.forEach((element) => {\n                queryParameters = queryParameters.append('rfaList[]', <any>element);\n            })\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/ro-assignments/${encodeURIComponent(String(npeId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { SecurityCredentials } from '../model/securityCredentials';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class UserControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getUsers\n     * \n     * @param activeFlag activeFlag\n     * @param term term\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsersUsingGET(activeFlag?: boolean, term?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUsersUsingGET(activeFlag?: boolean, term?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUsersUsingGET(activeFlag?: boolean, term?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUsersUsingGET(activeFlag?: boolean, term?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/nci-people/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingDELETE(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingDELETE(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingDELETE(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingDELETE(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingGET(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingHEAD(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingHEAD(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingHEAD(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingHEAD(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.head<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingOPTIONS(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingOPTIONS(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingOPTIONS(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingOPTIONS(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.options<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingPATCH(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingPATCH(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingPATCH(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingPATCH(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingPOST(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingPOST(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingPOST(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingPOST(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingPUT(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingPUT(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingPUT(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingPUT(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ModelAndView } from '../model/modelAndView';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class WorkbenchControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getWorkbenchReferralActivityApplet\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWorkbenchReferralActivityAppletUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;\n    public getWorkbenchReferralActivityAppletUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;\n    public getWorkbenchReferralActivityAppletUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;\n    public getWorkbenchReferralActivityAppletUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml',\n            'text/html'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<ModelAndView>(`${this.basePath}/api/v1/workbench/referral-activity-applet`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getWorkbenchReferralApplet\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWorkbenchReferralAppletUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;\n    public getWorkbenchReferralAppletUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;\n    public getWorkbenchReferralAppletUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;\n    public getWorkbenchReferralAppletUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml',\n            'text/html'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<ModelAndView>(`${this.basePath}/api/v1/workbench/referral-applet`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './activitiesCodeController.service';\nimport { ActivitiesCodeControllerService } from './activitiesCodeController.service';\nexport * from './apiQueueEntity.service';\nimport { ApiQueueEntityService } from './apiQueueEntity.service';\nexport * from './appNavigationTController.service';\nimport { AppNavigationTControllerService } from './appNavigationTController.service';\nexport * from './appNavigationTEntity.service';\nimport { AppNavigationTEntityService } from './appNavigationTEntity.service';\nexport * from './araController.service';\nimport { AraControllerService } from './araController.service';\nexport * from './araReasonsController.service';\nimport { AraReasonsControllerService } from './araReasonsController.service';\nexport * from './boardsController.service';\nimport { BoardsControllerService } from './boardsController.service';\nexport * from './cancerActivityController.service';\nimport { CancerActivityControllerService } from './cancerActivityController.service';\nexport * from './cancerActivityRolesController.service';\nimport { CancerActivityRolesControllerService } from './cancerActivityRolesController.service';\nexport * from './cgRefCodController.service';\nimport { CgRefCodControllerService } from './cgRefCodController.service';\nexport * from './emController.service';\nimport { EmControllerService } from './emController.service';\nexport * from './exportController.service';\nimport { ExportControllerService } from './exportController.service';\nexport * from './gwbLinksController.service';\nimport { GwbLinksControllerService } from './gwbLinksController.service';\nexport * from './i2eUserActiveRolesController.service';\nimport { I2eUserActiveRolesControllerService } from './i2eUserActiveRolesController.service';\nexport * from './icDataController.service';\nimport { IcDataControllerService } from './icDataController.service';\nexport * from './jasperReportController.service';\nimport { JasperReportControllerService } from './jasperReportController.service';\nexport * from './lookupsController.service';\nimport { LookupsControllerService } from './lookupsController.service';\nexport * from './nciReferralGrantsController.service';\nimport { NciReferralGrantsControllerService } from './nciReferralGrantsController.service';\nexport * from './paylineCertificationsTEntity.service';\nimport { PaylineCertificationsTEntityService } from './paylineCertificationsTEntity.service';\nexport * from './paylineController.service';\nimport { PaylineControllerService } from './paylineController.service';\nexport * from './paylineStatusesTEntity.service';\nimport { PaylineStatusesTEntityService } from './paylineStatusesTEntity.service';\nexport * from './paylistController.service';\nimport { PaylistControllerService } from './paylistController.service';\nexport * from './paylistGrantsController.service';\nimport { PaylistGrantsControllerService } from './paylistGrantsController.service';\nexport * from './paylistUtilController.service';\nimport { PaylistUtilControllerService } from './paylistUtilController.service';\nexport * from './pdController.service';\nimport { PdControllerService } from './pdController.service';\nexport * from './propertiesController.service';\nimport { PropertiesControllerService } from './propertiesController.service';\nexport * from './referralMessagesController.service';\nimport { ReferralMessagesControllerService } from './referralMessagesController.service';\nexport * from './referralMessagesTEntity.service';\nimport { ReferralMessagesTEntityService } from './referralMessagesTEntity.service';\nexport * from './referralSearchCriteriaController.service';\nimport { ReferralSearchCriteriaControllerService } from './referralSearchCriteriaController.service';\nexport * from './referralWorkflowController.service';\nimport { ReferralWorkflowControllerService } from './referralWorkflowController.service';\nexport * from './roAssignmentController.service';\nimport { RoAssignmentControllerService } from './roAssignmentController.service';\nexport * from './userController.service';\nimport { UserControllerService } from './userController.service';\nexport * from './workbenchController.service';\nimport { WorkbenchControllerService } from './workbenchController.service';\nexport const APIS = [ActivitiesCodeControllerService, ApiQueueEntityService, AppNavigationTControllerService, AppNavigationTEntityService, AraControllerService, AraReasonsControllerService, BoardsControllerService, CancerActivityControllerService, CancerActivityRolesControllerService, CgRefCodControllerService, EmControllerService, ExportControllerService, GwbLinksControllerService, I2eUserActiveRolesControllerService, IcDataControllerService, JasperReportControllerService, LookupsControllerService, NciReferralGrantsControllerService, PaylineCertificationsTEntityService, PaylineControllerService, PaylineStatusesTEntityService, PaylistControllerService, PaylistGrantsControllerService, PaylistUtilControllerService, PdControllerService, PropertiesControllerService, ReferralMessagesControllerService, ReferralMessagesTEntityService, ReferralSearchCriteriaControllerService, ReferralWorkflowControllerService, RoAssignmentControllerService, UserControllerService, WorkbenchControllerService];\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface AcceptReferralActionDto { \n    applId?: number;\n    assignTo?: number;\n    comment?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ActivationParamsHolder { \n    activate?: boolean;\n    actor?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface AddCaInterestActionDto { \n    applId?: number;\n    comment?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ApiServices { \n    createDate?: Date;\n    id?: number;\n    lastChangeDate?: Date;\n    serviceName?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface AppLookupT { \n    active?: string;\n    applicationName?: string;\n    code?: string;\n    createDate?: Date;\n    createUserId?: string;\n    description?: string;\n    discriminator?: string;\n    displayText?: string;\n    id?: number;\n    lastChangeDate?: Date;\n    lastChangeUserId?: string;\n    orderNum?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface AraReasonsDto { \n    araTypeCode?: string;\n    araTypeMappingName?: string;\n    code?: string;\n    codeDisplayname?: string;\n    createDate?: Date;\n    createUserId?: string;\n    description?: string;\n    handlingFlag?: string;\n    inactiveFlag?: string;\n    inactiveOnDate?: Date;\n    lastChangeDate?: Date;\n    lastChangeUserId?: string;\n    precedenceOrder?: number;\n    updateStamp?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface AssignRoActionDto { \n    applId?: number;\n    comment?: string;\n    npeId?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface BoardsDto { \n    createDate?: Date;\n    createUserId?: string;\n    lastChangeDate?: Date;\n    lastChangeUserId?: string;\n    meetingDate: Date;\n    meetingDescription?: string;\n    meetingEndDate?: Date;\n    meetingMonth: string;\n    meetingStartDate?: Date;\n    meetingYear: string;\n    updateStamp?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface CaAssignmentRulesDto { \n    activityCode?: string;\n    cayCode?: string;\n    createDate?: Date;\n    createUserId?: string;\n    endDate?: Date;\n    id?: number;\n    lastChangeDate?: Date;\n    lastChangeUserId?: string;\n    majorActivityCode?: string;\n    noticeNumber?: string;\n    updateStamp?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface CloseReferralActionDto { \n    applId?: number;\n    comment?: string;\n    reason?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface FindPaylistCriteriaDto { \n    bmmCode?: string;\n    cayCodes?: Array<string>;\n    ccrCode?: string;\n    councilMeetingDate?: string;\n    docAbbreviation?: string;\n    fy?: number;\n    grantIc?: string;\n    grantMech?: string;\n    grantSerial?: string;\n    grantSuffix?: string;\n    grantType?: string;\n    grantYear?: string;\n    paylistStatusCode?: string;\n    paylistType?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface GrantedAuthority { \n    authority?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface GwbLinksT { \n    activeFlag?: string;\n    createDate?: Date;\n    createUserId?: string;\n    displayName?: string;\n    displayOrderNum?: number;\n    id?: number;\n    lastChangeDate?: Date;\n    lastChangeUserId?: string;\n    linkPath?: string;\n    linkServer?: string;\n    linkType?: string;\n    name?: string;\n    protocol?: string;\n    updateStamp?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface I2ERoles { \n    docAbbrev?: string;\n    emailAddress?: string;\n    firstName?: string;\n    fullName?: string;\n    fullOrgPathAbbrev?: string;\n    fullOrgPathDescription?: string;\n    lastName?: string;\n    ldapRoleName?: string;\n    nciLdapCn?: string;\n    npeId?: number;\n    npnId?: number;\n    ogaBranchId?: number;\n    oracleId?: string;\n    orgAbbrev?: string;\n    orgId?: number;\n    roleCode?: string;\n    roleCreatedByFullName?: string;\n    roleCreatedDate?: Date;\n    roleName?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface LinkRelation { \n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface Links { \n    empty?: boolean;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { View } from './view';\n\n\nexport interface ModelAndView { \n    empty?: boolean;\n    model?: any;\n    modelMap?: { [key: string]: any; };\n    reference?: boolean;\n    status?: ModelAndView.StatusEnum;\n    view?: View;\n    viewName?: string;\n}\nexport namespace ModelAndView {\n    export type StatusEnum = 'ACCEPTED' | 'ALREADY_REPORTED' | 'BAD_GATEWAY' | 'BAD_REQUEST' | 'BANDWIDTH_LIMIT_EXCEEDED' | 'CHECKPOINT' | 'CONFLICT' | 'CONTINUE' | 'CREATED' | 'DESTINATION_LOCKED' | 'EXPECTATION_FAILED' | 'FAILED_DEPENDENCY' | 'FORBIDDEN' | 'FOUND' | 'GATEWAY_TIMEOUT' | 'GONE' | 'HTTP_VERSION_NOT_SUPPORTED' | 'IM_USED' | 'INSUFFICIENT_SPACE_ON_RESOURCE' | 'INSUFFICIENT_STORAGE' | 'INTERNAL_SERVER_ERROR' | 'I_AM_A_TEAPOT' | 'LENGTH_REQUIRED' | 'LOCKED' | 'LOOP_DETECTED' | 'METHOD_FAILURE' | 'METHOD_NOT_ALLOWED' | 'MOVED_PERMANENTLY' | 'MOVED_TEMPORARILY' | 'MULTIPLE_CHOICES' | 'MULTI_STATUS' | 'NETWORK_AUTHENTICATION_REQUIRED' | 'NON_AUTHORITATIVE_INFORMATION' | 'NOT_ACCEPTABLE' | 'NOT_EXTENDED' | 'NOT_FOUND' | 'NOT_IMPLEMENTED' | 'NOT_MODIFIED' | 'NO_CONTENT' | 'OK' | 'PARTIAL_CONTENT' | 'PAYLOAD_TOO_LARGE' | 'PAYMENT_REQUIRED' | 'PERMANENT_REDIRECT' | 'PRECONDITION_FAILED' | 'PRECONDITION_REQUIRED' | 'PROCESSING' | 'PROXY_AUTHENTICATION_REQUIRED' | 'REQUESTED_RANGE_NOT_SATISFIABLE' | 'REQUEST_ENTITY_TOO_LARGE' | 'REQUEST_HEADER_FIELDS_TOO_LARGE' | 'REQUEST_TIMEOUT' | 'REQUEST_URI_TOO_LONG' | 'RESET_CONTENT' | 'SEE_OTHER' | 'SERVICE_UNAVAILABLE' | 'SWITCHING_PROTOCOLS' | 'TEMPORARY_REDIRECT' | 'TOO_EARLY' | 'TOO_MANY_REQUESTS' | 'UNAUTHORIZED' | 'UNAVAILABLE_FOR_LEGAL_REASONS' | 'UNPROCESSABLE_ENTITY' | 'UNSUPPORTED_MEDIA_TYPE' | 'UPGRADE_REQUIRED' | 'URI_TOO_LONG' | 'USE_PROXY' | 'VARIANT_ALSO_NEGOTIATES';\n    export const StatusEnum = {\n        ACCEPTED: 'ACCEPTED' as StatusEnum,\n        ALREADYREPORTED: 'ALREADY_REPORTED' as StatusEnum,\n        BADGATEWAY: 'BAD_GATEWAY' as StatusEnum,\n        BADREQUEST: 'BAD_REQUEST' as StatusEnum,\n        BANDWIDTHLIMITEXCEEDED: 'BANDWIDTH_LIMIT_EXCEEDED' as StatusEnum,\n        CHECKPOINT: 'CHECKPOINT' as StatusEnum,\n        CONFLICT: 'CONFLICT' as StatusEnum,\n        CONTINUE: 'CONTINUE' as StatusEnum,\n        CREATED: 'CREATED' as StatusEnum,\n        DESTINATIONLOCKED: 'DESTINATION_LOCKED' as StatusEnum,\n        EXPECTATIONFAILED: 'EXPECTATION_FAILED' as StatusEnum,\n        FAILEDDEPENDENCY: 'FAILED_DEPENDENCY' as StatusEnum,\n        FORBIDDEN: 'FORBIDDEN' as StatusEnum,\n        FOUND: 'FOUND' as StatusEnum,\n        GATEWAYTIMEOUT: 'GATEWAY_TIMEOUT' as StatusEnum,\n        GONE: 'GONE' as StatusEnum,\n        HTTPVERSIONNOTSUPPORTED: 'HTTP_VERSION_NOT_SUPPORTED' as StatusEnum,\n        IMUSED: 'IM_USED' as StatusEnum,\n        INSUFFICIENTSPACEONRESOURCE: 'INSUFFICIENT_SPACE_ON_RESOURCE' as StatusEnum,\n        INSUFFICIENTSTORAGE: 'INSUFFICIENT_STORAGE' as StatusEnum,\n        INTERNALSERVERERROR: 'INTERNAL_SERVER_ERROR' as StatusEnum,\n        IAMATEAPOT: 'I_AM_A_TEAPOT' as StatusEnum,\n        LENGTHREQUIRED: 'LENGTH_REQUIRED' as StatusEnum,\n        LOCKED: 'LOCKED' as StatusEnum,\n        LOOPDETECTED: 'LOOP_DETECTED' as StatusEnum,\n        METHODFAILURE: 'METHOD_FAILURE' as StatusEnum,\n        METHODNOTALLOWED: 'METHOD_NOT_ALLOWED' as StatusEnum,\n        MOVEDPERMANENTLY: 'MOVED_PERMANENTLY' as StatusEnum,\n        MOVEDTEMPORARILY: 'MOVED_TEMPORARILY' as StatusEnum,\n        MULTIPLECHOICES: 'MULTIPLE_CHOICES' as StatusEnum,\n        MULTISTATUS: 'MULTI_STATUS' as StatusEnum,\n        NETWORKAUTHENTICATIONREQUIRED: 'NETWORK_AUTHENTICATION_REQUIRED' as StatusEnum,\n        NONAUTHORITATIVEINFORMATION: 'NON_AUTHORITATIVE_INFORMATION' as StatusEnum,\n        NOTACCEPTABLE: 'NOT_ACCEPTABLE' as StatusEnum,\n        NOTEXTENDED: 'NOT_EXTENDED' as StatusEnum,\n        NOTFOUND: 'NOT_FOUND' as StatusEnum,\n        NOTIMPLEMENTED: 'NOT_IMPLEMENTED' as StatusEnum,\n        NOTMODIFIED: 'NOT_MODIFIED' as StatusEnum,\n        NOCONTENT: 'NO_CONTENT' as StatusEnum,\n        OK: 'OK' as StatusEnum,\n        PARTIALCONTENT: 'PARTIAL_CONTENT' as StatusEnum,\n        PAYLOADTOOLARGE: 'PAYLOAD_TOO_LARGE' as StatusEnum,\n        PAYMENTREQUIRED: 'PAYMENT_REQUIRED' as StatusEnum,\n        PERMANENTREDIRECT: 'PERMANENT_REDIRECT' as StatusEnum,\n        PRECONDITIONFAILED: 'PRECONDITION_FAILED' as StatusEnum,\n        PRECONDITIONREQUIRED: 'PRECONDITION_REQUIRED' as StatusEnum,\n        PROCESSING: 'PROCESSING' as StatusEnum,\n        PROXYAUTHENTICATIONREQUIRED: 'PROXY_AUTHENTICATION_REQUIRED' as StatusEnum,\n        REQUESTEDRANGENOTSATISFIABLE: 'REQUESTED_RANGE_NOT_SATISFIABLE' as StatusEnum,\n        REQUESTENTITYTOOLARGE: 'REQUEST_ENTITY_TOO_LARGE' as StatusEnum,\n        REQUESTHEADERFIELDSTOOLARGE: 'REQUEST_HEADER_FIELDS_TOO_LARGE' as StatusEnum,\n        REQUESTTIMEOUT: 'REQUEST_TIMEOUT' as StatusEnum,\n        REQUESTURITOOLONG: 'REQUEST_URI_TOO_LONG' as StatusEnum,\n        RESETCONTENT: 'RESET_CONTENT' as StatusEnum,\n        SEEOTHER: 'SEE_OTHER' as StatusEnum,\n        SERVICEUNAVAILABLE: 'SERVICE_UNAVAILABLE' as StatusEnum,\n        SWITCHINGPROTOCOLS: 'SWITCHING_PROTOCOLS' as StatusEnum,\n        TEMPORARYREDIRECT: 'TEMPORARY_REDIRECT' as StatusEnum,\n        TOOEARLY: 'TOO_EARLY' as StatusEnum,\n        TOOMANYREQUESTS: 'TOO_MANY_REQUESTS' as StatusEnum,\n        UNAUTHORIZED: 'UNAUTHORIZED' as StatusEnum,\n        UNAVAILABLEFORLEGALREASONS: 'UNAVAILABLE_FOR_LEGAL_REASONS' as StatusEnum,\n        UNPROCESSABLEENTITY: 'UNPROCESSABLE_ENTITY' as StatusEnum,\n        UNSUPPORTEDMEDIATYPE: 'UNSUPPORTED_MEDIA_TYPE' as StatusEnum,\n        UPGRADEREQUIRED: 'UPGRADE_REQUIRED' as StatusEnum,\n        URITOOLONG: 'URI_TOO_LONG' as StatusEnum,\n        USEPROXY: 'USE_PROXY' as StatusEnum,\n        VARIANTALSONEGOTIATES: 'VARIANT_ALSO_NEGOTIATES' as StatusEnum\n    };\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface Parameter { \n    name?: string;\n    type?: string;\n    value?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface PaylinesDto { \n    comments?: string;\n    paylineCertificationId?: number;\n    roleCode?: string;\n    userId?: string;\n    userNpnId?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface PaylistGrantDto { \n    applId?: number;\n    comments?: string;\n    discrResolvedComments?: string;\n    discrResolvedFlag?: string;\n    esiApplEligFlag?: string;\n    paylistCertificationId?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface PaylistGrantsCriteriaDto { \n    activityCodes?: Array<string>;\n    cayCodes?: Array<string>;\n    councilMeetingDate?: string;\n    docAbbreviation?: string;\n    exceptionActivityCodes?: Array<string>;\n    excludePaylistIds?: Array<number>;\n    fy?: number;\n    nonId?: number;\n    primaryActivityCode?: string;\n    rfaPaNumber?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { PccDetails } from './pccDetails';\n\n\nexport interface Payload { \n    businessErrorCode?: string;\n    businessErrorMessage?: string;\n    pccDetails?: PccDetails;\n    responseBody?: string;\n    status?: Payload.StatusEnum;\n    statusCode?: number;\n}\nexport namespace Payload {\n    export type StatusEnum = 'ACCEPTED' | 'ALREADY_REPORTED' | 'BAD_GATEWAY' | 'BAD_REQUEST' | 'BANDWIDTH_LIMIT_EXCEEDED' | 'CHECKPOINT' | 'CONFLICT' | 'CONTINUE' | 'CREATED' | 'DESTINATION_LOCKED' | 'EXPECTATION_FAILED' | 'FAILED_DEPENDENCY' | 'FORBIDDEN' | 'FOUND' | 'GATEWAY_TIMEOUT' | 'GONE' | 'HTTP_VERSION_NOT_SUPPORTED' | 'IM_USED' | 'INSUFFICIENT_SPACE_ON_RESOURCE' | 'INSUFFICIENT_STORAGE' | 'INTERNAL_SERVER_ERROR' | 'I_AM_A_TEAPOT' | 'LENGTH_REQUIRED' | 'LOCKED' | 'LOOP_DETECTED' | 'METHOD_FAILURE' | 'METHOD_NOT_ALLOWED' | 'MOVED_PERMANENTLY' | 'MOVED_TEMPORARILY' | 'MULTIPLE_CHOICES' | 'MULTI_STATUS' | 'NETWORK_AUTHENTICATION_REQUIRED' | 'NON_AUTHORITATIVE_INFORMATION' | 'NOT_ACCEPTABLE' | 'NOT_EXTENDED' | 'NOT_FOUND' | 'NOT_IMPLEMENTED' | 'NOT_MODIFIED' | 'NO_CONTENT' | 'OK' | 'PARTIAL_CONTENT' | 'PAYLOAD_TOO_LARGE' | 'PAYMENT_REQUIRED' | 'PERMANENT_REDIRECT' | 'PRECONDITION_FAILED' | 'PRECONDITION_REQUIRED' | 'PROCESSING' | 'PROXY_AUTHENTICATION_REQUIRED' | 'REQUESTED_RANGE_NOT_SATISFIABLE' | 'REQUEST_ENTITY_TOO_LARGE' | 'REQUEST_HEADER_FIELDS_TOO_LARGE' | 'REQUEST_TIMEOUT' | 'REQUEST_URI_TOO_LONG' | 'RESET_CONTENT' | 'SEE_OTHER' | 'SERVICE_UNAVAILABLE' | 'SWITCHING_PROTOCOLS' | 'TEMPORARY_REDIRECT' | 'TOO_EARLY' | 'TOO_MANY_REQUESTS' | 'UNAUTHORIZED' | 'UNAVAILABLE_FOR_LEGAL_REASONS' | 'UNPROCESSABLE_ENTITY' | 'UNSUPPORTED_MEDIA_TYPE' | 'UPGRADE_REQUIRED' | 'URI_TOO_LONG' | 'USE_PROXY' | 'VARIANT_ALSO_NEGOTIATES';\n    export const StatusEnum = {\n        ACCEPTED: 'ACCEPTED' as StatusEnum,\n        ALREADYREPORTED: 'ALREADY_REPORTED' as StatusEnum,\n        BADGATEWAY: 'BAD_GATEWAY' as StatusEnum,\n        BADREQUEST: 'BAD_REQUEST' as StatusEnum,\n        BANDWIDTHLIMITEXCEEDED: 'BANDWIDTH_LIMIT_EXCEEDED' as StatusEnum,\n        CHECKPOINT: 'CHECKPOINT' as StatusEnum,\n        CONFLICT: 'CONFLICT' as StatusEnum,\n        CONTINUE: 'CONTINUE' as StatusEnum,\n        CREATED: 'CREATED' as StatusEnum,\n        DESTINATIONLOCKED: 'DESTINATION_LOCKED' as StatusEnum,\n        EXPECTATIONFAILED: 'EXPECTATION_FAILED' as StatusEnum,\n        FAILEDDEPENDENCY: 'FAILED_DEPENDENCY' as StatusEnum,\n        FORBIDDEN: 'FORBIDDEN' as StatusEnum,\n        FOUND: 'FOUND' as StatusEnum,\n        GATEWAYTIMEOUT: 'GATEWAY_TIMEOUT' as StatusEnum,\n        GONE: 'GONE' as StatusEnum,\n        HTTPVERSIONNOTSUPPORTED: 'HTTP_VERSION_NOT_SUPPORTED' as StatusEnum,\n        IMUSED: 'IM_USED' as StatusEnum,\n        INSUFFICIENTSPACEONRESOURCE: 'INSUFFICIENT_SPACE_ON_RESOURCE' as StatusEnum,\n        INSUFFICIENTSTORAGE: 'INSUFFICIENT_STORAGE' as StatusEnum,\n        INTERNALSERVERERROR: 'INTERNAL_SERVER_ERROR' as StatusEnum,\n        IAMATEAPOT: 'I_AM_A_TEAPOT' as StatusEnum,\n        LENGTHREQUIRED: 'LENGTH_REQUIRED' as StatusEnum,\n        LOCKED: 'LOCKED' as StatusEnum,\n        LOOPDETECTED: 'LOOP_DETECTED' as StatusEnum,\n        METHODFAILURE: 'METHOD_FAILURE' as StatusEnum,\n        METHODNOTALLOWED: 'METHOD_NOT_ALLOWED' as StatusEnum,\n        MOVEDPERMANENTLY: 'MOVED_PERMANENTLY' as StatusEnum,\n        MOVEDTEMPORARILY: 'MOVED_TEMPORARILY' as StatusEnum,\n        MULTIPLECHOICES: 'MULTIPLE_CHOICES' as StatusEnum,\n        MULTISTATUS: 'MULTI_STATUS' as StatusEnum,\n        NETWORKAUTHENTICATIONREQUIRED: 'NETWORK_AUTHENTICATION_REQUIRED' as StatusEnum,\n        NONAUTHORITATIVEINFORMATION: 'NON_AUTHORITATIVE_INFORMATION' as StatusEnum,\n        NOTACCEPTABLE: 'NOT_ACCEPTABLE' as StatusEnum,\n        NOTEXTENDED: 'NOT_EXTENDED' as StatusEnum,\n        NOTFOUND: 'NOT_FOUND' as StatusEnum,\n        NOTIMPLEMENTED: 'NOT_IMPLEMENTED' as StatusEnum,\n        NOTMODIFIED: 'NOT_MODIFIED' as StatusEnum,\n        NOCONTENT: 'NO_CONTENT' as StatusEnum,\n        OK: 'OK' as StatusEnum,\n        PARTIALCONTENT: 'PARTIAL_CONTENT' as StatusEnum,\n        PAYLOADTOOLARGE: 'PAYLOAD_TOO_LARGE' as StatusEnum,\n        PAYMENTREQUIRED: 'PAYMENT_REQUIRED' as StatusEnum,\n        PERMANENTREDIRECT: 'PERMANENT_REDIRECT' as StatusEnum,\n        PRECONDITIONFAILED: 'PRECONDITION_FAILED' as StatusEnum,\n        PRECONDITIONREQUIRED: 'PRECONDITION_REQUIRED' as StatusEnum,\n        PROCESSING: 'PROCESSING' as StatusEnum,\n        PROXYAUTHENTICATIONREQUIRED: 'PROXY_AUTHENTICATION_REQUIRED' as StatusEnum,\n        REQUESTEDRANGENOTSATISFIABLE: 'REQUESTED_RANGE_NOT_SATISFIABLE' as StatusEnum,\n        REQUESTENTITYTOOLARGE: 'REQUEST_ENTITY_TOO_LARGE' as StatusEnum,\n        REQUESTHEADERFIELDSTOOLARGE: 'REQUEST_HEADER_FIELDS_TOO_LARGE' as StatusEnum,\n        REQUESTTIMEOUT: 'REQUEST_TIMEOUT' as StatusEnum,\n        REQUESTURITOOLONG: 'REQUEST_URI_TOO_LONG' as StatusEnum,\n        RESETCONTENT: 'RESET_CONTENT' as StatusEnum,\n        SEEOTHER: 'SEE_OTHER' as StatusEnum,\n        SERVICEUNAVAILABLE: 'SERVICE_UNAVAILABLE' as StatusEnum,\n        SWITCHINGPROTOCOLS: 'SWITCHING_PROTOCOLS' as StatusEnum,\n        TEMPORARYREDIRECT: 'TEMPORARY_REDIRECT' as StatusEnum,\n        TOOEARLY: 'TOO_EARLY' as StatusEnum,\n        TOOMANYREQUESTS: 'TOO_MANY_REQUESTS' as StatusEnum,\n        UNAUTHORIZED: 'UNAUTHORIZED' as StatusEnum,\n        UNAVAILABLEFORLEGALREASONS: 'UNAVAILABLE_FOR_LEGAL_REASONS' as StatusEnum,\n        UNPROCESSABLEENTITY: 'UNPROCESSABLE_ENTITY' as StatusEnum,\n        UNSUPPORTEDMEDIATYPE: 'UNSUPPORTED_MEDIA_TYPE' as StatusEnum,\n        UPGRADEREQUIRED: 'UPGRADE_REQUIRED' as StatusEnum,\n        URITOOLONG: 'URI_TOO_LONG' as StatusEnum,\n        USEPROXY: 'USE_PROXY' as StatusEnum,\n        VARIANTALSONEGOTIATES: 'VARIANT_ALSO_NEGOTIATES' as StatusEnum\n    };\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface PccDetails { \n    applId?: string;\n    asgnVersionCode?: string;\n    icMainFlag?: string;\n    phsOrgCode?: string;\n    progClassCode?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface PdTransferActionDto { \n    applId?: number;\n    ca?: string;\n    comment?: string;\n    pdNpeId?: number;\n    pdNpnId?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ReferActionDto { \n    applId?: number;\n    cayCode?: string;\n    comment?: string;\n    dualCayCode?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ReferralMessagesReadT { \n    createDate?: Date;\n    createUserId?: string;\n    lastChangeDate?: Date;\n    lastChangeUserId?: string;\n    messageId?: number;\n    messageReadDate?: Date;\n    npnId?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ReferralMessagesReadTDto { \n    createDate?: Date;\n    createUserId?: string;\n    lastChangeDate?: Date;\n    lastChangeUserId?: string;\n    messageId?: number;\n    messageReadDate?: Date;\n    npnId?: number;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface RejectReferralActionDto { \n    applId?: number;\n    comment?: string;\n    reason?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ReleaseDualActionDto { \n    applId?: number;\n    comment?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ReleaseDualSpclCaseActionDto { \n    applId?: number;\n    cayCode?: string;\n    comment?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface RemoveCaInterestActionDto { \n    applId?: number;\n    comment?: string;\n    reason?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ReopenReferralActionDto { \n    applId?: number;\n    comment?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ResponseEntity { \n    body?: any;\n    statusCode?: ResponseEntity.StatusCodeEnum;\n    statusCodeValue?: number;\n}\nexport namespace ResponseEntity {\n    export type StatusCodeEnum = 'ACCEPTED' | 'ALREADY_REPORTED' | 'BAD_GATEWAY' | 'BAD_REQUEST' | 'BANDWIDTH_LIMIT_EXCEEDED' | 'CHECKPOINT' | 'CONFLICT' | 'CONTINUE' | 'CREATED' | 'DESTINATION_LOCKED' | 'EXPECTATION_FAILED' | 'FAILED_DEPENDENCY' | 'FORBIDDEN' | 'FOUND' | 'GATEWAY_TIMEOUT' | 'GONE' | 'HTTP_VERSION_NOT_SUPPORTED' | 'IM_USED' | 'INSUFFICIENT_SPACE_ON_RESOURCE' | 'INSUFFICIENT_STORAGE' | 'INTERNAL_SERVER_ERROR' | 'I_AM_A_TEAPOT' | 'LENGTH_REQUIRED' | 'LOCKED' | 'LOOP_DETECTED' | 'METHOD_FAILURE' | 'METHOD_NOT_ALLOWED' | 'MOVED_PERMANENTLY' | 'MOVED_TEMPORARILY' | 'MULTIPLE_CHOICES' | 'MULTI_STATUS' | 'NETWORK_AUTHENTICATION_REQUIRED' | 'NON_AUTHORITATIVE_INFORMATION' | 'NOT_ACCEPTABLE' | 'NOT_EXTENDED' | 'NOT_FOUND' | 'NOT_IMPLEMENTED' | 'NOT_MODIFIED' | 'NO_CONTENT' | 'OK' | 'PARTIAL_CONTENT' | 'PAYLOAD_TOO_LARGE' | 'PAYMENT_REQUIRED' | 'PERMANENT_REDIRECT' | 'PRECONDITION_FAILED' | 'PRECONDITION_REQUIRED' | 'PROCESSING' | 'PROXY_AUTHENTICATION_REQUIRED' | 'REQUESTED_RANGE_NOT_SATISFIABLE' | 'REQUEST_ENTITY_TOO_LARGE' | 'REQUEST_HEADER_FIELDS_TOO_LARGE' | 'REQUEST_TIMEOUT' | 'REQUEST_URI_TOO_LONG' | 'RESET_CONTENT' | 'SEE_OTHER' | 'SERVICE_UNAVAILABLE' | 'SWITCHING_PROTOCOLS' | 'TEMPORARY_REDIRECT' | 'TOO_EARLY' | 'TOO_MANY_REQUESTS' | 'UNAUTHORIZED' | 'UNAVAILABLE_FOR_LEGAL_REASONS' | 'UNPROCESSABLE_ENTITY' | 'UNSUPPORTED_MEDIA_TYPE' | 'UPGRADE_REQUIRED' | 'URI_TOO_LONG' | 'USE_PROXY' | 'VARIANT_ALSO_NEGOTIATES';\n    export const StatusCodeEnum = {\n        ACCEPTED: 'ACCEPTED' as StatusCodeEnum,\n        ALREADYREPORTED: 'ALREADY_REPORTED' as StatusCodeEnum,\n        BADGATEWAY: 'BAD_GATEWAY' as StatusCodeEnum,\n        BADREQUEST: 'BAD_REQUEST' as StatusCodeEnum,\n        BANDWIDTHLIMITEXCEEDED: 'BANDWIDTH_LIMIT_EXCEEDED' as StatusCodeEnum,\n        CHECKPOINT: 'CHECKPOINT' as StatusCodeEnum,\n        CONFLICT: 'CONFLICT' as StatusCodeEnum,\n        CONTINUE: 'CONTINUE' as StatusCodeEnum,\n        CREATED: 'CREATED' as StatusCodeEnum,\n        DESTINATIONLOCKED: 'DESTINATION_LOCKED' as StatusCodeEnum,\n        EXPECTATIONFAILED: 'EXPECTATION_FAILED' as StatusCodeEnum,\n        FAILEDDEPENDENCY: 'FAILED_DEPENDENCY' as StatusCodeEnum,\n        FORBIDDEN: 'FORBIDDEN' as StatusCodeEnum,\n        FOUND: 'FOUND' as StatusCodeEnum,\n        GATEWAYTIMEOUT: 'GATEWAY_TIMEOUT' as StatusCodeEnum,\n        GONE: 'GONE' as StatusCodeEnum,\n        HTTPVERSIONNOTSUPPORTED: 'HTTP_VERSION_NOT_SUPPORTED' as StatusCodeEnum,\n        IMUSED: 'IM_USED' as StatusCodeEnum,\n        INSUFFICIENTSPACEONRESOURCE: 'INSUFFICIENT_SPACE_ON_RESOURCE' as StatusCodeEnum,\n        INSUFFICIENTSTORAGE: 'INSUFFICIENT_STORAGE' as StatusCodeEnum,\n        INTERNALSERVERERROR: 'INTERNAL_SERVER_ERROR' as StatusCodeEnum,\n        IAMATEAPOT: 'I_AM_A_TEAPOT' as StatusCodeEnum,\n        LENGTHREQUIRED: 'LENGTH_REQUIRED' as StatusCodeEnum,\n        LOCKED: 'LOCKED' as StatusCodeEnum,\n        LOOPDETECTED: 'LOOP_DETECTED' as StatusCodeEnum,\n        METHODFAILURE: 'METHOD_FAILURE' as StatusCodeEnum,\n        METHODNOTALLOWED: 'METHOD_NOT_ALLOWED' as StatusCodeEnum,\n        MOVEDPERMANENTLY: 'MOVED_PERMANENTLY' as StatusCodeEnum,\n        MOVEDTEMPORARILY: 'MOVED_TEMPORARILY' as StatusCodeEnum,\n        MULTIPLECHOICES: 'MULTIPLE_CHOICES' as StatusCodeEnum,\n        MULTISTATUS: 'MULTI_STATUS' as StatusCodeEnum,\n        NETWORKAUTHENTICATIONREQUIRED: 'NETWORK_AUTHENTICATION_REQUIRED' as StatusCodeEnum,\n        NONAUTHORITATIVEINFORMATION: 'NON_AUTHORITATIVE_INFORMATION' as StatusCodeEnum,\n        NOTACCEPTABLE: 'NOT_ACCEPTABLE' as StatusCodeEnum,\n        NOTEXTENDED: 'NOT_EXTENDED' as StatusCodeEnum,\n        NOTFOUND: 'NOT_FOUND' as StatusCodeEnum,\n        NOTIMPLEMENTED: 'NOT_IMPLEMENTED' as StatusCodeEnum,\n        NOTMODIFIED: 'NOT_MODIFIED' as StatusCodeEnum,\n        NOCONTENT: 'NO_CONTENT' as StatusCodeEnum,\n        OK: 'OK' as StatusCodeEnum,\n        PARTIALCONTENT: 'PARTIAL_CONTENT' as StatusCodeEnum,\n        PAYLOADTOOLARGE: 'PAYLOAD_TOO_LARGE' as StatusCodeEnum,\n        PAYMENTREQUIRED: 'PAYMENT_REQUIRED' as StatusCodeEnum,\n        PERMANENTREDIRECT: 'PERMANENT_REDIRECT' as StatusCodeEnum,\n        PRECONDITIONFAILED: 'PRECONDITION_FAILED' as StatusCodeEnum,\n        PRECONDITIONREQUIRED: 'PRECONDITION_REQUIRED' as StatusCodeEnum,\n        PROCESSING: 'PROCESSING' as StatusCodeEnum,\n        PROXYAUTHENTICATIONREQUIRED: 'PROXY_AUTHENTICATION_REQUIRED' as StatusCodeEnum,\n        REQUESTEDRANGENOTSATISFIABLE: 'REQUESTED_RANGE_NOT_SATISFIABLE' as StatusCodeEnum,\n        REQUESTENTITYTOOLARGE: 'REQUEST_ENTITY_TOO_LARGE' as StatusCodeEnum,\n        REQUESTHEADERFIELDSTOOLARGE: 'REQUEST_HEADER_FIELDS_TOO_LARGE' as StatusCodeEnum,\n        REQUESTTIMEOUT: 'REQUEST_TIMEOUT' as StatusCodeEnum,\n        REQUESTURITOOLONG: 'REQUEST_URI_TOO_LONG' as StatusCodeEnum,\n        RESETCONTENT: 'RESET_CONTENT' as StatusCodeEnum,\n        SEEOTHER: 'SEE_OTHER' as StatusCodeEnum,\n        SERVICEUNAVAILABLE: 'SERVICE_UNAVAILABLE' as StatusCodeEnum,\n        SWITCHINGPROTOCOLS: 'SWITCHING_PROTOCOLS' as StatusCodeEnum,\n        TEMPORARYREDIRECT: 'TEMPORARY_REDIRECT' as StatusCodeEnum,\n        TOOEARLY: 'TOO_EARLY' as StatusCodeEnum,\n        TOOMANYREQUESTS: 'TOO_MANY_REQUESTS' as StatusCodeEnum,\n        UNAUTHORIZED: 'UNAUTHORIZED' as StatusCodeEnum,\n        UNAVAILABLEFORLEGALREASONS: 'UNAVAILABLE_FOR_LEGAL_REASONS' as StatusCodeEnum,\n        UNPROCESSABLEENTITY: 'UNPROCESSABLE_ENTITY' as StatusCodeEnum,\n        UNSUPPORTEDMEDIATYPE: 'UNSUPPORTED_MEDIA_TYPE' as StatusCodeEnum,\n        UPGRADEREQUIRED: 'UPGRADE_REQUIRED' as StatusCodeEnum,\n        URITOOLONG: 'URI_TOO_LONG' as StatusCodeEnum,\n        USEPROXY: 'USE_PROXY' as StatusCodeEnum,\n        VARIANTALSONEGOTIATES: 'VARIANT_ALSO_NEGOTIATES' as StatusCodeEnum\n    };\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface TemplateVariable { \n    description?: string;\n    name?: string;\n    type?: TemplateVariable.TypeEnum;\n}\nexport namespace TemplateVariable {\n    export type TypeEnum = 'COMPOSITE_PARAM' | 'FRAGMENT' | 'PATH_VARIABLE' | 'REQUEST_PARAM' | 'REQUEST_PARAM_CONTINUED' | 'SEGMENT';\n    export const TypeEnum = {\n        COMPOSITEPARAM: 'COMPOSITE_PARAM' as TypeEnum,\n        FRAGMENT: 'FRAGMENT' as TypeEnum,\n        PATHVARIABLE: 'PATH_VARIABLE' as TypeEnum,\n        REQUESTPARAM: 'REQUEST_PARAM' as TypeEnum,\n        REQUESTPARAMCONTINUED: 'REQUEST_PARAM_CONTINUED' as TypeEnum,\n        SEGMENT: 'SEGMENT' as TypeEnum\n    };\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface TransferActionDto { \n    applId?: number;\n    caTransferto?: string;\n    comment?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface UnreferReferralActionDto { \n    applId?: number;\n    comment?: string;\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface View { \n    contentType?: string;\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { ActivitiesCodeControllerService } from './api/activitiesCodeController.service';\nimport { ApiQueueEntityService } from './api/apiQueueEntity.service';\nimport { AppNavigationTControllerService } from './api/appNavigationTController.service';\nimport { AppNavigationTEntityService } from './api/appNavigationTEntity.service';\nimport { AraControllerService } from './api/araController.service';\nimport { AraReasonsControllerService } from './api/araReasonsController.service';\nimport { BoardsControllerService } from './api/boardsController.service';\nimport { CancerActivityControllerService } from './api/cancerActivityController.service';\nimport { CancerActivityRolesControllerService } from './api/cancerActivityRolesController.service';\nimport { CgRefCodControllerService } from './api/cgRefCodController.service';\nimport { EmControllerService } from './api/emController.service';\nimport { ExportControllerService } from './api/exportController.service';\nimport { GwbLinksControllerService } from './api/gwbLinksController.service';\nimport { I2eUserActiveRolesControllerService } from './api/i2eUserActiveRolesController.service';\nimport { IcDataControllerService } from './api/icDataController.service';\nimport { JasperReportControllerService } from './api/jasperReportController.service';\nimport { LookupsControllerService } from './api/lookupsController.service';\nimport { NciReferralGrantsControllerService } from './api/nciReferralGrantsController.service';\nimport { PaylineCertificationsTEntityService } from './api/paylineCertificationsTEntity.service';\nimport { PaylineControllerService } from './api/paylineController.service';\nimport { PaylineStatusesTEntityService } from './api/paylineStatusesTEntity.service';\nimport { PaylistControllerService } from './api/paylistController.service';\nimport { PaylistGrantsControllerService } from './api/paylistGrantsController.service';\nimport { PaylistUtilControllerService } from './api/paylistUtilController.service';\nimport { PdControllerService } from './api/pdController.service';\nimport { PropertiesControllerService } from './api/propertiesController.service';\nimport { ReferralMessagesControllerService } from './api/referralMessagesController.service';\nimport { ReferralMessagesTEntityService } from './api/referralMessagesTEntity.service';\nimport { ReferralSearchCriteriaControllerService } from './api/referralSearchCriteriaController.service';\nimport { ReferralWorkflowControllerService } from './api/referralWorkflowController.service';\nimport { RoAssignmentControllerService } from './api/roAssignmentController.service';\nimport { UserControllerService } from './api/userController.service';\nimport { WorkbenchControllerService } from './api/workbenchController.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    ActivitiesCodeControllerService,\n    ApiQueueEntityService,\n    AppNavigationTControllerService,\n    AppNavigationTEntityService,\n    AraControllerService,\n    AraReasonsControllerService,\n    BoardsControllerService,\n    CancerActivityControllerService,\n    CancerActivityRolesControllerService,\n    CgRefCodControllerService,\n    EmControllerService,\n    ExportControllerService,\n    GwbLinksControllerService,\n    I2eUserActiveRolesControllerService,\n    IcDataControllerService,\n    JasperReportControllerService,\n    LookupsControllerService,\n    NciReferralGrantsControllerService,\n    PaylineCertificationsTEntityService,\n    PaylineControllerService,\n    PaylineStatusesTEntityService,\n    PaylistControllerService,\n    PaylistGrantsControllerService,\n    PaylistUtilControllerService,\n    PdControllerService,\n    PropertiesControllerService,\n    ReferralMessagesControllerService,\n    ReferralMessagesTEntityService,\n    ReferralSearchCriteriaControllerService,\n    ReferralWorkflowControllerService,\n    RoAssignmentControllerService,\n    UserControllerService,\n    WorkbenchControllerService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}