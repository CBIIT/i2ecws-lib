{"version":3,"file":"i2ecws-lib.umd.js","sources":["../../node_modules/tslib/tslib.es6.js","../../variables.ts","../../configuration.ts","../../api/activitiesCodeController.service.ts","../../api/apiQueueEntity.service.ts","../../encoder.ts","../../api/appNavigationTController.service.ts","../../api/appNavigationTEntity.service.ts","../../api/araController.service.ts","../../api/araReasonsController.service.ts","../../api/boardsController.service.ts","../../api/cancerActivityController.service.ts","../../api/cancerActivityRolesController.service.ts","../../api/cgRefCodController.service.ts","../../api/emController.service.ts","../../api/exportController.service.ts","../../api/gwbLinksController.service.ts","../../api/i2eUserActiveRolesController.service.ts","../../api/icDataController.service.ts","../../api/jasperReportController.service.ts","../../api/lookupsController.service.ts","../../api/nciReferralGrantsController.service.ts","../../api/paylineCertificationsTEntity.service.ts","../../api/paylineController.service.ts","../../api/paylineStatusesTEntity.service.ts","../../api/paylistController.service.ts","../../api/paylistGrantsController.service.ts","../../api/paylistUtilController.service.ts","../../api/pdController.service.ts","../../api/propertiesController.service.ts","../../api/referralMessagesController.service.ts","../../api/referralMessagesTEntity.service.ts","../../api/referralSearchCriteriaController.service.ts","../../api/referralWorkflowController.service.ts","../../api/roAssignmentController.service.ts","../../api/userController.service.ts","../../api/workbenchController.service.ts","../../api/api.ts","../../model/modelAndView.ts","../../model/payload.ts","../../model/responseEntity.ts","../../model/templateVariable.ts","../../api.module.ts","../../i2ecws-lib.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ActivitiesCodeControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getActivitiesCodes\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getActivitiesCodesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getActivitiesCodesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getActivitiesCodesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getActivitiesCodesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/activities-code/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EntityModelApiServices } from '../model/entityModelApiServices';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ApiQueueEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiQueueApiServicesUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiQueueApiServicesUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiQueueApiServicesUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelApiServices>;\n    public apiQueueApiServicesUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EntityModelApiServices>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingPATCH(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelApiServices>;\n    public apiQueueApiServicesUsingPATCH(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPATCH(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPATCH(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling apiQueueApiServicesUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<EntityModelApiServices>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingPOST(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelApiServices>;\n    public apiQueueApiServicesUsingPOST(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPOST(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPOST(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling apiQueueApiServicesUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<EntityModelApiServices>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * apiQueueApiServices\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiQueueApiServicesUsingPUT(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelApiServices>;\n    public apiQueueApiServicesUsingPUT(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPUT(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelApiServices>>;\n    public apiQueueApiServicesUsingPUT(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling apiQueueApiServicesUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiQueueApiServicesUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<EntityModelApiServices>(`${this.basePath}/apiQueues/${encodeURIComponent(String(id))}/apiServices`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AppNavigationTControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getNavLinks\n     * \n     * @param roles roles\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNavLinksUsingGET(roles: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNavLinksUsingGET(roles: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNavLinksUsingGET(roles: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNavLinksUsingGET(roles: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (roles === null || roles === undefined) {\n            throw new Error('Required parameter roles was null or undefined when calling getNavLinksUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (roles) {\n            roles.forEach((element) => {\n                queryParameters = queryParameters.append('roles', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/nav-links/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EntityModelGwbLinksT } from '../model/entityModelGwbLinksT';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AppNavigationTEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public appNavigationTGwbLinksTUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public appNavigationTGwbLinksTUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public appNavigationTGwbLinksTUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelGwbLinksT>;\n    public appNavigationTGwbLinksTUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EntityModelGwbLinksT>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingPATCH(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelGwbLinksT>;\n    public appNavigationTGwbLinksTUsingPATCH(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPATCH(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPATCH(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling appNavigationTGwbLinksTUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<EntityModelGwbLinksT>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingPOST(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelGwbLinksT>;\n    public appNavigationTGwbLinksTUsingPOST(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPOST(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPOST(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling appNavigationTGwbLinksTUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<EntityModelGwbLinksT>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * appNavigationTGwbLinksT\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appNavigationTGwbLinksTUsingPUT(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelGwbLinksT>;\n    public appNavigationTGwbLinksTUsingPUT(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPUT(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelGwbLinksT>>;\n    public appNavigationTGwbLinksTUsingPUT(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling appNavigationTGwbLinksTUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling appNavigationTGwbLinksTUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<EntityModelGwbLinksT>(`${this.basePath}/appNavigationTs/${encodeURIComponent(String(id))}/gwbLinksT`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AraControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getUnmatchedAras\n     * \n     * @param ncab ncab\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUnmatchedArasUsingGET(ncab: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUnmatchedArasUsingGET(ncab: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUnmatchedArasUsingGET(ncab: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUnmatchedArasUsingGET(ncab: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (ncab === null || ncab === undefined) {\n            throw new Error('Required parameter ncab was null or undefined when calling getUnmatchedArasUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-match/${encodeURIComponent(String(ncab))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ActivationParamsHolder } from '../model/activationParamsHolder';\nimport { AraReasonsDto } from '../model/araReasonsDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AraReasonsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Activate or deactivate the specified ARA Reason\n     * \n     * @param id id\n     * @param paramsHolder paramsHolder\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling activateOrDeactivateAraReasonUsingPATCH.');\n        }\n\n        if (paramsHolder === null || paramsHolder === undefined) {\n            throw new Error('Required parameter paramsHolder was null or undefined when calling activateOrDeactivateAraReasonUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<any>(`${this.basePath}/api/v1/ara-reasons/${encodeURIComponent(String(id))}`,\n            paramsHolder,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAraReasonsHistory\n     * \n     * @param code code\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraReasonsHistoryUsingGET(code: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraReasonsHistoryUsingGET(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraReasonsHistoryUsingGET(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraReasonsHistoryUsingGET(code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (code === null || code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getAraReasonsHistoryUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons-history/${encodeURIComponent(String(code))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAraReasonsPrecedences\n     * \n     * @param available available\n     * @param include include\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (available !== undefined && available !== null) {\n            queryParameters = queryParameters.set('available', <any>available);\n        }\n        if (include !== undefined && include !== null) {\n            queryParameters = queryParameters.set('include', <any>include);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons-precedences`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAraReasons\n     * \n     * @param activeFlag activeFlag\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAraReasons\n     * \n     * @param code code\n     * @param activeFlag activeFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (code === null || code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getAraReasonsUsingGET1.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-reasons/${encodeURIComponent(String(code))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getEraAraReasons\n     * \n     * @param activeFlag activeFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getEraAraReasonsUsingGET(activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/era-ara-reasons`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getEraAraReasons\n     * \n     * @param code code\n     * @param activeFlag activeFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (code === null || code === undefined) {\n            throw new Error('Required parameter code was null or undefined when calling getEraAraReasonsUsingGET1.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/era-ara-reasons/${encodeURIComponent(String(code))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveAraReason\n     * \n     * @param araReasonsDto araReasonsDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (araReasonsDto === null || araReasonsDto === undefined) {\n            throw new Error('Required parameter araReasonsDto was null or undefined when calling saveAraReasonUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/ara-reasons`,\n            araReasonsDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * updateAraReason\n     * \n     * @param araReasonsDto araReasonsDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (araReasonsDto === null || araReasonsDto === undefined) {\n            throw new Error('Required parameter araReasonsDto was null or undefined when calling updateAraReasonUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/ara-reasons`,\n            araReasonsDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { BoardsDto } from '../model/boardsDto';\nimport { ResponseEntity } from '../model/responseEntity';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class BoardsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * findBoardByDate\n     * \n     * @param month month\n     * @param year year\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findBoardByDateUsingGET(month: string, year: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findBoardByDateUsingGET(month: string, year: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findBoardByDateUsingGET(month: string, year: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findBoardByDateUsingGET(month: string, year: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (month === null || month === undefined) {\n            throw new Error('Required parameter month was null or undefined when calling findBoardByDateUsingGET.');\n        }\n\n        if (year === null || year === undefined) {\n            throw new Error('Required parameter year was null or undefined when calling findBoardByDateUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/boards/${encodeURIComponent(String(year))}/${encodeURIComponent(String(month))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getBoards\n     * \n     * @param meetingDate meetingDate\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (meetingDate !== undefined && meetingDate !== null) {\n            queryParameters = queryParameters.set('meetingDate', <any>meetingDate);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/boards`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getBodDatesList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBodDatesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getBodDatesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getBodDatesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getBodDatesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ncabs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCurrentWorkingBoard\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCurrentWorkingBoardUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getCurrentWorkingBoardUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getCurrentWorkingBoardUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getCurrentWorkingBoardUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/api/v1/boards/current-working-board`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getDefaultNcabDate\n     * \n     * @param date date\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDefaultNcabDateUsingGET(date?: Date, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public getDefaultNcabDateUsingGET(date?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public getDefaultNcabDateUsingGET(date?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public getDefaultNcabDateUsingGET(date?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (date !== undefined && date !== null) {\n            queryParameters = queryParameters.set('date', <any>date.toISOString());\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/api/v1/boards/default-ncab-date`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveBoard\n     * \n     * @param boardsDto boardsDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveBoardUsingPOST(boardsDto: BoardsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (boardsDto === null || boardsDto === undefined) {\n            throw new Error('Required parameter boardsDto was null or undefined when calling saveBoardUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/boards`,\n            boardsDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * updateBoard\n     * \n     * @param boardsDto boardsDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public updateBoardUsingPUT(boardsDto: BoardsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (boardsDto === null || boardsDto === undefined) {\n            throw new Error('Required parameter boardsDto was null or undefined when calling updateBoardUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/boards`,\n            boardsDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * updateMeetingDate\n     * \n     * @param meetingDate meetingDate\n     * @param month month\n     * @param year year\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;\n    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;\n    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;\n    public updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (meetingDate === null || meetingDate === undefined) {\n            throw new Error('Required parameter meetingDate was null or undefined when calling updateMeetingDateUsingPATCH.');\n        }\n\n        if (month === null || month === undefined) {\n            throw new Error('Required parameter month was null or undefined when calling updateMeetingDateUsingPATCH.');\n        }\n\n        if (year === null || year === undefined) {\n            throw new Error('Required parameter year was null or undefined when calling updateMeetingDateUsingPATCH.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (meetingDate !== undefined && meetingDate !== null) {\n            queryParameters = queryParameters.set('meetingDate', <any>meetingDate);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<ResponseEntity>(`${this.basePath}/api/v1/boards/${encodeURIComponent(String(year))}/${encodeURIComponent(String(month))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CaAssignmentRulesDto } from '../model/caAssignmentRulesDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CancerActivityControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * deactivateCa\n     * \n     * @param caCode caCode\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deactivateCaUsingPATCH(caCode: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (caCode === null || caCode === undefined) {\n            throw new Error('Required parameter caCode was null or undefined when calling deactivateCaUsingPATCH.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling deactivateCaUsingPATCH.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (caCode !== undefined && caCode !== null) {\n            queryParameters = queryParameters.set('caCode', <any>caCode);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<any>(`${this.basePath}/api/v1/cas/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getActiveReferralCaAssignRules\n     * \n     * @param active active\n     * @param ignore ignore\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (active === null || active === undefined) {\n            throw new Error('Required parameter active was null or undefined when calling getActiveReferralCaAssignRulesUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (ignore !== undefined && ignore !== null) {\n            queryParameters = queryParameters.set('ignore', <any>ignore);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-ca-assign-rules/${encodeURIComponent(String(active))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getAllActiveCaList\n     * \n     * @param activeFlag activeFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAllActiveCaListUsingGET(activeFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaAssignmentRulesHistory\n     * \n     * @param caCode caCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCaAssignmentRulesHistoryUsingGET(caCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (caCode === null || caCode === undefined) {\n            throw new Error('Required parameter caCode was null or undefined when calling getCaAssignmentRulesHistoryUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ca-assignment-rules-history/${encodeURIComponent(String(caCode))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaByPDActiveGrantPortfolio\n     * \n     * @param npeId npeId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling getCaByPDActiveGrantPortfolioUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/get-cas-by-pd-active-grant-portfolio/${encodeURIComponent(String(npeId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaListBasedOnMechCode\n     * \n     * @param mechCode mechCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CaAssignmentRulesDto>>;\n    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaAssignmentRulesDto>>>;\n    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaAssignmentRulesDto>>>;\n    public getCaListBasedOnMechCodeUsingGET(mechCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (mechCode === null || mechCode === undefined) {\n            throw new Error('Required parameter mechCode was null or undefined when calling getCaListBasedOnMechCodeUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (mechCode !== undefined && mechCode !== null) {\n            queryParameters = queryParameters.set('mechCode', <any>mechCode);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<CaAssignmentRulesDto>>(`${this.basePath}/api/v1/cas-mech-codes/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaListBasedOnRfa\n     * \n     * @param rfaPa rfaPa\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CaAssignmentRulesDto>>;\n    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaAssignmentRulesDto>>>;\n    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaAssignmentRulesDto>>>;\n    public getCaListBasedOnRfaUsingGET(rfaPa: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (rfaPa === null || rfaPa === undefined) {\n            throw new Error('Required parameter rfaPa was null or undefined when calling getCaListBasedOnRfaUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (rfaPa !== undefined && rfaPa !== null) {\n            queryParameters = queryParameters.set('rfaPa', <any>rfaPa);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<CaAssignmentRulesDto>>(`${this.basePath}/api/v1/cas-rfa/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCaXferPortfolio\n     * \n     * @param pdId pdId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCaXferPortfolioUsingGET(pdId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCaXferPortfolioUsingGET(pdId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCaXferPortfolioUsingGET(pdId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCaXferPortfolioUsingGET(pdId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (pdId === null || pdId === undefined) {\n            throw new Error('Required parameter pdId was null or undefined when calling getCaXferPortfolioUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas-xfer/${encodeURIComponent(String(pdId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCancerActivityPocs\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCancerActivityPocsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCancerActivityPocsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCancerActivityPocsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCancerActivityPocsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas/pocs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCasForPd\n     * \n     * @param pdId pdId\n     * @param monitorFlag monitorFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (pdId === null || pdId === undefined) {\n            throw new Error('Required parameter pdId was null or undefined when calling getCasForPdUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (monitorFlag !== undefined && monitorFlag !== null) {\n            queryParameters = queryParameters.set('monitorFlag', <any>monitorFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas/${encodeURIComponent(String(pdId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCasForPortfolio\n     * \n     * @param npeId npeId\n     * @param monitorFlag monitorFlag\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling getCasForPortfolioUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (monitorFlag !== undefined && monitorFlag !== null) {\n            queryParameters = queryParameters.set('monitorFlag', <any>monitorFlag);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cas-portfolio/${encodeURIComponent(String(npeId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getNciOrgList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNciOrgListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNciOrgListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNciOrgListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNciOrgListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/nci-org-list/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPersonDetails\n     * \n     * @param orgId orgId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPersonDetailsUsingGET(orgId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPersonDetailsUsingGET(orgId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPersonDetailsUsingGET(orgId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPersonDetailsUsingGET(orgId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (orgId === null || orgId === undefined) {\n            throw new Error('Required parameter orgId was null or undefined when calling getPersonDetailsUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/i2e-person-details/${encodeURIComponent(String(orgId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralActivityCodesList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralActivityCodesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralActivityCodesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralActivityCodesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralActivityCodesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-activity-codes/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getRfaPaNoticeByNoticeNumber\n     * \n     * @param noticeNumber noticeNumber\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (noticeNumber === null || noticeNumber === undefined) {\n            throw new Error('Required parameter noticeNumber was null or undefined when calling getRfaPaNoticeByNoticeNumberUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/rfa-pa-notices/${encodeURIComponent(String(noticeNumber))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getRfaPaNoticesList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRfaPaNoticesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getRfaPaNoticesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getRfaPaNoticesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getRfaPaNoticesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/rfa-pa-notices/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveCancerActivity\n     * \n     * @param addNew addNew\n     * @param caCode caCode\n     * @param caDesc caDesc\n     * @param caOfcDiv caOfcDiv\n     * @param caPoc caPoc\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (addNew === null || addNew === undefined) {\n            throw new Error('Required parameter addNew was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (caCode === null || caCode === undefined) {\n            throw new Error('Required parameter caCode was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (caDesc === null || caDesc === undefined) {\n            throw new Error('Required parameter caDesc was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (caOfcDiv === null || caOfcDiv === undefined) {\n            throw new Error('Required parameter caOfcDiv was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (caPoc === null || caPoc === undefined) {\n            throw new Error('Required parameter caPoc was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling saveCancerActivityUsingPUT.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (addNew !== undefined && addNew !== null) {\n            queryParameters = queryParameters.set('addNew', <any>addNew);\n        }\n        if (caCode !== undefined && caCode !== null) {\n            queryParameters = queryParameters.set('caCode', <any>caCode);\n        }\n        if (caDesc !== undefined && caDesc !== null) {\n            queryParameters = queryParameters.set('caDesc', <any>caDesc);\n        }\n        if (caOfcDiv !== undefined && caOfcDiv !== null) {\n            queryParameters = queryParameters.set('caOfcDiv', <any>caOfcDiv);\n        }\n        if (caPoc !== undefined && caPoc !== null) {\n            queryParameters = queryParameters.set('caPoc', <any>caPoc);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/cas/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveMechCaAssignment\n     * \n     * @param mechCode mechCode\n     * @param userId userId\n     * @param assignedCas assignedCas[]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (mechCode === null || mechCode === undefined) {\n            throw new Error('Required parameter mechCode was null or undefined when calling saveMechCaAssignmentUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling saveMechCaAssignmentUsingPOST.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (assignedCas) {\n            assignedCas.forEach((element) => {\n                queryParameters = queryParameters.append('assignedCas[]', <any>element);\n            })\n        }\n        if (mechCode !== undefined && mechCode !== null) {\n            queryParameters = queryParameters.set('mechCode', <any>mechCode);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/mech-ca-assignment/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveRfaPaAssignment\n     * \n     * @param rfaPa rfaPa\n     * @param userId userId\n     * @param assignedCas assignedCas[]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (rfaPa === null || rfaPa === undefined) {\n            throw new Error('Required parameter rfaPa was null or undefined when calling saveRfaPaAssignmentUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling saveRfaPaAssignmentUsingPOST.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (assignedCas) {\n            assignedCas.forEach((element) => {\n                queryParameters = queryParameters.append('assignedCas[]', <any>element);\n            })\n        }\n        if (rfaPa !== undefined && rfaPa !== null) {\n            queryParameters = queryParameters.set('rfaPa', <any>rfaPa);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/rfa-pa-assignment/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CancerActivityRolesControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * gatAllCancerActivityRoles\n     * \n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public gatAllCancerActivityRolesUsingGET(orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public gatAllCancerActivityRolesUsingGET(orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public gatAllCancerActivityRolesUsingGET(orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public gatAllCancerActivityRolesUsingGET(orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cancer-activity-roles/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCancerActivityRolesByNpeId\n     * \n     * @param npeId npeId\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCancerActivityRolesByNpeIdUsingGET(npeId: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCancerActivityRolesByNpeIdUsingGET(npeId: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCancerActivityRolesByNpeIdUsingGET(npeId: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCancerActivityRolesByNpeIdUsingGET(npeId: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling getCancerActivityRolesByNpeIdUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/cancer-activity-roles/${encodeURIComponent(String(npeId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CgRefCodControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getRemoveCaInterestReasons\n     * \n     * @param domain domain\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRemoveCaInterestReasonsUsingGET(domain: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getRemoveCaInterestReasonsUsingGET(domain: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getRemoveCaInterestReasonsUsingGET(domain: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getRemoveCaInterestReasonsUsingGET(domain: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (domain === null || domain === undefined) {\n            throw new Error('Required parameter domain was null or undefined when calling getRemoveCaInterestReasonsUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-reasons/${encodeURIComponent(String(domain))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class EmControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * hello\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public helloUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public helloUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public helloUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public helloUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/em/api/v1/hello-em/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ExportControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * exportAraMatchReport\n     * \n     * @param ncab ncab\n     * @param requestParams requestParams\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (ncab === null || ncab === undefined) {\n            throw new Error('Required parameter ncab was null or undefined when calling exportAraMatchReportUsingGET.');\n        }\n\n        if (requestParams === null || requestParams === undefined) {\n            throw new Error('Required parameter requestParams was null or undefined when calling exportAraMatchReportUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (requestParams !== undefined && requestParams !== null) {\n            queryParameters = queryParameters.set('requestParams', <any>requestParams);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/ara-match/${encodeURIComponent(String(ncab))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * exportCancerActivities\n     * \n     * @param active active\n     * @param requestParams requestParams\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (active === null || active === undefined) {\n            throw new Error('Required parameter active was null or undefined when calling exportCancerActivitiesUsingGET.');\n        }\n\n        if (requestParams === null || requestParams === undefined) {\n            throw new Error('Required parameter requestParams was null or undefined when calling exportCancerActivitiesUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (requestParams !== undefined && requestParams !== null) {\n            queryParameters = queryParameters.set('requestParams', <any>requestParams);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/api/v1/export/cas/${encodeURIComponent(String(active))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * exportCancerActivities\n     * \n     * @param active active\n     * @param requestParams requestParams\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;\n    public exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;\n    public exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;\n    public exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (active === null || active === undefined) {\n            throw new Error('Required parameter active was null or undefined when calling exportCancerActivitiesUsingGET1.');\n        }\n\n        if (requestParams === null || requestParams === undefined) {\n            throw new Error('Required parameter requestParams was null or undefined when calling exportCancerActivitiesUsingGET1.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (requestParams !== undefined && requestParams !== null) {\n            queryParameters = queryParameters.set('requestParams', <any>requestParams);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/api/v1/export/${encodeURIComponent(String(active))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCancerActivityPocs\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCancerActivityPocsUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCancerActivityPocsUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCancerActivityPocsUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCancerActivityPocsUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/cas/pocs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getTransferRolePocs\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTransferRolePocsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getTransferRolePocsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getTransferRolePocsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getTransferRolePocsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/xfer/pocs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class GwbLinksControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getLinks\n     * \n     * @param names names\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getLinksUsingGET(names?: Array<string>, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getLinksUsingGET(names?: Array<string>, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getLinksUsingGET(names?: Array<string>, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getLinksUsingGET(names?: Array<string>, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (names) {\n            names.forEach((element) => {\n                queryParameters = queryParameters.append('names', <any>element);\n            })\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/gwb-links`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class I2eUserActiveRolesControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getUsersByRoleCode\n     * \n     * @param roleCode roleCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsersByRoleCodeUsingGET(roleCode: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUsersByRoleCodeUsingGET(roleCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUsersByRoleCodeUsingGET(roleCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUsersByRoleCodeUsingGET(roleCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (roleCode === null || roleCode === undefined) {\n            throw new Error('Required parameter roleCode was null or undefined when calling getUsersByRoleCodeUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/i2eusers-by-rolecode/${encodeURIComponent(String(roleCode))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Payload } from '../model/payload';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class IcDataControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * appdFundinggsAssign\n     * \n     * @param applId applId\n     * @param directcostAmt directcostAmt\n     * @param indirectcostAmt indirectcostAmt\n     * @param phsOrgCode phsOrgCode\n     * @param totalPeriodAmt totalPeriodAmt\n     * @param transType transType\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (directcostAmt === null || directcostAmt === undefined) {\n            throw new Error('Required parameter directcostAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (indirectcostAmt === null || indirectcostAmt === undefined) {\n            throw new Error('Required parameter indirectcostAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (totalPeriodAmt === null || totalPeriodAmt === undefined) {\n            throw new Error('Required parameter totalPeriodAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        if (transType === null || transType === undefined) {\n            throw new Error('Required parameter transType was null or undefined when calling appdFundinggsAssignUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (directcostAmt !== undefined && directcostAmt !== null) {\n            queryParameters = queryParameters.set('directcostAmt', <any>directcostAmt);\n        }\n        if (indirectcostAmt !== undefined && indirectcostAmt !== null) {\n            queryParameters = queryParameters.set('indirectcostAmt', <any>indirectcostAmt);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (totalPeriodAmt !== undefined && totalPeriodAmt !== null) {\n            queryParameters = queryParameters.set('totalPeriodAmt', <any>totalPeriodAmt);\n        }\n        if (transType !== undefined && transType !== null) {\n            queryParameters = queryParameters.set('transType', <any>transType);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/appd-fundings/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * awdFundingsAssign\n     * \n     * @param applId applId\n     * @param phsOrgCode phsOrgCode\n     * @param transType transType\n     * @param newCan newCan\n     * @param newPcc newPcc\n     * @param oldCan oldCan\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling awdFundingsAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling awdFundingsAssignUsingPOST.');\n        }\n\n        if (transType === null || transType === undefined) {\n            throw new Error('Required parameter transType was null or undefined when calling awdFundingsAssignUsingPOST.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (newCan !== undefined && newCan !== null) {\n            queryParameters = queryParameters.set('newCan', <any>newCan);\n        }\n        if (newPcc !== undefined && newPcc !== null) {\n            queryParameters = queryParameters.set('newPcc', <any>newPcc);\n        }\n        if (oldCan !== undefined && oldCan !== null) {\n            queryParameters = queryParameters.set('oldCan', <any>oldCan);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (transType !== undefined && transType !== null) {\n            queryParameters = queryParameters.set('transType', <any>transType);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/awd-fundings/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * fedPersonInvolvementAssign\n     * \n     * @param applId applId\n     * @param personId personId\n     * @param phsOrgCode phsOrgCode\n     * @param roleTypeCode roleTypeCode\n     * @param transactionType transactionType\n     * @param versionCode versionCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (personId === null || personId === undefined) {\n            throw new Error('Required parameter personId was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (roleTypeCode === null || roleTypeCode === undefined) {\n            throw new Error('Required parameter roleTypeCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (transactionType === null || transactionType === undefined) {\n            throw new Error('Required parameter transactionType was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        if (versionCode === null || versionCode === undefined) {\n            throw new Error('Required parameter versionCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (personId !== undefined && personId !== null) {\n            queryParameters = queryParameters.set('personId', <any>personId);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (roleTypeCode !== undefined && roleTypeCode !== null) {\n            queryParameters = queryParameters.set('roleTypeCode', <any>roleTypeCode);\n        }\n        if (transactionType !== undefined && transactionType !== null) {\n            queryParameters = queryParameters.set('transactionType', <any>transactionType);\n        }\n        if (versionCode !== undefined && versionCode !== null) {\n            queryParameters = queryParameters.set('versionCode', <any>versionCode);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/fed-person-involvement/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * icPccAssignMerge\n     * \n     * @param applId applId\n     * @param phsOrgCode phsOrgCode\n     * @param transactionType transactionType\n     * @param newPccCode newPccCode\n     * @param oldPccCode oldPccCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling icPccAssignMergeUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling icPccAssignMergeUsingPOST.');\n        }\n\n        if (transactionType === null || transactionType === undefined) {\n            throw new Error('Required parameter transactionType was null or undefined when calling icPccAssignMergeUsingPOST.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (newPccCode !== undefined && newPccCode !== null) {\n            queryParameters = queryParameters.set('newPccCode', <any>newPccCode);\n        }\n        if (oldPccCode !== undefined && oldPccCode !== null) {\n            queryParameters = queryParameters.set('oldPccCode', <any>oldPccCode);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (transactionType !== undefined && transactionType !== null) {\n            queryParameters = queryParameters.set('transactionType', <any>transactionType);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/ic-pcc/assign-merge/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * icPccAssign\n     * \n     * @param applId applId\n     * @param phsOrgCode phsOrgCode\n     * @param transactionType transactionType\n     * @param newPccCode newPccCode\n     * @param oldPccCode oldPccCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling icPccAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling icPccAssignUsingPOST.');\n        }\n\n        if (transactionType === null || transactionType === undefined) {\n            throw new Error('Required parameter transactionType was null or undefined when calling icPccAssignUsingPOST.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (newPccCode !== undefined && newPccCode !== null) {\n            queryParameters = queryParameters.set('newPccCode', <any>newPccCode);\n        }\n        if (oldPccCode !== undefined && oldPccCode !== null) {\n            queryParameters = queryParameters.set('oldPccCode', <any>oldPccCode);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (transactionType !== undefined && transactionType !== null) {\n            queryParameters = queryParameters.set('transactionType', <any>transactionType);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/ic-pcc/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * mainPccAssign\n     * \n     * @param applId applId\n     * @param overWriteFlag overWriteFlag\n     * @param phsOrgCode phsOrgCode\n     * @param progClassCode progClassCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling mainPccAssignUsingPOST.');\n        }\n\n        if (overWriteFlag === null || overWriteFlag === undefined) {\n            throw new Error('Required parameter overWriteFlag was null or undefined when calling mainPccAssignUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling mainPccAssignUsingPOST.');\n        }\n\n        if (progClassCode === null || progClassCode === undefined) {\n            throw new Error('Required parameter progClassCode was null or undefined when calling mainPccAssignUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (overWriteFlag !== undefined && overWriteFlag !== null) {\n            queryParameters = queryParameters.set('overWriteFlag', <any>overWriteFlag);\n        }\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n        if (progClassCode !== undefined && progClassCode !== null) {\n            queryParameters = queryParameters.set('progClassCode', <any>progClassCode);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/main-pcc/assign/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * pccDetails\n     * \n     * @param applId applId\n     * @param phsOrgCode phsOrgCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;\n    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;\n    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;\n    public pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling pccDetailsUsingPOST.');\n        }\n\n        if (phsOrgCode === null || phsOrgCode === undefined) {\n            throw new Error('Required parameter phsOrgCode was null or undefined when calling pccDetailsUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (phsOrgCode !== undefined && phsOrgCode !== null) {\n            queryParameters = queryParameters.set('phsOrgCode', <any>phsOrgCode);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Payload>(`${this.basePath}/api/v1/pcc-details/${encodeURIComponent(String(applId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Report } from '../model/report';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class JasperReportControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * generateJasperReport\n     * \n     * @param EXPORT_FMT EXPORT_FMT\n     * @param id id\n     * @param name name\n     * @param promptexPReportId promptex-pReportId\n     * @param promptexPSessionId promptex-pSessionId\n     * @param type type\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (EXPORT_FMT !== undefined && EXPORT_FMT !== null) {\n            queryParameters = queryParameters.set('EXPORT_FMT', <any>EXPORT_FMT);\n        }\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('id', <any>id);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (promptexPReportId !== undefined && promptexPReportId !== null) {\n            queryParameters = queryParameters.set('promptex-pReportId', <any>promptexPReportId);\n        }\n        if (promptexPSessionId !== undefined && promptexPSessionId !== null) {\n            queryParameters = queryParameters.set('promptex-pSessionId', <any>promptexPSessionId);\n        }\n        if (type !== undefined && type !== null) {\n            queryParameters = queryParameters.set('type', <any>type);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/pdf',\n            'application/vnd.ms-excel'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/generate-jasper-report`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * generateJasperReport\n     * \n     * @param report report\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public generateJasperReportUsingPOST(report: Report, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public generateJasperReportUsingPOST(report: Report, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public generateJasperReportUsingPOST(report: Report, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public generateJasperReportUsingPOST(report: Report, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (report === null || report === undefined) {\n            throw new Error('Required parameter report was null or undefined when calling generateJasperReportUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/generate-jasper-report`,\n            report,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * generatePaylistReport\n     * \n     * @param paylistId paylistId\n     * @param reportName reportName\n     * @param type type\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylistId === null || paylistId === undefined) {\n            throw new Error('Required parameter paylistId was null or undefined when calling generatePaylistReportUsingGET.');\n        }\n\n        if (reportName === null || reportName === undefined) {\n            throw new Error('Required parameter reportName was null or undefined when calling generatePaylistReportUsingGET.');\n        }\n\n        if (type === null || type === undefined) {\n            throw new Error('Required parameter type was null or undefined when calling generatePaylistReportUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/pdf',\n            'application/vnd.ms-excel'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/generate-paylist-report/${encodeURIComponent(String(paylistId))}/${encodeURIComponent(String(reportName))}/${encodeURIComponent(String(type))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class LookupsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getDocAndCayCodes\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDocAndCayCodesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getDocAndCayCodesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getDocAndCayCodesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getDocAndCayCodesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/lookups/cayCode-doc`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getNciDocs\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNciDocsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNciDocsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNciDocsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNciDocsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/lookups/nci-doc`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class NciReferralGrantsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * exportGrantSearchResults\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public exportGrantSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling exportGrantSearchResultsUsingGET.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/transfer-grants`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * exportSearchResults\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public exportSearchResultsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling exportSearchResultsUsingGET.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/export/referral-grants`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * exportSearchResults\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public exportSearchResultsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling exportSearchResultsUsingPOST.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'text/plain'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/export/referral-grants`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * findWithdrawnGrants\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findWithdrawnGrantsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findWithdrawnGrantsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findWithdrawnGrantsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findWithdrawnGrantsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants/withdrawn`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getSuggestedCayCodes\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSuggestedCayCodesUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getSuggestedCayCodesUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getSuggestedCayCodesUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getSuggestedCayCodesUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getSuggestedCayCodesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants/suggested-cay-codes/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * searchGrantsForPDAssignment\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applId applId\n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchGrantsForPDAssignmentUsingGET(remainingParams: any, activeSegments?: boolean, applId?: Array<number>, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling searchGrantsForPDAssignmentUsingGET.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applId) {\n            applId.forEach((element) => {\n                queryParameters = queryParameters.append('applId', <any>element);\n            })\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pd-assignment/search`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * searchReferralGrants\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchReferralGrantsUsingGET(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling searchReferralGrantsUsingGET.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants/search`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * searchReferralGrants\n     * \n     * @param remainingParams remainingParams\n     * @param activeSegments \n     * @param applIds \n     * @param applStatusGroupCode \n     * @param araMatchStatus \n     * @param cancerActivities \n     * @param composedGrantNumber \n     * @param dualCas \n     * @param formerGrantNumber \n     * @param fyFrom \n     * @param fyTo \n     * @param grantIc \n     * @param grantMech \n     * @param grantSerial \n     * @param grantSuffix \n     * @param grantsWitCa \n     * @param grantType \n     * @param grantYear \n     * @param groupCode \n     * @param includeDeleted \n     * @param includeOrphans \n     * @param institution \n     * @param irgCode \n     * @param irgFlexCode \n     * @param myCancerActivities \n     * @param ncabFrom \n     * @param ncabTo \n     * @param npnId \n     * @param orderBy orderBy\n     * @param pdAssignmentSearch \n     * @param pdId \n     * @param piName \n     * @param referralOfficer \n     * @param referralStatus \n     * @param rfaPaNumber \n     * @param role \n     * @param roNpnId \n     * @param selectFrom \n     * @param sraDesignatorCode \n     * @param sraFlexCode \n     * @param wBSearch \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchReferralGrantsUsingPOST(remainingParams: any, activeSegments?: boolean, applIds?: Array<number>, applStatusGroupCode?: Array<string>, araMatchStatus?: Array<string>, cancerActivities?: Array<string>, composedGrantNumber?: string, dualCas?: boolean, formerGrantNumber?: string, fyFrom?: number, fyTo?: number, grantIc?: string, grantMech?: string, grantSerial?: string, grantSuffix?: string, grantsWitCa?: boolean, grantType?: string, grantYear?: string, groupCode?: string, includeDeleted?: boolean, includeOrphans?: boolean, institution?: string, irgCode?: string, irgFlexCode?: string, myCancerActivities?: Array<string>, ncabFrom?: string, ncabTo?: string, npnId?: number, orderBy?: string, pdAssignmentSearch?: boolean, pdId?: number, piName?: string, referralOfficer?: number, referralStatus?: Array<string>, rfaPaNumber?: Array<string>, role?: string, roNpnId?: number, selectFrom?: string, sraDesignatorCode?: string, sraFlexCode?: string, wBSearch?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (remainingParams === null || remainingParams === undefined) {\n            throw new Error('Required parameter remainingParams was null or undefined when calling searchReferralGrantsUsingPOST.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeSegments !== undefined && activeSegments !== null) {\n            queryParameters = queryParameters.set('activeSegments', <any>activeSegments);\n        }\n        if (applIds) {\n            applIds.forEach((element) => {\n                queryParameters = queryParameters.append('applIds', <any>element);\n            })\n        }\n        if (applStatusGroupCode) {\n            applStatusGroupCode.forEach((element) => {\n                queryParameters = queryParameters.append('applStatusGroupCode', <any>element);\n            })\n        }\n        if (araMatchStatus) {\n            araMatchStatus.forEach((element) => {\n                queryParameters = queryParameters.append('araMatchStatus', <any>element);\n            })\n        }\n        if (cancerActivities) {\n            cancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('cancerActivities', <any>element);\n            })\n        }\n        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {\n            queryParameters = queryParameters.set('composedGrantNumber', <any>composedGrantNumber);\n        }\n        if (dualCas !== undefined && dualCas !== null) {\n            queryParameters = queryParameters.set('dualCas', <any>dualCas);\n        }\n        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {\n            queryParameters = queryParameters.set('formerGrantNumber', <any>formerGrantNumber);\n        }\n        if (fyFrom !== undefined && fyFrom !== null) {\n            queryParameters = queryParameters.set('fyFrom', <any>fyFrom);\n        }\n        if (fyTo !== undefined && fyTo !== null) {\n            queryParameters = queryParameters.set('fyTo', <any>fyTo);\n        }\n        if (grantIc !== undefined && grantIc !== null) {\n            queryParameters = queryParameters.set('grantIc', <any>grantIc);\n        }\n        if (grantMech !== undefined && grantMech !== null) {\n            queryParameters = queryParameters.set('grantMech', <any>grantMech);\n        }\n        if (grantSerial !== undefined && grantSerial !== null) {\n            queryParameters = queryParameters.set('grantSerial', <any>grantSerial);\n        }\n        if (grantSuffix !== undefined && grantSuffix !== null) {\n            queryParameters = queryParameters.set('grantSuffix', <any>grantSuffix);\n        }\n        if (grantsWitCa !== undefined && grantsWitCa !== null) {\n            queryParameters = queryParameters.set('grantsWitCa', <any>grantsWitCa);\n        }\n        if (grantType !== undefined && grantType !== null) {\n            queryParameters = queryParameters.set('grantType', <any>grantType);\n        }\n        if (grantYear !== undefined && grantYear !== null) {\n            queryParameters = queryParameters.set('grantYear', <any>grantYear);\n        }\n        if (groupCode !== undefined && groupCode !== null) {\n            queryParameters = queryParameters.set('groupCode', <any>groupCode);\n        }\n        if (includeDeleted !== undefined && includeDeleted !== null) {\n            queryParameters = queryParameters.set('includeDeleted', <any>includeDeleted);\n        }\n        if (includeOrphans !== undefined && includeOrphans !== null) {\n            queryParameters = queryParameters.set('includeOrphans', <any>includeOrphans);\n        }\n        if (institution !== undefined && institution !== null) {\n            queryParameters = queryParameters.set('institution', <any>institution);\n        }\n        if (irgCode !== undefined && irgCode !== null) {\n            queryParameters = queryParameters.set('irgCode', <any>irgCode);\n        }\n        if (irgFlexCode !== undefined && irgFlexCode !== null) {\n            queryParameters = queryParameters.set('irgFlexCode', <any>irgFlexCode);\n        }\n        if (myCancerActivities) {\n            myCancerActivities.forEach((element) => {\n                queryParameters = queryParameters.append('myCancerActivities', <any>element);\n            })\n        }\n        if (ncabFrom !== undefined && ncabFrom !== null) {\n            queryParameters = queryParameters.set('ncabFrom', <any>ncabFrom);\n        }\n        if (ncabTo !== undefined && ncabTo !== null) {\n            queryParameters = queryParameters.set('ncabTo', <any>ncabTo);\n        }\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {\n            queryParameters = queryParameters.set('pdAssignmentSearch', <any>pdAssignmentSearch);\n        }\n        if (pdId !== undefined && pdId !== null) {\n            queryParameters = queryParameters.set('pdId', <any>pdId);\n        }\n        if (piName !== undefined && piName !== null) {\n            queryParameters = queryParameters.set('piName', <any>piName);\n        }\n        if (referralOfficer !== undefined && referralOfficer !== null) {\n            queryParameters = queryParameters.set('referralOfficer', <any>referralOfficer);\n        }\n        if (referralStatus) {\n            referralStatus.forEach((element) => {\n                queryParameters = queryParameters.append('referralStatus', <any>element);\n            })\n        }\n        if (remainingParams !== undefined && remainingParams !== null) {\n            queryParameters = queryParameters.set('remainingParams', <any>remainingParams);\n        }\n        if (rfaPaNumber) {\n            rfaPaNumber.forEach((element) => {\n                queryParameters = queryParameters.append('rfaPaNumber', <any>element);\n            })\n        }\n        if (role !== undefined && role !== null) {\n            queryParameters = queryParameters.set('role', <any>role);\n        }\n        if (roNpnId !== undefined && roNpnId !== null) {\n            queryParameters = queryParameters.set('roNpnId', <any>roNpnId);\n        }\n        if (selectFrom !== undefined && selectFrom !== null) {\n            queryParameters = queryParameters.set('selectFrom', <any>selectFrom);\n        }\n        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {\n            queryParameters = queryParameters.set('sraDesignatorCode', <any>sraDesignatorCode);\n        }\n        if (sraFlexCode !== undefined && sraFlexCode !== null) {\n            queryParameters = queryParameters.set('sraFlexCode', <any>sraFlexCode);\n        }\n        if (wBSearch !== undefined && wBSearch !== null) {\n            queryParameters = queryParameters.set('WBSearch', <any>wBSearch);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral-grants/search`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * search\n     * \n     * @param applId applId\n     * @param cancerActivity cancerActivity\n     * @param grantsWithoutInterest grantsWithoutInterest\n     * @param mech mech\n     * @param minDaysSinceReferral minDaysSinceReferral\n     * @param ncabFromDate ncabFromDate\n     * @param ncabToDate ncabToDate\n     * @param orderBy orderBy\n     * @param pocNpnId pocNpnId\n     * @param referralDateHigh referralDateHigh\n     * @param referralDateLow referralDateLow\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchUsingGET(applId?: Array<number>, cancerActivity?: string, grantsWithoutInterest?: boolean, mech?: string, minDaysSinceReferral?: number, ncabFromDate?: string, ncabToDate?: string, orderBy?: string, pocNpnId?: number, referralDateHigh?: string, referralDateLow?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (applId) {\n            applId.forEach((element) => {\n                queryParameters = queryParameters.append('applId', <any>element);\n            })\n        }\n        if (cancerActivity !== undefined && cancerActivity !== null) {\n            queryParameters = queryParameters.set('cancerActivity', <any>cancerActivity);\n        }\n        if (grantsWithoutInterest !== undefined && grantsWithoutInterest !== null) {\n            queryParameters = queryParameters.set('grantsWithoutInterest', <any>grantsWithoutInterest);\n        }\n        if (mech !== undefined && mech !== null) {\n            queryParameters = queryParameters.set('mech', <any>mech);\n        }\n        if (minDaysSinceReferral !== undefined && minDaysSinceReferral !== null) {\n            queryParameters = queryParameters.set('minDaysSinceReferral', <any>minDaysSinceReferral);\n        }\n        if (ncabFromDate !== undefined && ncabFromDate !== null) {\n            queryParameters = queryParameters.set('ncabFromDate', <any>ncabFromDate);\n        }\n        if (ncabToDate !== undefined && ncabToDate !== null) {\n            queryParameters = queryParameters.set('ncabToDate', <any>ncabToDate);\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n        if (pocNpnId !== undefined && pocNpnId !== null) {\n            queryParameters = queryParameters.set('pocNpnId', <any>pocNpnId);\n        }\n        if (referralDateHigh !== undefined && referralDateHigh !== null) {\n            queryParameters = queryParameters.set('referralDateHigh', <any>referralDateHigh);\n        }\n        if (referralDateLow !== undefined && referralDateLow !== null) {\n            queryParameters = queryParameters.set('referralDateLow', <any>referralDateLow);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-grants`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CollectionModelPaylineStatusesT } from '../model/collectionModelPaylineStatusesT';\nimport { EntityModelPaylineStatusesT } from '../model/entityModelPaylineStatusesT';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylineCertificationsTEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param id id\n     * @param paylinestatusestId paylinestatusestId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingDELETE(id: number, paylinestatusestId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE(id: number, paylinestatusestId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE(id: number, paylinestatusestId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE(id: number, paylinestatusestId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingDELETE.');\n        }\n\n        if (paylinestatusestId === null || paylinestatusestId === undefined) {\n            throw new Error('Required parameter paylinestatusestId was null or undefined when calling paylineCertificationsTPaylineStatusesUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses/${encodeURIComponent(String(paylinestatusestId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public paylineCertificationsTPaylineStatusesUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingDELETE1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CollectionModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param id id\n     * @param paylinestatusestId paylinestatusestId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingGET1(id: number, paylinestatusestId: string, observe?: 'body', reportProgress?: boolean): Observable<EntityModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingGET1(id: number, paylinestatusestId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingGET1(id: number, paylinestatusestId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingGET1(id: number, paylinestatusestId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingGET1.');\n        }\n\n        if (paylinestatusestId === null || paylinestatusestId === undefined) {\n            throw new Error('Required parameter paylinestatusestId was null or undefined when calling paylineCertificationsTPaylineStatusesUsingGET1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/hal+json'\n        ];\n\n        return this.httpClient.get<EntityModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses/${encodeURIComponent(String(paylinestatusestId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<CollectionModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<CollectionModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineCertificationsTPaylineStatuses\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineCertificationsTPaylineStatusesUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelPaylineStatusesT>;\n    public paylineCertificationsTPaylineStatusesUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelPaylineStatusesT>>;\n    public paylineCertificationsTPaylineStatusesUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineCertificationsTPaylineStatusesUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<CollectionModelPaylineStatusesT>(`${this.basePath}/paylineCertificationsTs/${encodeURIComponent(String(id))}/paylineStatuses`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { PaylinesDto } from '../model/paylinesDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylineControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * cancelPaylines\n     * \n     * @param paylineId payline_id\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylineId === null || paylineId === undefined) {\n            throw new Error('Required parameter paylineId was null or undefined when calling cancelPaylinesUsingPATCH.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling cancelPaylinesUsingPATCH.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (paylineId !== undefined && paylineId !== null) {\n            queryParameters = queryParameters.set('payline_id', <any>paylineId);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<any>(`${this.basePath}/api/v1/paylines/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * certifyPaylines\n     * \n     * @param paylinesDto paylinesDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylinesDto === null || paylinesDto === undefined) {\n            throw new Error('Required parameter paylinesDto was null or undefined when calling certifyPaylinesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylines/certify`,\n            paylinesDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * findCertifiedPaylines\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findCertifiedPaylinesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findCertifiedPaylinesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findCertifiedPaylinesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findCertifiedPaylinesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/certified-paylines`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getFiscalYear\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getFiscalYearUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getFiscalYearUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getFiscalYearUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getFiscalYearUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/fiscal-years`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getNewPaylines\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNewPaylinesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getNewPaylinesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getNewPaylinesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getNewPaylinesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/new-paylines`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getOEFIAPaylines\n     * \n     * @param certifiedFlag \n     * @param fy \n     * @param isOefiaCertifier \n     * @param userId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (certifiedFlag !== undefined && certifiedFlag !== null) {\n            queryParameters = queryParameters.set('certifiedFlag', <any>certifiedFlag);\n        }\n        if (fy !== undefined && fy !== null) {\n            queryParameters = queryParameters.set('fy', <any>fy);\n        }\n        if (isOefiaCertifier !== undefined && isOefiaCertifier !== null) {\n            queryParameters = queryParameters.set('isOefiaCertifier', <any>isOefiaCertifier);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/oefia-paylines`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylineHistoryById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylineHistoryByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylineHistoryByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylineHistoryByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylineHistoryByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylineHistoryByIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/history/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylineHistory\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylineHistoryUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylineHistoryUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylineHistoryUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylineHistoryUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylineHistoryUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/${encodeURIComponent(String(id))}/history`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylinesById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylinesByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylinesByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylinesByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylinesByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylinesByIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/view-paylines/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylinesByParameters\n     * \n     * @param fy fy\n     * @param activityCode activityCode\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylinesByParametersUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activityCode !== undefined && activityCode !== null) {\n            queryParameters = queryParameters.set('activityCode', <any>activityCode);\n        }\n        if (fy !== undefined && fy !== null) {\n            queryParameters = queryParameters.set('fy', <any>fy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylines\n     * \n     * @param activityCode activityCode\n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylinesUsingGET(activityCode: string, fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (activityCode === null || activityCode === undefined) {\n            throw new Error('Required parameter activityCode was null or undefined when calling getPaylinesUsingGET.');\n        }\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylinesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/${encodeURIComponent(String(fy))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylines\n     * \n     * @param activityCode activityCode\n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylinesUsingGET1(activityCode: string, fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (activityCode === null || activityCode === undefined) {\n            throw new Error('Required parameter activityCode was null or undefined when calling getPaylinesUsingGET1.');\n        }\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylinesUsingGET1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylines/${encodeURIComponent(String(fy))}/${encodeURIComponent(String(activityCode))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * unCertifyPaylines\n     * \n     * @param paylinesDto paylinesDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylinesDto === null || paylinesDto === undefined) {\n            throw new Error('Required parameter paylinesDto was null or undefined when calling unCertifyPaylinesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylines/un-certify`,\n            paylinesDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EntityModelAppLookupT } from '../model/entityModelAppLookupT';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylineStatusesTEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public paylineStatusesTStatusIdUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public paylineStatusesTStatusIdUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public paylineStatusesTStatusIdUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelAppLookupT>;\n    public paylineStatusesTStatusIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EntityModelAppLookupT>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingPATCH(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelAppLookupT>;\n    public paylineStatusesTStatusIdUsingPATCH(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPATCH(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPATCH(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineStatusesTStatusIdUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<EntityModelAppLookupT>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingPOST(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelAppLookupT>;\n    public paylineStatusesTStatusIdUsingPOST(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPOST(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPOST(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineStatusesTStatusIdUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<EntityModelAppLookupT>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * paylineStatusesTStatusId\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paylineStatusesTStatusIdUsingPUT(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelAppLookupT>;\n    public paylineStatusesTStatusIdUsingPUT(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPUT(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelAppLookupT>>;\n    public paylineStatusesTStatusIdUsingPUT(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling paylineStatusesTStatusIdUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling paylineStatusesTStatusIdUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<EntityModelAppLookupT>(`${this.basePath}/paylineStatusesTs/${encodeURIComponent(String(id))}/statusId`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { FindPaylistCriteriaDto } from '../model/findPaylistCriteriaDto';\nimport { PaylistDto } from '../model/paylistDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylistControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * certifyPaylist\n     * \n     * @param paylistDto paylistDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public certifyPaylistUsingPOST(paylistDto: PaylistDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylistDto === null || paylistDto === undefined) {\n            throw new Error('Required parameter paylistDto was null or undefined when calling certifyPaylistUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylists/certify-paylist`,\n            paylistDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * deletePaylist\n     * \n     * @param paylistId paylistId\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deletePaylistUsingDELETE(paylistId: number, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylistId === null || paylistId === undefined) {\n            throw new Error('Required parameter paylistId was null or undefined when calling deletePaylistUsingDELETE.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling deletePaylistUsingDELETE.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (paylistId !== undefined && paylistId !== null) {\n            queryParameters = queryParameters.set('paylistId', <any>paylistId);\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/api/v1/paylists/delete`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * findPaylists\n     * \n     * @param criteriaDto criteriaDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (criteriaDto === null || criteriaDto === undefined) {\n            throw new Error('Required parameter criteriaDto was null or undefined when calling findPaylistsUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylists/find-paylists`,\n            criteriaDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getDeactivated\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDeactivatedUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getDeactivatedUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getDeactivatedUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getDeactivatedUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/deactivated-paylists`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylineHistoryById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylineHistoryByIdUsingGET1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylineHistoryByIdUsingGET1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylineHistoryByIdUsingGET1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylineHistoryByIdUsingGET1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylineHistoryByIdUsingGET1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylists/history/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistFiscalYears\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistFiscalYearsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistFiscalYearsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistFiscalYearsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistFiscalYearsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-fiscal-years`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistGrantsById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistGrantsByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistGrantsByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistGrantsByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistGrantsByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPaylistGrantsByIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistGrants\n     * \n     * @param activityCode activityCode\n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistGrantsUsingGET(activityCode: string, fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (activityCode === null || activityCode === undefined) {\n            throw new Error('Required parameter activityCode was null or undefined when calling getPaylistGrantsUsingGET.');\n        }\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylistGrantsUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/${encodeURIComponent(String(fy))}/${encodeURIComponent(String(activityCode))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylists\n     * \n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistsUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistsUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistsUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistsUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylistsUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (fy !== undefined && fy !== null) {\n            queryParameters = queryParameters.set('fy', <any>fy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/view-paylists`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPendingGrants\n     * \n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPendingGrantsUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPendingGrantsUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPendingGrantsUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPendingGrantsUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPendingGrantsUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (fy !== undefined && fy !== null) {\n            queryParameters = queryParameters.set('fy', <any>fy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pending-grants`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getUncertified\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUncertifiedUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUncertifiedUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUncertifiedUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUncertifiedUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/uncertified-paylists`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * savePaylist\n     * \n     * @param paylistDto paylistDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public savePaylistUsingPOST(paylistDto: PaylistDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (paylistDto === null || paylistDto === undefined) {\n            throw new Error('Required parameter paylistDto was null or undefined when calling savePaylistUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylists/save-paylist`,\n            paylistDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { PaylistGrantsCriteriaDto } from '../model/paylistGrantsCriteriaDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylistGrantsControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * findPaylistGrants\n     * \n     * @param criteriaDto criteriaDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public findPaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (criteriaDto === null || criteriaDto === undefined) {\n            throw new Error('Required parameter criteriaDto was null or undefined when calling findPaylistGrantsUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylist-grants/find-open`,\n            criteriaDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getExceptionMapping\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getExceptionMappingUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getExceptionMappingUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getExceptionMappingUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getExceptionMappingUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/exception-mapping`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * massGenPaylistEnabled\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public massGenPaylistEnabledUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public massGenPaylistEnabledUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public massGenPaylistEnabledUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public massGenPaylistEnabledUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/mass-gen-enabled`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * massGeneratePaylists\n     * \n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public massGeneratePaylistsUsingPOST(userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public massGeneratePaylistsUsingPOST(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public massGeneratePaylistsUsingPOST(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public massGeneratePaylistsUsingPOST(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling massGeneratePaylistsUsingPOST.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylist-grants/mass-gen-paylists`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * retrievePaylistGrantsById\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public retrievePaylistGrantsByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public retrievePaylistGrantsByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public retrievePaylistGrantsByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public retrievePaylistGrantsByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling retrievePaylistGrantsByIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-grants/retrieve/id/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * searchPaylinePaylistGrants\n     * \n     * @param criteriaDto criteriaDto\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public searchPaylinePaylistGrantsUsingPOST(criteriaDto: PaylistGrantsCriteriaDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (criteriaDto === null || criteriaDto === undefined) {\n            throw new Error('Required parameter criteriaDto was null or undefined when calling searchPaylinePaylistGrantsUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/paylist-grants/search-ppg`,\n            criteriaDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaylistUtilControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getBudgetMechanismsForFy\n     * \n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getBudgetMechanismsForFyUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getBudgetMechanismsForFyUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getBudgetMechanismsForFyUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getBudgetMechanismsForFyUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getBudgetMechanismsForFyUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-util/budget-mechanisms/${encodeURIComponent(String(fy))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCostCenters\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCostCentersUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCostCentersUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCostCentersUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCostCentersUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-util/cost-centers`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistStatuses\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistStatusesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistStatusesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistStatusesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistStatusesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-util/paylist-statuses`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPaylistTypes\n     * \n     * @param fy fy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaylistTypesUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPaylistTypesUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPaylistTypesUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPaylistTypesUsingGET(fy: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (fy === null || fy === undefined) {\n            throw new Error('Required parameter fy was null or undefined when calling getPaylistTypesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/paylist-util/paylist-types/${encodeURIComponent(String(fy))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PdControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getPDList\n     * \n     * @param active active\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPDListUsingGET(active: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPDListUsingGET(active: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPDListUsingGET(active: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPDListUsingGET(active: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (active === null || active === undefined) {\n            throw new Error('Required parameter active was null or undefined when calling getPDListUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pd-list/${encodeURIComponent(String(active))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPDPortfolios\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPDPortfoliosUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPDPortfoliosUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPDPortfoliosUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPDPortfoliosUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pd-portfolios/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPdsByCayCode\n     * \n     * @param ca ca\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (ca === null || ca === undefined) {\n            throw new Error('Required parameter ca was null or undefined when calling getPdsByCayCodeUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pds/${encodeURIComponent(String(ca))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPdsByCayCodes\n     * \n     * @param cas cas\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (cas === null || cas === undefined) {\n            throw new Error('Required parameter cas was null or undefined when calling getPdsByCayCodesUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (cas) {\n            cas.forEach((element) => {\n                queryParameters = queryParameters.append('cas', <any>element);\n            })\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/pds/ca/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * isPdHasActiveGrantPortfolio\n     * \n     * @param npeId npeId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling isPdHasActiveGrantPortfolioUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/check-pd-has-active-grant-portfolio/${encodeURIComponent(String(npeId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PropertiesControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getProperties\n     * \n     * @param app app\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPropertiesUsingGET(app: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPropertiesUsingGET(app: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPropertiesUsingGET(app: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPropertiesUsingGET(app: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (app === null || app === undefined) {\n            throw new Error('Required parameter app was null or undefined when calling getPropertiesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/properties/${encodeURIComponent(String(app))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getProperties\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPropertiesUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPropertiesUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPropertiesUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPropertiesUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/properties/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getProperty\n     * \n     * @param app app\n     * @param propKey propKey\n     * @param defaultValue defaultValue\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPropertyUsingGET(app: string, propKey: string, defaultValue?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPropertyUsingGET(app: string, propKey: string, defaultValue?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPropertyUsingGET(app: string, propKey: string, defaultValue?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPropertyUsingGET(app: string, propKey: string, defaultValue?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (app === null || app === undefined) {\n            throw new Error('Required parameter app was null or undefined when calling getPropertyUsingGET.');\n        }\n\n        if (propKey === null || propKey === undefined) {\n            throw new Error('Required parameter propKey was null or undefined when calling getPropertyUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (defaultValue !== undefined && defaultValue !== null) {\n            queryParameters = queryParameters.set('defaultValue', <any>defaultValue);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/properties/${encodeURIComponent(String(app))}/${encodeURIComponent(String(propKey))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ReferralMessagesReadTDto } from '../model/referralMessagesReadTDto';\nimport { ReferralMessagesTDto } from '../model/referralMessagesTDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReferralMessagesControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getMessagesForApplId\n     * \n     * @param applId applId\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getMessagesForApplIdUsingGET(applId: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getMessagesForApplIdUsingGET(applId: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getMessagesForApplIdUsingGET(applId: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getMessagesForApplIdUsingGET(applId: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getMessagesForApplIdUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/message/${encodeURIComponent(String(applId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * readAllMessages\n     * \n     * @param applId applId\n     * @param npnId npnId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public readAllMessagesUsingPOST(applId: number, npnId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public readAllMessagesUsingPOST(applId: number, npnId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public readAllMessagesUsingPOST(applId: number, npnId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public readAllMessagesUsingPOST(applId: number, npnId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling readAllMessagesUsingPOST.');\n        }\n\n        if (npnId === null || npnId === undefined) {\n            throw new Error('Required parameter npnId was null or undefined when calling readAllMessagesUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/message-read/${encodeURIComponent(String(applId))}/${encodeURIComponent(String(npnId))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * readMessage\n     * \n     * @param message message\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public readMessageUsingPOST(message: ReferralMessagesReadTDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public readMessageUsingPOST(message: ReferralMessagesReadTDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public readMessageUsingPOST(message: ReferralMessagesReadTDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public readMessageUsingPOST(message: ReferralMessagesReadTDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (message === null || message === undefined) {\n            throw new Error('Required parameter message was null or undefined when calling readMessageUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/message-read`,\n            message,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveMessage\n     * \n     * @param message message\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveMessageUsingPOST(message: ReferralMessagesTDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveMessageUsingPOST(message: ReferralMessagesTDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveMessageUsingPOST(message: ReferralMessagesTDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveMessageUsingPOST(message: ReferralMessagesTDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (message === null || message === undefined) {\n            throw new Error('Required parameter message was null or undefined when calling saveMessageUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/message`,\n            message,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CollectionModelReferralMessagesReadT } from '../model/collectionModelReferralMessagesReadT';\nimport { EntityModelReferralMessagesReadT } from '../model/entityModelReferralMessagesReadT';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReferralMessagesTEntityService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param id id\n     * @param referralmessagesreadtId referralmessagesreadtId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingDELETE.');\n        }\n\n        if (referralmessagesreadtId === null || referralmessagesreadtId === undefined) {\n            throw new Error('Required parameter referralmessagesreadtId was null or undefined when calling referralMessagesTMessagesReadUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead/${encodeURIComponent(String(referralmessagesreadtId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public referralMessagesTMessagesReadUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public referralMessagesTMessagesReadUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public referralMessagesTMessagesReadUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingDELETE1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/hal+json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CollectionModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param id id\n     * @param referralmessagesreadtId referralmessagesreadtId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe?: 'body', reportProgress?: boolean): Observable<EntityModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingGET1.');\n        }\n\n        if (referralmessagesreadtId === null || referralmessagesreadtId === undefined) {\n            throw new Error('Required parameter referralmessagesreadtId was null or undefined when calling referralMessagesTMessagesReadUsingGET1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/hal+json'\n        ];\n\n        return this.httpClient.get<EntityModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead/${encodeURIComponent(String(referralmessagesreadtId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling referralMessagesTMessagesReadUsingPATCH.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingPATCH.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.patch<CollectionModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling referralMessagesTMessagesReadUsingPOST.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<CollectionModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * referralMessagesTMessagesRead\n     * \n     * @param body body\n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;\n    public referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;\n    public referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling referralMessagesTMessagesReadUsingPUT.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling referralMessagesTMessagesReadUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'text/uri-list',\n            'application/x-spring-data-compact+json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<CollectionModelReferralMessagesReadT>(`${this.basePath}/referralMessagesTs/${encodeURIComponent(String(id))}/messagesRead`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReferralSearchCriteriaControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getAraMatchStatuses\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAraMatchStatusesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getAraMatchStatusesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getAraMatchStatusesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getAraMatchStatusesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ara-statuses/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getI2eStatuses\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getI2eStatusesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getI2eStatusesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getI2eStatusesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getI2eStatusesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/i2e-statuses`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralCloseReasons\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralCloseReasonsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralCloseReasonsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralCloseReasonsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralCloseReasonsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-close-reasons`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralFrom\n     * \n     * @param role role\n     * @param npnId npnId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralFromUsingGET(role: string, npnId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralFromUsingGET(role: string, npnId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralFromUsingGET(role: string, npnId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralFromUsingGET(role: string, npnId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (role === null || role === undefined) {\n            throw new Error('Required parameter role was null or undefined when calling getReferralFromUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (npnId !== undefined && npnId !== null) {\n            queryParameters = queryParameters.set('npnId', <any>npnId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-from/${encodeURIComponent(String(role))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralStatuses\n     * \n     * @param role role\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralStatusesUsingGET(role: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralStatusesUsingGET(role: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralStatusesUsingGET(role: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralStatusesUsingGET(role: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (role === null || role === undefined) {\n            throw new Error('Required parameter role was null or undefined when calling getReferralStatusesUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-statuses/${encodeURIComponent(String(role))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { AcceptReferralActionDto } from '../model/acceptReferralActionDto';\nimport { AddCaInterestActionDto } from '../model/addCaInterestActionDto';\nimport { AssignRoActionDto } from '../model/assignRoActionDto';\nimport { CloseReferralActionDto } from '../model/closeReferralActionDto';\nimport { PdTransferActionDto } from '../model/pdTransferActionDto';\nimport { ReferActionDto } from '../model/referActionDto';\nimport { RejectReferralActionDto } from '../model/rejectReferralActionDto';\nimport { ReleaseDualActionDto } from '../model/releaseDualActionDto';\nimport { ReleaseDualSpclCaseActionDto } from '../model/releaseDualSpclCaseActionDto';\nimport { RemoveCaInterestActionDto } from '../model/removeCaInterestActionDto';\nimport { ReopenReferralActionDto } from '../model/reopenReferralActionDto';\nimport { TransferActionDto } from '../model/transferActionDto';\nimport { UnreferReferralActionDto } from '../model/unreferReferralActionDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ReferralWorkflowControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * accept\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling acceptUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling acceptUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/accept/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * addCaInterest\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling addCaInterestUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling addCaInterestUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/add-ca-interest/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * assignRO\n     * \n     * @param applToRos applToRos\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applToRos === null || applToRos === undefined) {\n            throw new Error('Required parameter applToRos was null or undefined when calling assignROUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling assignROUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/assign-ro/${encodeURIComponent(String(userId))}`,\n            applToRos,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * closeReferral\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling closeReferralUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling closeReferralUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/close-referral/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getCurrentRefPssCode\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCurrentRefPssCodeUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getCurrentRefPssCodeUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getCurrentRefPssCodeUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getCurrentRefPssCodeUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getCurrentRefPssCodeUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/current-ref-pss-code/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getPreviousPdCa\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPreviousPdCaUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPreviousPdCaUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPreviousPdCaUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPreviousPdCaUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getPreviousPdCaUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/previous-pd-ca/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReferralActionHistory\n     * \n     * @param applId applId\n     * @param orderBy orderBy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getReferralActionHistoryUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (orderBy !== undefined && orderBy !== null) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral-action-history/${encodeURIComponent(String(applId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReopenPssCode\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReopenPssCodeUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReopenPssCodeUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReopenPssCodeUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReopenPssCodeUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getReopenPssCodeUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/reopen-pss-code/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getReopenPssDescription\n     * \n     * @param applId applId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReopenPssDescriptionUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getReopenPssDescriptionUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getReopenPssDescriptionUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getReopenPssDescriptionUsingGET(applId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling getReopenPssDescriptionUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/reopen-pss-description/${encodeURIComponent(String(applId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * refer\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling referUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling referUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/refer/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * rejectReferral\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling rejectReferralUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling rejectReferralUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/reject-referral/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * releaseDualSpclCase\n     * \n     * @param npnId npnId\n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npnId === null || npnId === undefined) {\n            throw new Error('Required parameter npnId was null or undefined when calling releaseDualSpclCaseUsingPOST.');\n        }\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling releaseDualSpclCaseUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling releaseDualSpclCaseUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/release-dual-spcl-case/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * releaseDual\n     * \n     * @param npnId npnId\n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npnId === null || npnId === undefined) {\n            throw new Error('Required parameter npnId was null or undefined when calling releaseDualUsingPOST.');\n        }\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling releaseDualUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling releaseDualUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/release-dual/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * removeCaInterest\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling removeCaInterestUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling removeCaInterestUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/remove-ca-interest/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * reopenReferral\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling reopenReferralUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling reopenReferralUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/reopen-referral/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * transfer\n     * \n     * @param isXfer isXfer\n     * @param npeId npeId\n     * @param transfers transfers\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (isXfer === null || isXfer === undefined) {\n            throw new Error('Required parameter isXfer was null or undefined when calling transferUsingPOST.');\n        }\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling transferUsingPOST.');\n        }\n\n        if (transfers === null || transfers === undefined) {\n            throw new Error('Required parameter transfers was null or undefined when calling transferUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling transferUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/pd-assignment/transfer/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npeId))}/${encodeURIComponent(String(isXfer))}`,\n            transfers,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * transfer\n     * \n     * @param npnId npnId\n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npnId === null || npnId === undefined) {\n            throw new Error('Required parameter npnId was null or undefined when calling transferUsingPOST1.');\n        }\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling transferUsingPOST1.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling transferUsingPOST1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/transfer/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * unrefer\n     * \n     * @param referrals referrals\n     * @param userId userId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (referrals === null || referrals === undefined) {\n            throw new Error('Required parameter referrals was null or undefined when calling unreferUsingPOST.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling unreferUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/api/v1/referral/unrefer/${encodeURIComponent(String(userId))}`,\n            referrals,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * validateReferralAction\n     * \n     * @param action action\n     * @param applId applId\n     * @param userNpnId userNpnId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (action === null || action === undefined) {\n            throw new Error('Required parameter action was null or undefined when calling validateReferralActionUsingGET.');\n        }\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling validateReferralActionUsingGET.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (action !== undefined && action !== null) {\n            queryParameters = queryParameters.set('action', <any>action);\n        }\n        if (applId) {\n            applId.forEach((element) => {\n                queryParameters = queryParameters.append('applId', <any>element);\n            })\n        }\n        if (userNpnId !== undefined && userNpnId !== null) {\n            queryParameters = queryParameters.set('userNpnId', <any>userNpnId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/referral/validation`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * validateTransferGrantAction\n     * \n     * @param applId applId\n     * @param userCayCodes userCayCodes\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (applId === null || applId === undefined) {\n            throw new Error('Required parameter applId was null or undefined when calling validateTransferGrantActionUsingGET.');\n        }\n\n        if (userCayCodes === null || userCayCodes === undefined) {\n            throw new Error('Required parameter userCayCodes was null or undefined when calling validateTransferGrantActionUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (applId) {\n            applId.forEach((element) => {\n                queryParameters = queryParameters.append('applId', <any>element);\n            })\n        }\n        if (userCayCodes) {\n            userCayCodes.forEach((element) => {\n                queryParameters = queryParameters.append('userCayCodes', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/transferGrants/validation`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class RoAssignmentControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getActiveROList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getActiveROListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getActiveROListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getActiveROListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getActiveROListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ro-list/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getDefaultRO\n     * \n     * @param isDefaultRO isDefaultRO\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDefaultROUsingGET(isDefaultRO: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getDefaultROUsingGET(isDefaultRO: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getDefaultROUsingGET(isDefaultRO: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getDefaultROUsingGET(isDefaultRO: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (isDefaultRO === null || isDefaultRO === undefined) {\n            throw new Error('Required parameter isDefaultRO was null or undefined when calling getDefaultROUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ro-assignment-rules/${encodeURIComponent(String(isDefaultRO))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getRoAssignmentRulesList\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRoAssignmentRulesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getRoAssignmentRulesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getRoAssignmentRulesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getRoAssignmentRulesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/ro-assignment-rules/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * inactivateAllRoAssignments\n     * \n     * @param roNpeId roNpeId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public inactivateAllRoAssignmentsUsingPATCH(roNpeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public inactivateAllRoAssignmentsUsingPATCH(roNpeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public inactivateAllRoAssignmentsUsingPATCH(roNpeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public inactivateAllRoAssignmentsUsingPATCH(roNpeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (roNpeId === null || roNpeId === undefined) {\n            throw new Error('Required parameter roNpeId was null or undefined when calling inactivateAllRoAssignmentsUsingPATCH.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (roNpeId !== undefined && roNpeId !== null) {\n            queryParameters = queryParameters.set('roNpeId', <any>roNpeId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<any>(`${this.basePath}/api/v1/ro-assignment-rules/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveOrUpdateDefaultRo\n     * \n     * @param defaultRoNpeId defaultRoNpeId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveOrUpdateDefaultRoUsingPUT(defaultRoNpeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveOrUpdateDefaultRoUsingPUT(defaultRoNpeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveOrUpdateDefaultRoUsingPUT(defaultRoNpeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveOrUpdateDefaultRoUsingPUT(defaultRoNpeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (defaultRoNpeId === null || defaultRoNpeId === undefined) {\n            throw new Error('Required parameter defaultRoNpeId was null or undefined when calling saveOrUpdateDefaultRoUsingPUT.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (defaultRoNpeId !== undefined && defaultRoNpeId !== null) {\n            queryParameters = queryParameters.set('defaultRoNpeId', <any>defaultRoNpeId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/ro-assignment-rules/`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * saveRoAssignment\n     * \n     * @param npeId npeId\n     * @param userId userId\n     * @param mechList mechList[]\n     * @param rfaList rfaList[]\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveRoAssignmentUsingPUT(npeId: string, userId: string, mechList?: Array<string>, rfaList?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public saveRoAssignmentUsingPUT(npeId: string, userId: string, mechList?: Array<string>, rfaList?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public saveRoAssignmentUsingPUT(npeId: string, userId: string, mechList?: Array<string>, rfaList?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public saveRoAssignmentUsingPUT(npeId: string, userId: string, mechList?: Array<string>, rfaList?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (npeId === null || npeId === undefined) {\n            throw new Error('Required parameter npeId was null or undefined when calling saveRoAssignmentUsingPUT.');\n        }\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling saveRoAssignmentUsingPUT.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (mechList) {\n            mechList.forEach((element) => {\n                queryParameters = queryParameters.append('mechList[]', <any>element);\n            })\n        }\n        if (rfaList) {\n            rfaList.forEach((element) => {\n                queryParameters = queryParameters.append('rfaList[]', <any>element);\n            })\n        }\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<any>(`${this.basePath}/api/v1/ro-assignments/${encodeURIComponent(String(npeId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { SecurityCredentials } from '../model/securityCredentials';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class UserControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getUsers\n     * \n     * @param activeFlag activeFlag\n     * @param term term\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsersUsingGET(activeFlag?: boolean, term?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getUsersUsingGET(activeFlag?: boolean, term?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getUsersUsingGET(activeFlag?: boolean, term?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getUsersUsingGET(activeFlag?: boolean, term?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (activeFlag !== undefined && activeFlag !== null) {\n            queryParameters = queryParameters.set('activeFlag', <any>activeFlag);\n        }\n        if (term !== undefined && term !== null) {\n            queryParameters = queryParameters.set('term', <any>term);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/api/v1/nci-people/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingDELETE(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingDELETE(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingDELETE(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingDELETE(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingGET(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingHEAD(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingHEAD(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingHEAD(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingHEAD(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.head<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingOPTIONS(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingOPTIONS(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingOPTIONS(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingOPTIONS(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.options<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingPATCH(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingPATCH(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingPATCH(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingPATCH(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.patch<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingPOST(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingPOST(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingPOST(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingPOST(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * user\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userUsingPUT(observe?: 'body', reportProgress?: boolean): Observable<SecurityCredentials>;\n    public userUsingPUT(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecurityCredentials>>;\n    public userUsingPUT(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecurityCredentials>>;\n    public userUsingPUT(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<SecurityCredentials>(`${this.basePath}/api/v1/user`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ModelAndView } from '../model/modelAndView';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class WorkbenchControllerService {\n\n    protected basePath = 'https://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * getWorkbenchReferralActivityApplet\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWorkbenchReferralActivityAppletUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;\n    public getWorkbenchReferralActivityAppletUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;\n    public getWorkbenchReferralActivityAppletUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;\n    public getWorkbenchReferralActivityAppletUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml',\n            'text/html'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<ModelAndView>(`${this.basePath}/api/v1/workbench/referral-activity-applet`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * getWorkbenchReferralApplet\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWorkbenchReferralAppletUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;\n    public getWorkbenchReferralAppletUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;\n    public getWorkbenchReferralAppletUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;\n    public getWorkbenchReferralAppletUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml',\n            'text/html'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<ModelAndView>(`${this.basePath}/api/v1/workbench/referral-applet`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './activitiesCodeController.service';\nimport { ActivitiesCodeControllerService } from './activitiesCodeController.service';\nexport * from './apiQueueEntity.service';\nimport { ApiQueueEntityService } from './apiQueueEntity.service';\nexport * from './appNavigationTController.service';\nimport { AppNavigationTControllerService } from './appNavigationTController.service';\nexport * from './appNavigationTEntity.service';\nimport { AppNavigationTEntityService } from './appNavigationTEntity.service';\nexport * from './araController.service';\nimport { AraControllerService } from './araController.service';\nexport * from './araReasonsController.service';\nimport { AraReasonsControllerService } from './araReasonsController.service';\nexport * from './boardsController.service';\nimport { BoardsControllerService } from './boardsController.service';\nexport * from './cancerActivityController.service';\nimport { CancerActivityControllerService } from './cancerActivityController.service';\nexport * from './cancerActivityRolesController.service';\nimport { CancerActivityRolesControllerService } from './cancerActivityRolesController.service';\nexport * from './cgRefCodController.service';\nimport { CgRefCodControllerService } from './cgRefCodController.service';\nexport * from './emController.service';\nimport { EmControllerService } from './emController.service';\nexport * from './exportController.service';\nimport { ExportControllerService } from './exportController.service';\nexport * from './gwbLinksController.service';\nimport { GwbLinksControllerService } from './gwbLinksController.service';\nexport * from './i2eUserActiveRolesController.service';\nimport { I2eUserActiveRolesControllerService } from './i2eUserActiveRolesController.service';\nexport * from './icDataController.service';\nimport { IcDataControllerService } from './icDataController.service';\nexport * from './jasperReportController.service';\nimport { JasperReportControllerService } from './jasperReportController.service';\nexport * from './lookupsController.service';\nimport { LookupsControllerService } from './lookupsController.service';\nexport * from './nciReferralGrantsController.service';\nimport { NciReferralGrantsControllerService } from './nciReferralGrantsController.service';\nexport * from './paylineCertificationsTEntity.service';\nimport { PaylineCertificationsTEntityService } from './paylineCertificationsTEntity.service';\nexport * from './paylineController.service';\nimport { PaylineControllerService } from './paylineController.service';\nexport * from './paylineStatusesTEntity.service';\nimport { PaylineStatusesTEntityService } from './paylineStatusesTEntity.service';\nexport * from './paylistController.service';\nimport { PaylistControllerService } from './paylistController.service';\nexport * from './paylistGrantsController.service';\nimport { PaylistGrantsControllerService } from './paylistGrantsController.service';\nexport * from './paylistUtilController.service';\nimport { PaylistUtilControllerService } from './paylistUtilController.service';\nexport * from './pdController.service';\nimport { PdControllerService } from './pdController.service';\nexport * from './propertiesController.service';\nimport { PropertiesControllerService } from './propertiesController.service';\nexport * from './referralMessagesController.service';\nimport { ReferralMessagesControllerService } from './referralMessagesController.service';\nexport * from './referralMessagesTEntity.service';\nimport { ReferralMessagesTEntityService } from './referralMessagesTEntity.service';\nexport * from './referralSearchCriteriaController.service';\nimport { ReferralSearchCriteriaControllerService } from './referralSearchCriteriaController.service';\nexport * from './referralWorkflowController.service';\nimport { ReferralWorkflowControllerService } from './referralWorkflowController.service';\nexport * from './roAssignmentController.service';\nimport { RoAssignmentControllerService } from './roAssignmentController.service';\nexport * from './userController.service';\nimport { UserControllerService } from './userController.service';\nexport * from './workbenchController.service';\nimport { WorkbenchControllerService } from './workbenchController.service';\nexport const APIS = [ActivitiesCodeControllerService, ApiQueueEntityService, AppNavigationTControllerService, AppNavigationTEntityService, AraControllerService, AraReasonsControllerService, BoardsControllerService, CancerActivityControllerService, CancerActivityRolesControllerService, CgRefCodControllerService, EmControllerService, ExportControllerService, GwbLinksControllerService, I2eUserActiveRolesControllerService, IcDataControllerService, JasperReportControllerService, LookupsControllerService, NciReferralGrantsControllerService, PaylineCertificationsTEntityService, PaylineControllerService, PaylineStatusesTEntityService, PaylistControllerService, PaylistGrantsControllerService, PaylistUtilControllerService, PdControllerService, PropertiesControllerService, ReferralMessagesControllerService, ReferralMessagesTEntityService, ReferralSearchCriteriaControllerService, ReferralWorkflowControllerService, RoAssignmentControllerService, UserControllerService, WorkbenchControllerService];\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { View } from './view';\n\n\nexport interface ModelAndView { \n    empty?: boolean;\n    model?: any;\n    modelMap?: { [key: string]: any; };\n    reference?: boolean;\n    status?: ModelAndView.StatusEnum;\n    view?: View;\n    viewName?: string;\n}\nexport namespace ModelAndView {\n    export type StatusEnum = 'ACCEPTED' | 'ALREADY_REPORTED' | 'BAD_GATEWAY' | 'BAD_REQUEST' | 'BANDWIDTH_LIMIT_EXCEEDED' | 'CHECKPOINT' | 'CONFLICT' | 'CONTINUE' | 'CREATED' | 'DESTINATION_LOCKED' | 'EXPECTATION_FAILED' | 'FAILED_DEPENDENCY' | 'FORBIDDEN' | 'FOUND' | 'GATEWAY_TIMEOUT' | 'GONE' | 'HTTP_VERSION_NOT_SUPPORTED' | 'IM_USED' | 'INSUFFICIENT_SPACE_ON_RESOURCE' | 'INSUFFICIENT_STORAGE' | 'INTERNAL_SERVER_ERROR' | 'I_AM_A_TEAPOT' | 'LENGTH_REQUIRED' | 'LOCKED' | 'LOOP_DETECTED' | 'METHOD_FAILURE' | 'METHOD_NOT_ALLOWED' | 'MOVED_PERMANENTLY' | 'MOVED_TEMPORARILY' | 'MULTIPLE_CHOICES' | 'MULTI_STATUS' | 'NETWORK_AUTHENTICATION_REQUIRED' | 'NON_AUTHORITATIVE_INFORMATION' | 'NOT_ACCEPTABLE' | 'NOT_EXTENDED' | 'NOT_FOUND' | 'NOT_IMPLEMENTED' | 'NOT_MODIFIED' | 'NO_CONTENT' | 'OK' | 'PARTIAL_CONTENT' | 'PAYLOAD_TOO_LARGE' | 'PAYMENT_REQUIRED' | 'PERMANENT_REDIRECT' | 'PRECONDITION_FAILED' | 'PRECONDITION_REQUIRED' | 'PROCESSING' | 'PROXY_AUTHENTICATION_REQUIRED' | 'REQUESTED_RANGE_NOT_SATISFIABLE' | 'REQUEST_ENTITY_TOO_LARGE' | 'REQUEST_HEADER_FIELDS_TOO_LARGE' | 'REQUEST_TIMEOUT' | 'REQUEST_URI_TOO_LONG' | 'RESET_CONTENT' | 'SEE_OTHER' | 'SERVICE_UNAVAILABLE' | 'SWITCHING_PROTOCOLS' | 'TEMPORARY_REDIRECT' | 'TOO_EARLY' | 'TOO_MANY_REQUESTS' | 'UNAUTHORIZED' | 'UNAVAILABLE_FOR_LEGAL_REASONS' | 'UNPROCESSABLE_ENTITY' | 'UNSUPPORTED_MEDIA_TYPE' | 'UPGRADE_REQUIRED' | 'URI_TOO_LONG' | 'USE_PROXY' | 'VARIANT_ALSO_NEGOTIATES';\n    export const StatusEnum = {\n        ACCEPTED: 'ACCEPTED' as StatusEnum,\n        ALREADYREPORTED: 'ALREADY_REPORTED' as StatusEnum,\n        BADGATEWAY: 'BAD_GATEWAY' as StatusEnum,\n        BADREQUEST: 'BAD_REQUEST' as StatusEnum,\n        BANDWIDTHLIMITEXCEEDED: 'BANDWIDTH_LIMIT_EXCEEDED' as StatusEnum,\n        CHECKPOINT: 'CHECKPOINT' as StatusEnum,\n        CONFLICT: 'CONFLICT' as StatusEnum,\n        CONTINUE: 'CONTINUE' as StatusEnum,\n        CREATED: 'CREATED' as StatusEnum,\n        DESTINATIONLOCKED: 'DESTINATION_LOCKED' as StatusEnum,\n        EXPECTATIONFAILED: 'EXPECTATION_FAILED' as StatusEnum,\n        FAILEDDEPENDENCY: 'FAILED_DEPENDENCY' as StatusEnum,\n        FORBIDDEN: 'FORBIDDEN' as StatusEnum,\n        FOUND: 'FOUND' as StatusEnum,\n        GATEWAYTIMEOUT: 'GATEWAY_TIMEOUT' as StatusEnum,\n        GONE: 'GONE' as StatusEnum,\n        HTTPVERSIONNOTSUPPORTED: 'HTTP_VERSION_NOT_SUPPORTED' as StatusEnum,\n        IMUSED: 'IM_USED' as StatusEnum,\n        INSUFFICIENTSPACEONRESOURCE: 'INSUFFICIENT_SPACE_ON_RESOURCE' as StatusEnum,\n        INSUFFICIENTSTORAGE: 'INSUFFICIENT_STORAGE' as StatusEnum,\n        INTERNALSERVERERROR: 'INTERNAL_SERVER_ERROR' as StatusEnum,\n        IAMATEAPOT: 'I_AM_A_TEAPOT' as StatusEnum,\n        LENGTHREQUIRED: 'LENGTH_REQUIRED' as StatusEnum,\n        LOCKED: 'LOCKED' as StatusEnum,\n        LOOPDETECTED: 'LOOP_DETECTED' as StatusEnum,\n        METHODFAILURE: 'METHOD_FAILURE' as StatusEnum,\n        METHODNOTALLOWED: 'METHOD_NOT_ALLOWED' as StatusEnum,\n        MOVEDPERMANENTLY: 'MOVED_PERMANENTLY' as StatusEnum,\n        MOVEDTEMPORARILY: 'MOVED_TEMPORARILY' as StatusEnum,\n        MULTIPLECHOICES: 'MULTIPLE_CHOICES' as StatusEnum,\n        MULTISTATUS: 'MULTI_STATUS' as StatusEnum,\n        NETWORKAUTHENTICATIONREQUIRED: 'NETWORK_AUTHENTICATION_REQUIRED' as StatusEnum,\n        NONAUTHORITATIVEINFORMATION: 'NON_AUTHORITATIVE_INFORMATION' as StatusEnum,\n        NOTACCEPTABLE: 'NOT_ACCEPTABLE' as StatusEnum,\n        NOTEXTENDED: 'NOT_EXTENDED' as StatusEnum,\n        NOTFOUND: 'NOT_FOUND' as StatusEnum,\n        NOTIMPLEMENTED: 'NOT_IMPLEMENTED' as StatusEnum,\n        NOTMODIFIED: 'NOT_MODIFIED' as StatusEnum,\n        NOCONTENT: 'NO_CONTENT' as StatusEnum,\n        OK: 'OK' as StatusEnum,\n        PARTIALCONTENT: 'PARTIAL_CONTENT' as StatusEnum,\n        PAYLOADTOOLARGE: 'PAYLOAD_TOO_LARGE' as StatusEnum,\n        PAYMENTREQUIRED: 'PAYMENT_REQUIRED' as StatusEnum,\n        PERMANENTREDIRECT: 'PERMANENT_REDIRECT' as StatusEnum,\n        PRECONDITIONFAILED: 'PRECONDITION_FAILED' as StatusEnum,\n        PRECONDITIONREQUIRED: 'PRECONDITION_REQUIRED' as StatusEnum,\n        PROCESSING: 'PROCESSING' as StatusEnum,\n        PROXYAUTHENTICATIONREQUIRED: 'PROXY_AUTHENTICATION_REQUIRED' as StatusEnum,\n        REQUESTEDRANGENOTSATISFIABLE: 'REQUESTED_RANGE_NOT_SATISFIABLE' as StatusEnum,\n        REQUESTENTITYTOOLARGE: 'REQUEST_ENTITY_TOO_LARGE' as StatusEnum,\n        REQUESTHEADERFIELDSTOOLARGE: 'REQUEST_HEADER_FIELDS_TOO_LARGE' as StatusEnum,\n        REQUESTTIMEOUT: 'REQUEST_TIMEOUT' as StatusEnum,\n        REQUESTURITOOLONG: 'REQUEST_URI_TOO_LONG' as StatusEnum,\n        RESETCONTENT: 'RESET_CONTENT' as StatusEnum,\n        SEEOTHER: 'SEE_OTHER' as StatusEnum,\n        SERVICEUNAVAILABLE: 'SERVICE_UNAVAILABLE' as StatusEnum,\n        SWITCHINGPROTOCOLS: 'SWITCHING_PROTOCOLS' as StatusEnum,\n        TEMPORARYREDIRECT: 'TEMPORARY_REDIRECT' as StatusEnum,\n        TOOEARLY: 'TOO_EARLY' as StatusEnum,\n        TOOMANYREQUESTS: 'TOO_MANY_REQUESTS' as StatusEnum,\n        UNAUTHORIZED: 'UNAUTHORIZED' as StatusEnum,\n        UNAVAILABLEFORLEGALREASONS: 'UNAVAILABLE_FOR_LEGAL_REASONS' as StatusEnum,\n        UNPROCESSABLEENTITY: 'UNPROCESSABLE_ENTITY' as StatusEnum,\n        UNSUPPORTEDMEDIATYPE: 'UNSUPPORTED_MEDIA_TYPE' as StatusEnum,\n        UPGRADEREQUIRED: 'UPGRADE_REQUIRED' as StatusEnum,\n        URITOOLONG: 'URI_TOO_LONG' as StatusEnum,\n        USEPROXY: 'USE_PROXY' as StatusEnum,\n        VARIANTALSONEGOTIATES: 'VARIANT_ALSO_NEGOTIATES' as StatusEnum\n    };\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { PccDetails } from './pccDetails';\n\n\nexport interface Payload { \n    businessErrorCode?: string;\n    businessErrorMessage?: string;\n    pccDetails?: PccDetails;\n    responseBody?: string;\n    status?: Payload.StatusEnum;\n    statusCode?: number;\n}\nexport namespace Payload {\n    export type StatusEnum = 'ACCEPTED' | 'ALREADY_REPORTED' | 'BAD_GATEWAY' | 'BAD_REQUEST' | 'BANDWIDTH_LIMIT_EXCEEDED' | 'CHECKPOINT' | 'CONFLICT' | 'CONTINUE' | 'CREATED' | 'DESTINATION_LOCKED' | 'EXPECTATION_FAILED' | 'FAILED_DEPENDENCY' | 'FORBIDDEN' | 'FOUND' | 'GATEWAY_TIMEOUT' | 'GONE' | 'HTTP_VERSION_NOT_SUPPORTED' | 'IM_USED' | 'INSUFFICIENT_SPACE_ON_RESOURCE' | 'INSUFFICIENT_STORAGE' | 'INTERNAL_SERVER_ERROR' | 'I_AM_A_TEAPOT' | 'LENGTH_REQUIRED' | 'LOCKED' | 'LOOP_DETECTED' | 'METHOD_FAILURE' | 'METHOD_NOT_ALLOWED' | 'MOVED_PERMANENTLY' | 'MOVED_TEMPORARILY' | 'MULTIPLE_CHOICES' | 'MULTI_STATUS' | 'NETWORK_AUTHENTICATION_REQUIRED' | 'NON_AUTHORITATIVE_INFORMATION' | 'NOT_ACCEPTABLE' | 'NOT_EXTENDED' | 'NOT_FOUND' | 'NOT_IMPLEMENTED' | 'NOT_MODIFIED' | 'NO_CONTENT' | 'OK' | 'PARTIAL_CONTENT' | 'PAYLOAD_TOO_LARGE' | 'PAYMENT_REQUIRED' | 'PERMANENT_REDIRECT' | 'PRECONDITION_FAILED' | 'PRECONDITION_REQUIRED' | 'PROCESSING' | 'PROXY_AUTHENTICATION_REQUIRED' | 'REQUESTED_RANGE_NOT_SATISFIABLE' | 'REQUEST_ENTITY_TOO_LARGE' | 'REQUEST_HEADER_FIELDS_TOO_LARGE' | 'REQUEST_TIMEOUT' | 'REQUEST_URI_TOO_LONG' | 'RESET_CONTENT' | 'SEE_OTHER' | 'SERVICE_UNAVAILABLE' | 'SWITCHING_PROTOCOLS' | 'TEMPORARY_REDIRECT' | 'TOO_EARLY' | 'TOO_MANY_REQUESTS' | 'UNAUTHORIZED' | 'UNAVAILABLE_FOR_LEGAL_REASONS' | 'UNPROCESSABLE_ENTITY' | 'UNSUPPORTED_MEDIA_TYPE' | 'UPGRADE_REQUIRED' | 'URI_TOO_LONG' | 'USE_PROXY' | 'VARIANT_ALSO_NEGOTIATES';\n    export const StatusEnum = {\n        ACCEPTED: 'ACCEPTED' as StatusEnum,\n        ALREADYREPORTED: 'ALREADY_REPORTED' as StatusEnum,\n        BADGATEWAY: 'BAD_GATEWAY' as StatusEnum,\n        BADREQUEST: 'BAD_REQUEST' as StatusEnum,\n        BANDWIDTHLIMITEXCEEDED: 'BANDWIDTH_LIMIT_EXCEEDED' as StatusEnum,\n        CHECKPOINT: 'CHECKPOINT' as StatusEnum,\n        CONFLICT: 'CONFLICT' as StatusEnum,\n        CONTINUE: 'CONTINUE' as StatusEnum,\n        CREATED: 'CREATED' as StatusEnum,\n        DESTINATIONLOCKED: 'DESTINATION_LOCKED' as StatusEnum,\n        EXPECTATIONFAILED: 'EXPECTATION_FAILED' as StatusEnum,\n        FAILEDDEPENDENCY: 'FAILED_DEPENDENCY' as StatusEnum,\n        FORBIDDEN: 'FORBIDDEN' as StatusEnum,\n        FOUND: 'FOUND' as StatusEnum,\n        GATEWAYTIMEOUT: 'GATEWAY_TIMEOUT' as StatusEnum,\n        GONE: 'GONE' as StatusEnum,\n        HTTPVERSIONNOTSUPPORTED: 'HTTP_VERSION_NOT_SUPPORTED' as StatusEnum,\n        IMUSED: 'IM_USED' as StatusEnum,\n        INSUFFICIENTSPACEONRESOURCE: 'INSUFFICIENT_SPACE_ON_RESOURCE' as StatusEnum,\n        INSUFFICIENTSTORAGE: 'INSUFFICIENT_STORAGE' as StatusEnum,\n        INTERNALSERVERERROR: 'INTERNAL_SERVER_ERROR' as StatusEnum,\n        IAMATEAPOT: 'I_AM_A_TEAPOT' as StatusEnum,\n        LENGTHREQUIRED: 'LENGTH_REQUIRED' as StatusEnum,\n        LOCKED: 'LOCKED' as StatusEnum,\n        LOOPDETECTED: 'LOOP_DETECTED' as StatusEnum,\n        METHODFAILURE: 'METHOD_FAILURE' as StatusEnum,\n        METHODNOTALLOWED: 'METHOD_NOT_ALLOWED' as StatusEnum,\n        MOVEDPERMANENTLY: 'MOVED_PERMANENTLY' as StatusEnum,\n        MOVEDTEMPORARILY: 'MOVED_TEMPORARILY' as StatusEnum,\n        MULTIPLECHOICES: 'MULTIPLE_CHOICES' as StatusEnum,\n        MULTISTATUS: 'MULTI_STATUS' as StatusEnum,\n        NETWORKAUTHENTICATIONREQUIRED: 'NETWORK_AUTHENTICATION_REQUIRED' as StatusEnum,\n        NONAUTHORITATIVEINFORMATION: 'NON_AUTHORITATIVE_INFORMATION' as StatusEnum,\n        NOTACCEPTABLE: 'NOT_ACCEPTABLE' as StatusEnum,\n        NOTEXTENDED: 'NOT_EXTENDED' as StatusEnum,\n        NOTFOUND: 'NOT_FOUND' as StatusEnum,\n        NOTIMPLEMENTED: 'NOT_IMPLEMENTED' as StatusEnum,\n        NOTMODIFIED: 'NOT_MODIFIED' as StatusEnum,\n        NOCONTENT: 'NO_CONTENT' as StatusEnum,\n        OK: 'OK' as StatusEnum,\n        PARTIALCONTENT: 'PARTIAL_CONTENT' as StatusEnum,\n        PAYLOADTOOLARGE: 'PAYLOAD_TOO_LARGE' as StatusEnum,\n        PAYMENTREQUIRED: 'PAYMENT_REQUIRED' as StatusEnum,\n        PERMANENTREDIRECT: 'PERMANENT_REDIRECT' as StatusEnum,\n        PRECONDITIONFAILED: 'PRECONDITION_FAILED' as StatusEnum,\n        PRECONDITIONREQUIRED: 'PRECONDITION_REQUIRED' as StatusEnum,\n        PROCESSING: 'PROCESSING' as StatusEnum,\n        PROXYAUTHENTICATIONREQUIRED: 'PROXY_AUTHENTICATION_REQUIRED' as StatusEnum,\n        REQUESTEDRANGENOTSATISFIABLE: 'REQUESTED_RANGE_NOT_SATISFIABLE' as StatusEnum,\n        REQUESTENTITYTOOLARGE: 'REQUEST_ENTITY_TOO_LARGE' as StatusEnum,\n        REQUESTHEADERFIELDSTOOLARGE: 'REQUEST_HEADER_FIELDS_TOO_LARGE' as StatusEnum,\n        REQUESTTIMEOUT: 'REQUEST_TIMEOUT' as StatusEnum,\n        REQUESTURITOOLONG: 'REQUEST_URI_TOO_LONG' as StatusEnum,\n        RESETCONTENT: 'RESET_CONTENT' as StatusEnum,\n        SEEOTHER: 'SEE_OTHER' as StatusEnum,\n        SERVICEUNAVAILABLE: 'SERVICE_UNAVAILABLE' as StatusEnum,\n        SWITCHINGPROTOCOLS: 'SWITCHING_PROTOCOLS' as StatusEnum,\n        TEMPORARYREDIRECT: 'TEMPORARY_REDIRECT' as StatusEnum,\n        TOOEARLY: 'TOO_EARLY' as StatusEnum,\n        TOOMANYREQUESTS: 'TOO_MANY_REQUESTS' as StatusEnum,\n        UNAUTHORIZED: 'UNAUTHORIZED' as StatusEnum,\n        UNAVAILABLEFORLEGALREASONS: 'UNAVAILABLE_FOR_LEGAL_REASONS' as StatusEnum,\n        UNPROCESSABLEENTITY: 'UNPROCESSABLE_ENTITY' as StatusEnum,\n        UNSUPPORTEDMEDIATYPE: 'UNSUPPORTED_MEDIA_TYPE' as StatusEnum,\n        UPGRADEREQUIRED: 'UPGRADE_REQUIRED' as StatusEnum,\n        URITOOLONG: 'URI_TOO_LONG' as StatusEnum,\n        USEPROXY: 'USE_PROXY' as StatusEnum,\n        VARIANTALSONEGOTIATES: 'VARIANT_ALSO_NEGOTIATES' as StatusEnum\n    };\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ResponseEntity { \n    body?: any;\n    statusCode?: ResponseEntity.StatusCodeEnum;\n    statusCodeValue?: number;\n}\nexport namespace ResponseEntity {\n    export type StatusCodeEnum = 'ACCEPTED' | 'ALREADY_REPORTED' | 'BAD_GATEWAY' | 'BAD_REQUEST' | 'BANDWIDTH_LIMIT_EXCEEDED' | 'CHECKPOINT' | 'CONFLICT' | 'CONTINUE' | 'CREATED' | 'DESTINATION_LOCKED' | 'EXPECTATION_FAILED' | 'FAILED_DEPENDENCY' | 'FORBIDDEN' | 'FOUND' | 'GATEWAY_TIMEOUT' | 'GONE' | 'HTTP_VERSION_NOT_SUPPORTED' | 'IM_USED' | 'INSUFFICIENT_SPACE_ON_RESOURCE' | 'INSUFFICIENT_STORAGE' | 'INTERNAL_SERVER_ERROR' | 'I_AM_A_TEAPOT' | 'LENGTH_REQUIRED' | 'LOCKED' | 'LOOP_DETECTED' | 'METHOD_FAILURE' | 'METHOD_NOT_ALLOWED' | 'MOVED_PERMANENTLY' | 'MOVED_TEMPORARILY' | 'MULTIPLE_CHOICES' | 'MULTI_STATUS' | 'NETWORK_AUTHENTICATION_REQUIRED' | 'NON_AUTHORITATIVE_INFORMATION' | 'NOT_ACCEPTABLE' | 'NOT_EXTENDED' | 'NOT_FOUND' | 'NOT_IMPLEMENTED' | 'NOT_MODIFIED' | 'NO_CONTENT' | 'OK' | 'PARTIAL_CONTENT' | 'PAYLOAD_TOO_LARGE' | 'PAYMENT_REQUIRED' | 'PERMANENT_REDIRECT' | 'PRECONDITION_FAILED' | 'PRECONDITION_REQUIRED' | 'PROCESSING' | 'PROXY_AUTHENTICATION_REQUIRED' | 'REQUESTED_RANGE_NOT_SATISFIABLE' | 'REQUEST_ENTITY_TOO_LARGE' | 'REQUEST_HEADER_FIELDS_TOO_LARGE' | 'REQUEST_TIMEOUT' | 'REQUEST_URI_TOO_LONG' | 'RESET_CONTENT' | 'SEE_OTHER' | 'SERVICE_UNAVAILABLE' | 'SWITCHING_PROTOCOLS' | 'TEMPORARY_REDIRECT' | 'TOO_EARLY' | 'TOO_MANY_REQUESTS' | 'UNAUTHORIZED' | 'UNAVAILABLE_FOR_LEGAL_REASONS' | 'UNPROCESSABLE_ENTITY' | 'UNSUPPORTED_MEDIA_TYPE' | 'UPGRADE_REQUIRED' | 'URI_TOO_LONG' | 'USE_PROXY' | 'VARIANT_ALSO_NEGOTIATES';\n    export const StatusCodeEnum = {\n        ACCEPTED: 'ACCEPTED' as StatusCodeEnum,\n        ALREADYREPORTED: 'ALREADY_REPORTED' as StatusCodeEnum,\n        BADGATEWAY: 'BAD_GATEWAY' as StatusCodeEnum,\n        BADREQUEST: 'BAD_REQUEST' as StatusCodeEnum,\n        BANDWIDTHLIMITEXCEEDED: 'BANDWIDTH_LIMIT_EXCEEDED' as StatusCodeEnum,\n        CHECKPOINT: 'CHECKPOINT' as StatusCodeEnum,\n        CONFLICT: 'CONFLICT' as StatusCodeEnum,\n        CONTINUE: 'CONTINUE' as StatusCodeEnum,\n        CREATED: 'CREATED' as StatusCodeEnum,\n        DESTINATIONLOCKED: 'DESTINATION_LOCKED' as StatusCodeEnum,\n        EXPECTATIONFAILED: 'EXPECTATION_FAILED' as StatusCodeEnum,\n        FAILEDDEPENDENCY: 'FAILED_DEPENDENCY' as StatusCodeEnum,\n        FORBIDDEN: 'FORBIDDEN' as StatusCodeEnum,\n        FOUND: 'FOUND' as StatusCodeEnum,\n        GATEWAYTIMEOUT: 'GATEWAY_TIMEOUT' as StatusCodeEnum,\n        GONE: 'GONE' as StatusCodeEnum,\n        HTTPVERSIONNOTSUPPORTED: 'HTTP_VERSION_NOT_SUPPORTED' as StatusCodeEnum,\n        IMUSED: 'IM_USED' as StatusCodeEnum,\n        INSUFFICIENTSPACEONRESOURCE: 'INSUFFICIENT_SPACE_ON_RESOURCE' as StatusCodeEnum,\n        INSUFFICIENTSTORAGE: 'INSUFFICIENT_STORAGE' as StatusCodeEnum,\n        INTERNALSERVERERROR: 'INTERNAL_SERVER_ERROR' as StatusCodeEnum,\n        IAMATEAPOT: 'I_AM_A_TEAPOT' as StatusCodeEnum,\n        LENGTHREQUIRED: 'LENGTH_REQUIRED' as StatusCodeEnum,\n        LOCKED: 'LOCKED' as StatusCodeEnum,\n        LOOPDETECTED: 'LOOP_DETECTED' as StatusCodeEnum,\n        METHODFAILURE: 'METHOD_FAILURE' as StatusCodeEnum,\n        METHODNOTALLOWED: 'METHOD_NOT_ALLOWED' as StatusCodeEnum,\n        MOVEDPERMANENTLY: 'MOVED_PERMANENTLY' as StatusCodeEnum,\n        MOVEDTEMPORARILY: 'MOVED_TEMPORARILY' as StatusCodeEnum,\n        MULTIPLECHOICES: 'MULTIPLE_CHOICES' as StatusCodeEnum,\n        MULTISTATUS: 'MULTI_STATUS' as StatusCodeEnum,\n        NETWORKAUTHENTICATIONREQUIRED: 'NETWORK_AUTHENTICATION_REQUIRED' as StatusCodeEnum,\n        NONAUTHORITATIVEINFORMATION: 'NON_AUTHORITATIVE_INFORMATION' as StatusCodeEnum,\n        NOTACCEPTABLE: 'NOT_ACCEPTABLE' as StatusCodeEnum,\n        NOTEXTENDED: 'NOT_EXTENDED' as StatusCodeEnum,\n        NOTFOUND: 'NOT_FOUND' as StatusCodeEnum,\n        NOTIMPLEMENTED: 'NOT_IMPLEMENTED' as StatusCodeEnum,\n        NOTMODIFIED: 'NOT_MODIFIED' as StatusCodeEnum,\n        NOCONTENT: 'NO_CONTENT' as StatusCodeEnum,\n        OK: 'OK' as StatusCodeEnum,\n        PARTIALCONTENT: 'PARTIAL_CONTENT' as StatusCodeEnum,\n        PAYLOADTOOLARGE: 'PAYLOAD_TOO_LARGE' as StatusCodeEnum,\n        PAYMENTREQUIRED: 'PAYMENT_REQUIRED' as StatusCodeEnum,\n        PERMANENTREDIRECT: 'PERMANENT_REDIRECT' as StatusCodeEnum,\n        PRECONDITIONFAILED: 'PRECONDITION_FAILED' as StatusCodeEnum,\n        PRECONDITIONREQUIRED: 'PRECONDITION_REQUIRED' as StatusCodeEnum,\n        PROCESSING: 'PROCESSING' as StatusCodeEnum,\n        PROXYAUTHENTICATIONREQUIRED: 'PROXY_AUTHENTICATION_REQUIRED' as StatusCodeEnum,\n        REQUESTEDRANGENOTSATISFIABLE: 'REQUESTED_RANGE_NOT_SATISFIABLE' as StatusCodeEnum,\n        REQUESTENTITYTOOLARGE: 'REQUEST_ENTITY_TOO_LARGE' as StatusCodeEnum,\n        REQUESTHEADERFIELDSTOOLARGE: 'REQUEST_HEADER_FIELDS_TOO_LARGE' as StatusCodeEnum,\n        REQUESTTIMEOUT: 'REQUEST_TIMEOUT' as StatusCodeEnum,\n        REQUESTURITOOLONG: 'REQUEST_URI_TOO_LONG' as StatusCodeEnum,\n        RESETCONTENT: 'RESET_CONTENT' as StatusCodeEnum,\n        SEEOTHER: 'SEE_OTHER' as StatusCodeEnum,\n        SERVICEUNAVAILABLE: 'SERVICE_UNAVAILABLE' as StatusCodeEnum,\n        SWITCHINGPROTOCOLS: 'SWITCHING_PROTOCOLS' as StatusCodeEnum,\n        TEMPORARYREDIRECT: 'TEMPORARY_REDIRECT' as StatusCodeEnum,\n        TOOEARLY: 'TOO_EARLY' as StatusCodeEnum,\n        TOOMANYREQUESTS: 'TOO_MANY_REQUESTS' as StatusCodeEnum,\n        UNAUTHORIZED: 'UNAUTHORIZED' as StatusCodeEnum,\n        UNAVAILABLEFORLEGALREASONS: 'UNAVAILABLE_FOR_LEGAL_REASONS' as StatusCodeEnum,\n        UNPROCESSABLEENTITY: 'UNPROCESSABLE_ENTITY' as StatusCodeEnum,\n        UNSUPPORTEDMEDIATYPE: 'UNSUPPORTED_MEDIA_TYPE' as StatusCodeEnum,\n        UPGRADEREQUIRED: 'UPGRADE_REQUIRED' as StatusCodeEnum,\n        URITOOLONG: 'URI_TOO_LONG' as StatusCodeEnum,\n        USEPROXY: 'USE_PROXY' as StatusCodeEnum,\n        VARIANTALSONEGOTIATES: 'VARIANT_ALSO_NEGOTIATES' as StatusCodeEnum\n    };\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * OpenAPI spec version: 1.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface TemplateVariable { \n    description?: string;\n    name?: string;\n    type?: TemplateVariable.TypeEnum;\n}\nexport namespace TemplateVariable {\n    export type TypeEnum = 'COMPOSITE_PARAM' | 'FRAGMENT' | 'PATH_VARIABLE' | 'REQUEST_PARAM' | 'REQUEST_PARAM_CONTINUED' | 'SEGMENT';\n    export const TypeEnum = {\n        COMPOSITEPARAM: 'COMPOSITE_PARAM' as TypeEnum,\n        FRAGMENT: 'FRAGMENT' as TypeEnum,\n        PATHVARIABLE: 'PATH_VARIABLE' as TypeEnum,\n        REQUESTPARAM: 'REQUEST_PARAM' as TypeEnum,\n        REQUESTPARAMCONTINUED: 'REQUEST_PARAM_CONTINUED' as TypeEnum,\n        SEGMENT: 'SEGMENT' as TypeEnum\n    };\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { ActivitiesCodeControllerService } from './api/activitiesCodeController.service';\nimport { ApiQueueEntityService } from './api/apiQueueEntity.service';\nimport { AppNavigationTControllerService } from './api/appNavigationTController.service';\nimport { AppNavigationTEntityService } from './api/appNavigationTEntity.service';\nimport { AraControllerService } from './api/araController.service';\nimport { AraReasonsControllerService } from './api/araReasonsController.service';\nimport { BoardsControllerService } from './api/boardsController.service';\nimport { CancerActivityControllerService } from './api/cancerActivityController.service';\nimport { CancerActivityRolesControllerService } from './api/cancerActivityRolesController.service';\nimport { CgRefCodControllerService } from './api/cgRefCodController.service';\nimport { EmControllerService } from './api/emController.service';\nimport { ExportControllerService } from './api/exportController.service';\nimport { GwbLinksControllerService } from './api/gwbLinksController.service';\nimport { I2eUserActiveRolesControllerService } from './api/i2eUserActiveRolesController.service';\nimport { IcDataControllerService } from './api/icDataController.service';\nimport { JasperReportControllerService } from './api/jasperReportController.service';\nimport { LookupsControllerService } from './api/lookupsController.service';\nimport { NciReferralGrantsControllerService } from './api/nciReferralGrantsController.service';\nimport { PaylineCertificationsTEntityService } from './api/paylineCertificationsTEntity.service';\nimport { PaylineControllerService } from './api/paylineController.service';\nimport { PaylineStatusesTEntityService } from './api/paylineStatusesTEntity.service';\nimport { PaylistControllerService } from './api/paylistController.service';\nimport { PaylistGrantsControllerService } from './api/paylistGrantsController.service';\nimport { PaylistUtilControllerService } from './api/paylistUtilController.service';\nimport { PdControllerService } from './api/pdController.service';\nimport { PropertiesControllerService } from './api/propertiesController.service';\nimport { ReferralMessagesControllerService } from './api/referralMessagesController.service';\nimport { ReferralMessagesTEntityService } from './api/referralMessagesTEntity.service';\nimport { ReferralSearchCriteriaControllerService } from './api/referralSearchCriteriaController.service';\nimport { ReferralWorkflowControllerService } from './api/referralWorkflowController.service';\nimport { RoAssignmentControllerService } from './api/roAssignmentController.service';\nimport { UserControllerService } from './api/userController.service';\nimport { WorkbenchControllerService } from './api/workbenchController.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    ActivitiesCodeControllerService,\n    ApiQueueEntityService,\n    AppNavigationTControllerService,\n    AppNavigationTEntityService,\n    AraControllerService,\n    AraReasonsControllerService,\n    BoardsControllerService,\n    CancerActivityControllerService,\n    CancerActivityRolesControllerService,\n    CgRefCodControllerService,\n    EmControllerService,\n    ExportControllerService,\n    GwbLinksControllerService,\n    I2eUserActiveRolesControllerService,\n    IcDataControllerService,\n    JasperReportControllerService,\n    LookupsControllerService,\n    NciReferralGrantsControllerService,\n    PaylineCertificationsTEntityService,\n    PaylineControllerService,\n    PaylineStatusesTEntityService,\n    PaylistControllerService,\n    PaylistGrantsControllerService,\n    PaylistUtilControllerService,\n    PdControllerService,\n    PropertiesControllerService,\n    ReferralMessagesControllerService,\n    ReferralMessagesTEntityService,\n    ReferralSearchCriteriaControllerService,\n    ReferralWorkflowControllerService,\n    RoAssignmentControllerService,\n    UserControllerService,\n    WorkbenchControllerService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["InjectionToken","HttpHeaders","Injectable","HttpClient","Optional","Inject","HttpUrlEncodingCodec","HttpParams","ModelAndView","Payload","ResponseEntity","TemplateVariable","NgModule","SkipSelf"],"mappings":"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"}