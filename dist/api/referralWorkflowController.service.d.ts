/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AcceptReferralActionDto } from '../model/acceptReferralActionDto';
import { AddCaInterestActionDto } from '../model/addCaInterestActionDto';
import { AssignRoActionDto } from '../model/assignRoActionDto';
import { CloseReferralActionDto } from '../model/closeReferralActionDto';
import { PdTransferActionDto } from '../model/pdTransferActionDto';
import { ReferActionDto } from '../model/referActionDto';
import { ReferralApplNotifyTDto } from '../model/referralApplNotifyTDto';
import { RejectReferralActionDto } from '../model/rejectReferralActionDto';
import { ReleaseDualActionDto } from '../model/releaseDualActionDto';
import { ReleaseDualSpclCaseActionDto } from '../model/releaseDualSpclCaseActionDto';
import { RemoveCaInterestActionDto } from '../model/removeCaInterestActionDto';
import { ReopenReferralActionDto } from '../model/reopenReferralActionDto';
import { TransferActionDto } from '../model/transferActionDto';
import { UnreferReferralActionDto } from '../model/unreferReferralActionDto';
import { Configuration } from '../configuration';
export declare class ReferralWorkflowControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * accept
     *
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    acceptUsingPOST(referrals: Array<AcceptReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * addCaInterest
     *
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    addCaInterestUsingPOST(referrals: Array<AddCaInterestActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * assignRO
     *
     * @param applToRos applToRos
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    assignROUsingPOST(applToRos: Array<AssignRoActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * closeReferral
     *
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    closeReferralUsingPOST(referrals: Array<CloseReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * deleteNotify
     *
     * @param notify notify
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteNotifyUsingPATCH(notify: Array<ReferralApplNotifyTDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteNotifyUsingPATCH(notify: Array<ReferralApplNotifyTDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteNotifyUsingPATCH(notify: Array<ReferralApplNotifyTDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getCurrentRefPssCode
     *
     * @param applId applId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCurrentRefPssCodeUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getCurrentRefPssCodeUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getCurrentRefPssCodeUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPreviousPdCa
     *
     * @param applId applId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPreviousPdCaUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPreviousPdCaUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPreviousPdCaUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getReferralActionHistory
     *
     * @param applId applId
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getReferralActionHistoryUsingGET(applId: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getReopenPssCode
     *
     * @param applId applId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getReopenPssCodeUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getReopenPssCodeUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getReopenPssCodeUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getReopenPssDescription
     *
     * @param applId applId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getReopenPssDescriptionUsingGET(applId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getReopenPssDescriptionUsingGET(applId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getReopenPssDescriptionUsingGET(applId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * notify
     *
     * @param notify notify
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    notifyUsingPOST(notify: Array<ReferralApplNotifyTDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    notifyUsingPOST(notify: Array<ReferralApplNotifyTDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    notifyUsingPOST(notify: Array<ReferralApplNotifyTDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * refer
     *
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    referUsingPOST(referrals: Array<ReferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * rejectReferral
     *
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    rejectReferralUsingPOST(referrals: Array<RejectReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * releaseDualSpclCase
     *
     * @param npnId npnId
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    releaseDualSpclCaseUsingPOST(npnId: number, referrals: Array<ReleaseDualSpclCaseActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * releaseDual
     *
     * @param npnId npnId
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    releaseDualUsingPOST(npnId: number, referrals: Array<ReleaseDualActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * removeCaInterest
     *
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    removeCaInterestUsingPOST(referrals: Array<RemoveCaInterestActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * reopenReferral
     *
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    reopenReferralUsingPOST(referrals: Array<ReopenReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * transfer
     *
     * @param isXfer isXfer
     * @param npeId npeId
     * @param transfers transfers
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    transferUsingPOST(isXfer: boolean, npeId: number, transfers: Array<PdTransferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * transfer
     *
     * @param npnId npnId
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    transferUsingPOST1(npnId: number, referrals: Array<TransferActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * unrefer
     *
     * @param referrals referrals
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    unreferUsingPOST(referrals: Array<UnreferReferralActionDto>, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * validateReferralAction
     *
     * @param action action
     * @param applId applId
     * @param userNpnId userNpnId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    validateReferralActionUsingGET(action: string, applId: Array<number>, userNpnId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * validateTransferGrantAction
     *
     * @param applId applId
     * @param userCayCodes userCayCodes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    validateTransferGrantActionUsingGET(applId: Array<number>, userCayCodes: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
