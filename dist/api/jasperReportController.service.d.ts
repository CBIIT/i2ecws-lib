/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Report } from '../model/report';
import { Configuration } from '../configuration';
export declare class JasperReportControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * generateJasperReport
     *
     * @param EXPORT_FMT EXPORT_FMT
     * @param id id
     * @param name name
     * @param promptexPReportId promptex-pReportId
     * @param promptexPSessionId promptex-pSessionId
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    generateJasperReportUsingGET(EXPORT_FMT?: string, id?: string, name?: string, promptexPReportId?: string, promptexPSessionId?: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * generateJasperReport
     *
     * @param report report
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    generateJasperReportUsingPOST(report: Report, observe?: 'body', reportProgress?: boolean): Observable<any>;
    generateJasperReportUsingPOST(report: Report, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    generateJasperReportUsingPOST(report: Report, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * generatePaylistReport
     *
     * @param paylistId paylistId
     * @param reportName reportName
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    generatePaylistReportUsingGET(paylistId: string, reportName: string, type: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
