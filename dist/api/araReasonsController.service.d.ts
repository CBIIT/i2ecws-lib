/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ActivationParamsHolder } from '../model/activationParamsHolder';
import { AraReasonsDto } from '../model/araReasonsDto';
import { Configuration } from '../configuration';
export declare class AraReasonsControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Activate or deactivate the specified ARA Reason
     *
     * @param id id
     * @param paramsHolder paramsHolder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'body', reportProgress?: boolean): Observable<any>;
    activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    activateOrDeactivateAraReasonUsingPATCH(id: string, paramsHolder: ActivationParamsHolder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getAraReasonsHistory
     *
     * @param code code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAraReasonsHistoryUsingGET(code: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getAraReasonsHistoryUsingGET(code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getAraReasonsHistoryUsingGET(code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getAraReasonsPrecedences
     *
     * @param available available
     * @param include include
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getAraReasonsPrecedencesUsingGET(available?: boolean, include?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getAraReasons
     *
     * @param activeFlag activeFlag
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getAraReasonsUsingGET(activeFlag?: boolean, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getAraReasons
     *
     * @param code code
     * @param activeFlag activeFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getEraAraReasons
     *
     * @param activeFlag activeFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getEraAraReasonsUsingGET(activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getEraAraReasons
     *
     * @param code code
     * @param activeFlag activeFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getEraAraReasonsUsingGET1(code: string, activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * saveAraReason
     *
     * @param araReasonsDto araReasonsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    saveAraReasonUsingPOST(araReasonsDto: AraReasonsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * updateAraReason
     *
     * @param araReasonsDto araReasonsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateAraReasonUsingPUT(araReasonsDto: AraReasonsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
