/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CollectionModelReferralMessagesReadT } from '../model/collectionModelReferralMessagesReadT';
import { EntityModelReferralMessagesReadT } from '../model/entityModelReferralMessagesReadT';
import { Configuration } from '../configuration';
export declare class ReferralMessagesTEntityService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * referralMessagesTMessagesRead
     *
     * @param id id
     * @param referralmessagesreadtId referralmessagesreadtId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    referralMessagesTMessagesReadUsingDELETE(id: number, referralmessagesreadtId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * referralMessagesTMessagesRead
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralMessagesTMessagesReadUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    referralMessagesTMessagesReadUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    referralMessagesTMessagesReadUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * referralMessagesTMessagesRead
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralMessagesTMessagesReadUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;
    referralMessagesTMessagesReadUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;
    referralMessagesTMessagesReadUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;
    /**
     * referralMessagesTMessagesRead
     *
     * @param id id
     * @param referralmessagesreadtId referralmessagesreadtId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe?: 'body', reportProgress?: boolean): Observable<EntityModelReferralMessagesReadT>;
    referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelReferralMessagesReadT>>;
    referralMessagesTMessagesReadUsingGET1(id: number, referralmessagesreadtId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelReferralMessagesReadT>>;
    /**
     * referralMessagesTMessagesRead
     *
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;
    referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;
    referralMessagesTMessagesReadUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;
    /**
     * referralMessagesTMessagesRead
     *
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;
    referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;
    referralMessagesTMessagesReadUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;
    /**
     * referralMessagesTMessagesRead
     *
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelReferralMessagesReadT>;
    referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelReferralMessagesReadT>>;
    referralMessagesTMessagesReadUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelReferralMessagesReadT>>;
}
