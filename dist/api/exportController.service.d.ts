/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Configuration } from '../configuration';
export declare class ExportControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * exportAraMatchReport
     *
     * @param ncab ncab
     * @param requestParams requestParams
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    exportAraMatchReportUsingGET(ncab: string, requestParams: any, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * exportCancerActivities
     *
     * @param active active
     * @param requestParams requestParams
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    exportCancerActivitiesUsingGET(active: string, requestParams: any, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    /**
     * exportCancerActivities
     *
     * @param active active
     * @param requestParams requestParams
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    exportCancerActivitiesUsingGET1(active: string, requestParams: any, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    /**
     * getCancerActivityPocs
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCancerActivityPocsUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getCancerActivityPocsUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getCancerActivityPocsUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getTransferRolePocs
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getTransferRolePocsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getTransferRolePocsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getTransferRolePocsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
