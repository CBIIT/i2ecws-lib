/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BoardsDto } from '../model/boardsDto';
import { ResponseEntity } from '../model/responseEntity';
import { Configuration } from '../configuration';
export declare class BoardsControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * findBoardByDate
     *
     * @param month month
     * @param year year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findBoardByDateUsingGET(month: string, year: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    findBoardByDateUsingGET(month: string, year: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    findBoardByDateUsingGET(month: string, year: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getBoards
     *
     * @param meetingDate meetingDate
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getBoardsUsingGET(meetingDate?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getBodDatesList
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getBodDatesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getBodDatesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getBodDatesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getCurrentWorkingBoard
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCurrentWorkingBoardUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    getCurrentWorkingBoardUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    getCurrentWorkingBoardUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    /**
     * getDefaultNcabDate
     *
     * @param date date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDefaultNcabDateUsingGET(date?: Date, observe?: 'body', reportProgress?: boolean): Observable<string>;
    getDefaultNcabDateUsingGET(date?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    getDefaultNcabDateUsingGET(date?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    /**
     * saveBoard
     *
     * @param boardsDto boardsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    saveBoardUsingPOST(boardsDto: BoardsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * updateBoard
     *
     * @param boardsDto boardsDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateBoardUsingPUT(boardsDto: BoardsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * updateMeetingDate
     *
     * @param meetingDate meetingDate
     * @param month month
     * @param year year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    updateMeetingDateUsingPATCH(meetingDate: string, month: string, year: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
}
