/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CaAssignmentRulesDto } from '../model/caAssignmentRulesDto';
import { Configuration } from '../configuration';
export declare class CancerActivityControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * deactivateCa
     *
     * @param caCode caCode
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deactivateCaUsingPATCH(caCode: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getActiveReferralCaAssignRules
     *
     * @param active active
     * @param ignore ignore
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getActiveReferralCaAssignRulesUsingGET(active: string, ignore?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getAllActiveCaList
     *
     * @param activeFlag activeFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getAllActiveCaListUsingGET(activeFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getCaAssignmentRulesHistory
     *
     * @param caCode caCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getCaAssignmentRulesHistoryUsingGET(caCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getCaByPDActiveGrantPortfolio
     *
     * @param npeId npeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getCaByPDActiveGrantPortfolioUsingGET(npeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getCaListBasedOnMechCode
     *
     * @param mechCode mechCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CaAssignmentRulesDto>>;
    getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaAssignmentRulesDto>>>;
    getCaListBasedOnMechCodeUsingGET(mechCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaAssignmentRulesDto>>>;
    /**
     * getCaListBasedOnRfa
     *
     * @param rfaPa rfaPa
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CaAssignmentRulesDto>>;
    getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CaAssignmentRulesDto>>>;
    getCaListBasedOnRfaUsingGET(rfaPa: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CaAssignmentRulesDto>>>;
    /**
     * getCaXferPortfolio
     *
     * @param pdId pdId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCaXferPortfolioUsingGET(pdId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getCaXferPortfolioUsingGET(pdId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getCaXferPortfolioUsingGET(pdId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getCancerActivityPocs
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCancerActivityPocsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getCancerActivityPocsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getCancerActivityPocsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getCasForPd
     *
     * @param pdId pdId
     * @param monitorFlag monitorFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getCasForPdUsingGET(pdId: number, monitorFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getCasForPortfolio
     *
     * @param npeId npeId
     * @param monitorFlag monitorFlag
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getCasForPortfolioUsingGET(npeId: number, monitorFlag?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getNciOrgList
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getNciOrgListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getNciOrgListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getNciOrgListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPersonDetails
     *
     * @param orgId orgId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPersonDetailsUsingGET(orgId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPersonDetailsUsingGET(orgId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPersonDetailsUsingGET(orgId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getReferralActivityCodesList
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getReferralActivityCodesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getReferralActivityCodesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getReferralActivityCodesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getRfaPaNoticeByNoticeNumber
     *
     * @param noticeNumber noticeNumber
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getRfaPaNoticeByNoticeNumberUsingGET(noticeNumber: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getRfaPaNoticesList
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getRfaPaNoticesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getRfaPaNoticesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getRfaPaNoticesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * saveCancerActivity
     *
     * @param addNew addNew
     * @param caCode caCode
     * @param caDesc caDesc
     * @param caOfcDiv caOfcDiv
     * @param caPoc caPoc
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    saveCancerActivityUsingPUT(addNew: string, caCode: string, caDesc: string, caOfcDiv: string, caPoc: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * saveMechCaAssignment
     *
     * @param mechCode mechCode
     * @param userId userId
     * @param assignedCas assignedCas[]
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    saveMechCaAssignmentUsingPOST(mechCode: string, userId: string, assignedCas?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * saveRfaPaAssignment
     *
     * @param rfaPa rfaPa
     * @param userId userId
     * @param assignedCas assignedCas[]
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    saveRfaPaAssignmentUsingPOST(rfaPa: string, userId: string, assignedCas?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
