/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { EntityModelReferralApplNotifyT } from '../model/entityModelReferralApplNotifyT';
import { Configuration } from '../configuration';
export declare class ReferralApplNotifyCommentsTEntityService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * referralApplNotifyCommentsTNotify
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralApplNotifyCommentsTNotifyUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    referralApplNotifyCommentsTNotifyUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    referralApplNotifyCommentsTNotifyUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * referralApplNotifyCommentsTNotify
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralApplNotifyCommentsTNotifyUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelReferralApplNotifyT>;
    referralApplNotifyCommentsTNotifyUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelReferralApplNotifyT>>;
    referralApplNotifyCommentsTNotifyUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelReferralApplNotifyT>>;
    /**
     * referralApplNotifyCommentsTNotify
     *
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralApplNotifyCommentsTNotifyUsingPATCH(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelReferralApplNotifyT>;
    referralApplNotifyCommentsTNotifyUsingPATCH(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelReferralApplNotifyT>>;
    referralApplNotifyCommentsTNotifyUsingPATCH(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelReferralApplNotifyT>>;
    /**
     * referralApplNotifyCommentsTNotify
     *
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralApplNotifyCommentsTNotifyUsingPOST(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelReferralApplNotifyT>;
    referralApplNotifyCommentsTNotifyUsingPOST(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelReferralApplNotifyT>>;
    referralApplNotifyCommentsTNotifyUsingPOST(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelReferralApplNotifyT>>;
    /**
     * referralApplNotifyCommentsTNotify
     *
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    referralApplNotifyCommentsTNotifyUsingPUT(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelReferralApplNotifyT>;
    referralApplNotifyCommentsTNotifyUsingPUT(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelReferralApplNotifyT>>;
    referralApplNotifyCommentsTNotifyUsingPUT(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelReferralApplNotifyT>>;
}
