/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Payload } from '../model/payload';
import { Configuration } from '../configuration';
export declare class IcDataControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * appdFundinggsAssign
     *
     * @param applId applId
     * @param directcostAmt directcostAmt
     * @param indirectcostAmt indirectcostAmt
     * @param phsOrgCode phsOrgCode
     * @param totalPeriodAmt totalPeriodAmt
     * @param transType transType
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    appdFundinggsAssignUsingPOST(applId: number, directcostAmt: number, indirectcostAmt: number, phsOrgCode: string, totalPeriodAmt: number, transType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    /**
     * awdFundingsAssign
     *
     * @param applId applId
     * @param phsOrgCode phsOrgCode
     * @param transType transType
     * @param newCan newCan
     * @param newPcc newPcc
     * @param oldCan oldCan
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    awdFundingsAssignUsingPOST(applId: number, phsOrgCode: string, transType: string, newCan?: string, newPcc?: string, oldCan?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    /**
     * fedPersonInvolvementAssign
     *
     * @param applId applId
     * @param personId personId
     * @param phsOrgCode phsOrgCode
     * @param roleTypeCode roleTypeCode
     * @param transactionType transactionType
     * @param versionCode versionCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    fedPersonInvolvementAssignUsingPOST(applId: number, personId: number, phsOrgCode: string, roleTypeCode: string, transactionType: string, versionCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    /**
     * icPccAssignMerge
     *
     * @param applId applId
     * @param phsOrgCode phsOrgCode
     * @param transactionType transactionType
     * @param newPccCode newPccCode
     * @param oldPccCode oldPccCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    icPccAssignMergeUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    /**
     * icPccAssign
     *
     * @param applId applId
     * @param phsOrgCode phsOrgCode
     * @param transactionType transactionType
     * @param newPccCode newPccCode
     * @param oldPccCode oldPccCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    icPccAssignUsingPOST(applId: number, phsOrgCode: string, transactionType: string, newPccCode?: string, oldPccCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    /**
     * mainPccAssign
     *
     * @param applId applId
     * @param overWriteFlag overWriteFlag
     * @param phsOrgCode phsOrgCode
     * @param progClassCode progClassCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    mainPccAssignUsingPOST(applId: number, overWriteFlag: string, phsOrgCode: string, progClassCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
    /**
     * pccDetails
     *
     * @param applId applId
     * @param phsOrgCode phsOrgCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'body', reportProgress?: boolean): Observable<Payload>;
    pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Payload>>;
    pccDetailsUsingPOST(applId: number, phsOrgCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Payload>>;
}
