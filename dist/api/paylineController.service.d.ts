/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PaylinesDto } from '../model/paylinesDto';
import { Configuration } from '../configuration';
export declare class PaylineControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * cancelPaylines
     *
     * @param paylineId payline_id
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    cancelPaylinesUsingPATCH(paylineId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * certifyPaylines
     *
     * @param paylinesDto paylinesDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    certifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * findCertifiedPaylines
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findCertifiedPaylinesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    findCertifiedPaylinesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    findCertifiedPaylinesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getFiscalYear
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getFiscalYearUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getFiscalYearUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getFiscalYearUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getNewPaylines
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getNewPaylinesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getNewPaylinesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getNewPaylinesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getOEFIAPaylines
     *
     * @param certifiedFlag
     * @param fy
     * @param isOefiaCertifier
     * @param userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getOEFIAPaylinesUsingGET(certifiedFlag?: string, fy?: number, isOefiaCertifier?: string, userId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylineHistoryById
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylineHistoryByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylineHistoryByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylineHistoryByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylineHistory
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylineHistoryUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylineHistoryUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylineHistoryUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylinesById
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylinesByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylinesByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylinesByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylinesByParameters
     *
     * @param fy fy
     * @param activityCode activityCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylinesByParametersUsingGET(fy: number, activityCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylines
     *
     * @param activityCode activityCode
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylinesUsingGET(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylines
     *
     * @param activityCode activityCode
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylinesUsingGET1(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * unCertifyPaylines
     *
     * @param paylinesDto paylinesDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    unCertifyPaylinesUsingPOST(paylinesDto: PaylinesDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
