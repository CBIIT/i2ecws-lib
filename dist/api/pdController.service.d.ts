/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Configuration } from '../configuration';
export declare class PdControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * getPDList
     *
     * @param active active
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPDListUsingGET(active: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPDListUsingGET(active: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPDListUsingGET(active: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPDPortfolios
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPDPortfoliosUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPDPortfoliosUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPDPortfoliosUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPdsByCayCode
     *
     * @param ca ca
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPdsByCayCodeUsingGET(ca: string, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPdsByCayCodes
     *
     * @param cas cas
     * @param orderBy orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPdsByCayCodesUsingGET(cas: Array<string>, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * isPdHasActiveGrantPortfolio
     *
     * @param npeId npeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    isPdHasActiveGrantPortfolioUsingGET(npeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
