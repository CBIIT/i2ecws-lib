/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FindPaylistCriteriaDto } from '../model/findPaylistCriteriaDto';
import { PaylistDto } from '../model/paylistDto';
import { Configuration } from '../configuration';
export declare class PaylistControllerService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * certifyPaylist
     *
     * @param paylistDto paylistDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    certifyPaylistUsingPOST(paylistDto: PaylistDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * deletePaylist
     *
     * @param paylistId paylistId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deletePaylistUsingDELETE(paylistId: number, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * findPaylists
     *
     * @param criteriaDto criteriaDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    findPaylistsUsingPOST(criteriaDto: FindPaylistCriteriaDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getDeactivated
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDeactivatedUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getDeactivatedUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getDeactivatedUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylineHistoryById
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylineHistoryByIdUsingGET1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylineHistoryByIdUsingGET1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylineHistoryByIdUsingGET1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylistFiscalYears
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylistFiscalYearsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylistFiscalYearsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylistFiscalYearsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylistGrantsById
     *
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylistGrantsByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylistGrantsByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylistGrantsByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylistGrants
     *
     * @param activityCode activityCode
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylistGrantsUsingGET(activityCode: string, fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPaylists
     *
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPaylistsUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPaylistsUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPaylistsUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getPendingGrants
     *
     * @param fy fy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPendingGrantsUsingGET(fy: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    getPendingGrantsUsingGET(fy: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getPendingGrantsUsingGET(fy: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * getUncertified
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUncertifiedUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    getUncertifiedUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    getUncertifiedUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * savePaylist
     *
     * @param paylistDto paylistDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    savePaylistUsingPOST(paylistDto: PaylistDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
