/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
export class IcDataControllerService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://localhost';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    appdFundinggsAssignUsingPOST(applId, directcostAmt, indirectcostAmt, phsOrgCode, totalPeriodAmt, transType, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }
        if (directcostAmt === null || directcostAmt === undefined) {
            throw new Error('Required parameter directcostAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }
        if (indirectcostAmt === null || indirectcostAmt === undefined) {
            throw new Error('Required parameter indirectcostAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }
        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }
        if (totalPeriodAmt === null || totalPeriodAmt === undefined) {
            throw new Error('Required parameter totalPeriodAmt was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }
        if (transType === null || transType === undefined) {
            throw new Error('Required parameter transType was null or undefined when calling appdFundinggsAssignUsingPOST.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (directcostAmt !== undefined && directcostAmt !== null) {
            queryParameters = queryParameters.set('directcostAmt', directcostAmt);
        }
        if (indirectcostAmt !== undefined && indirectcostAmt !== null) {
            queryParameters = queryParameters.set('indirectcostAmt', indirectcostAmt);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', phsOrgCode);
        }
        if (totalPeriodAmt !== undefined && totalPeriodAmt !== null) {
            queryParameters = queryParameters.set('totalPeriodAmt', totalPeriodAmt);
        }
        if (transType !== undefined && transType !== null) {
            queryParameters = queryParameters.set('transType', transType);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        return this.httpClient.post(`${this.basePath}/api/v1/appd-fundings/assign/${encodeURIComponent(String(applId))}`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    awdFundingsAssignUsingPOST(applId, phsOrgCode, transType, newCan, newPcc, oldCan, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling awdFundingsAssignUsingPOST.');
        }
        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling awdFundingsAssignUsingPOST.');
        }
        if (transType === null || transType === undefined) {
            throw new Error('Required parameter transType was null or undefined when calling awdFundingsAssignUsingPOST.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (newCan !== undefined && newCan !== null) {
            queryParameters = queryParameters.set('newCan', newCan);
        }
        if (newPcc !== undefined && newPcc !== null) {
            queryParameters = queryParameters.set('newPcc', newPcc);
        }
        if (oldCan !== undefined && oldCan !== null) {
            queryParameters = queryParameters.set('oldCan', oldCan);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', phsOrgCode);
        }
        if (transType !== undefined && transType !== null) {
            queryParameters = queryParameters.set('transType', transType);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        return this.httpClient.post(`${this.basePath}/api/v1/awd-fundings/assign/${encodeURIComponent(String(applId))}`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    fedPersonInvolvementAssignUsingPOST(applId, personId, phsOrgCode, roleTypeCode, transactionType, versionCode, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }
        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }
        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }
        if (roleTypeCode === null || roleTypeCode === undefined) {
            throw new Error('Required parameter roleTypeCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }
        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }
        if (versionCode === null || versionCode === undefined) {
            throw new Error('Required parameter versionCode was null or undefined when calling fedPersonInvolvementAssignUsingPOST.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (personId !== undefined && personId !== null) {
            queryParameters = queryParameters.set('personId', personId);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', phsOrgCode);
        }
        if (roleTypeCode !== undefined && roleTypeCode !== null) {
            queryParameters = queryParameters.set('roleTypeCode', roleTypeCode);
        }
        if (transactionType !== undefined && transactionType !== null) {
            queryParameters = queryParameters.set('transactionType', transactionType);
        }
        if (versionCode !== undefined && versionCode !== null) {
            queryParameters = queryParameters.set('versionCode', versionCode);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        return this.httpClient.post(`${this.basePath}/api/v1/fed-person-involvement/assign/${encodeURIComponent(String(applId))}`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    icPccAssignMergeUsingPOST(applId, phsOrgCode, transactionType, newPccCode, oldPccCode, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling icPccAssignMergeUsingPOST.');
        }
        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling icPccAssignMergeUsingPOST.');
        }
        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling icPccAssignMergeUsingPOST.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (newPccCode !== undefined && newPccCode !== null) {
            queryParameters = queryParameters.set('newPccCode', newPccCode);
        }
        if (oldPccCode !== undefined && oldPccCode !== null) {
            queryParameters = queryParameters.set('oldPccCode', oldPccCode);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', phsOrgCode);
        }
        if (transactionType !== undefined && transactionType !== null) {
            queryParameters = queryParameters.set('transactionType', transactionType);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        return this.httpClient.post(`${this.basePath}/api/v1/ic-pcc/assign-merge/${encodeURIComponent(String(applId))}`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    icPccAssignUsingPOST(applId, phsOrgCode, transactionType, newPccCode, oldPccCode, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling icPccAssignUsingPOST.');
        }
        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling icPccAssignUsingPOST.');
        }
        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling icPccAssignUsingPOST.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (newPccCode !== undefined && newPccCode !== null) {
            queryParameters = queryParameters.set('newPccCode', newPccCode);
        }
        if (oldPccCode !== undefined && oldPccCode !== null) {
            queryParameters = queryParameters.set('oldPccCode', oldPccCode);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', phsOrgCode);
        }
        if (transactionType !== undefined && transactionType !== null) {
            queryParameters = queryParameters.set('transactionType', transactionType);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        return this.httpClient.post(`${this.basePath}/api/v1/ic-pcc/assign/${encodeURIComponent(String(applId))}`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    mainPccAssignUsingPOST(applId, overWriteFlag, phsOrgCode, progClassCode, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling mainPccAssignUsingPOST.');
        }
        if (overWriteFlag === null || overWriteFlag === undefined) {
            throw new Error('Required parameter overWriteFlag was null or undefined when calling mainPccAssignUsingPOST.');
        }
        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling mainPccAssignUsingPOST.');
        }
        if (progClassCode === null || progClassCode === undefined) {
            throw new Error('Required parameter progClassCode was null or undefined when calling mainPccAssignUsingPOST.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (overWriteFlag !== undefined && overWriteFlag !== null) {
            queryParameters = queryParameters.set('overWriteFlag', overWriteFlag);
        }
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', phsOrgCode);
        }
        if (progClassCode !== undefined && progClassCode !== null) {
            queryParameters = queryParameters.set('progClassCode', progClassCode);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        return this.httpClient.post(`${this.basePath}/api/v1/main-pcc/assign/${encodeURIComponent(String(applId))}`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    pccDetailsUsingPOST(applId, phsOrgCode, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling pccDetailsUsingPOST.');
        }
        if (phsOrgCode === null || phsOrgCode === undefined) {
            throw new Error('Required parameter phsOrgCode was null or undefined when calling pccDetailsUsingPOST.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (phsOrgCode !== undefined && phsOrgCode !== null) {
            queryParameters = queryParameters.set('phsOrgCode', phsOrgCode);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        return this.httpClient.post(`${this.basePath}/api/v1/pcc-details/${encodeURIComponent(String(applId))}`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
IcDataControllerService.decorators = [
    { type: Injectable }
];
IcDataControllerService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,