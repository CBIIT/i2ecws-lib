/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
export class JasperReportControllerService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://localhost';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    generateJasperReportUsingGET(EXPORT_FMT, id, name, promptexPReportId, promptexPSessionId, type, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (EXPORT_FMT !== undefined && EXPORT_FMT !== null) {
            queryParameters = queryParameters.set('EXPORT_FMT', EXPORT_FMT);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', id);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', name);
        }
        if (promptexPReportId !== undefined && promptexPReportId !== null) {
            queryParameters = queryParameters.set('promptex-pReportId', promptexPReportId);
        }
        if (promptexPSessionId !== undefined && promptexPSessionId !== null) {
            queryParameters = queryParameters.set('promptex-pSessionId', promptexPSessionId);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', type);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/pdf',
            'application/vnd.ms-excel'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/generate-jasper-report`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    generateJasperReportUsingPOST(report, observe = 'body', reportProgress = false) {
        if (report === null || report === undefined) {
            throw new Error('Required parameter report was null or undefined when calling generateJasperReportUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/generate-jasper-report`, report, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    generatePaylistReportUsingGET(paylistId, reportName, type, observe = 'body', reportProgress = false) {
        if (paylistId === null || paylistId === undefined) {
            throw new Error('Required parameter paylistId was null or undefined when calling generatePaylistReportUsingGET.');
        }
        if (reportName === null || reportName === undefined) {
            throw new Error('Required parameter reportName was null or undefined when calling generatePaylistReportUsingGET.');
        }
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling generatePaylistReportUsingGET.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/pdf',
            'application/vnd.ms-excel'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/generate-paylist-report/${encodeURIComponent(String(paylistId))}/${encodeURIComponent(String(reportName))}/${encodeURIComponent(String(type))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
JasperReportControllerService.decorators = [
    { type: Injectable }
];
JasperReportControllerService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,