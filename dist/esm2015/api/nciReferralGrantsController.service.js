/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
export class NciReferralGrantsControllerService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://localhost';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    exportGrantSearchResultsUsingGET(remainingParams, accessionNum, activeSegments, applIds, applStatusGroupCode, araMatchStatus, cancerActivities, composedGrantNumber, dualCas, formerGrantNumber, fyFrom, fyTo, grantIc, grantMech, grantSerial, grantSuffix, grantsWitCa, grantType, grantYear, groupCode, includeDeleted, includeOrphans, institution, irgCode, irgFlexCode, myCancerActivities, ncabFrom, ncabTo, notifyFlag, npnId, orderBy, pdAssignmentSearch, pdId, piName, referralOfficer, referralStatus, rfaPaNumber, role, roNpnId, selectFrom, sraDesignatorCode, sraFlexCode, wBSearch, observe = 'body', reportProgress = false) {
        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling exportGrantSearchResultsUsingGET.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (accessionNum !== undefined && accessionNum !== null) {
            queryParameters = queryParameters.set('accessionNum', accessionNum);
        }
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', element);
            });
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', element);
            });
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', element);
            });
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', element);
            });
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', element);
            });
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', ncabTo);
        }
        if (notifyFlag !== undefined && notifyFlag !== null) {
            queryParameters = queryParameters.set('notifyFlag', notifyFlag);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', element);
            });
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', element);
            });
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', wBSearch);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/export/transfer-grants`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    exportSearchResultsUsingGET(remainingParams, accessionNum, activeSegments, applIds, applStatusGroupCode, araMatchStatus, cancerActivities, composedGrantNumber, dualCas, formerGrantNumber, fyFrom, fyTo, grantIc, grantMech, grantSerial, grantSuffix, grantsWitCa, grantType, grantYear, groupCode, includeDeleted, includeOrphans, institution, irgCode, irgFlexCode, myCancerActivities, ncabFrom, ncabTo, notifyFlag, npnId, orderBy, pdAssignmentSearch, pdId, piName, referralOfficer, referralStatus, rfaPaNumber, role, roNpnId, selectFrom, sraDesignatorCode, sraFlexCode, wBSearch, observe = 'body', reportProgress = false) {
        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling exportSearchResultsUsingGET.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (accessionNum !== undefined && accessionNum !== null) {
            queryParameters = queryParameters.set('accessionNum', accessionNum);
        }
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', element);
            });
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', element);
            });
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', element);
            });
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', element);
            });
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', element);
            });
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', ncabTo);
        }
        if (notifyFlag !== undefined && notifyFlag !== null) {
            queryParameters = queryParameters.set('notifyFlag', notifyFlag);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', element);
            });
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', element);
            });
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', wBSearch);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/export/referral-grants`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    exportSearchResultsUsingPOST(remainingParams, accessionNum, activeSegments, applIds, applStatusGroupCode, araMatchStatus, cancerActivities, composedGrantNumber, dualCas, formerGrantNumber, fyFrom, fyTo, grantIc, grantMech, grantSerial, grantSuffix, grantsWitCa, grantType, grantYear, groupCode, includeDeleted, includeOrphans, institution, irgCode, irgFlexCode, myCancerActivities, ncabFrom, ncabTo, notifyFlag, npnId, orderBy, pdAssignmentSearch, pdId, piName, referralOfficer, referralStatus, rfaPaNumber, role, roNpnId, selectFrom, sraDesignatorCode, sraFlexCode, wBSearch, observe = 'body', reportProgress = false) {
        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling exportSearchResultsUsingPOST.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (accessionNum !== undefined && accessionNum !== null) {
            queryParameters = queryParameters.set('accessionNum', accessionNum);
        }
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', element);
            });
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', element);
            });
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', element);
            });
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', element);
            });
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', element);
            });
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', ncabTo);
        }
        if (notifyFlag !== undefined && notifyFlag !== null) {
            queryParameters = queryParameters.set('notifyFlag', notifyFlag);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', element);
            });
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', element);
            });
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', wBSearch);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        return this.httpClient.post(`${this.basePath}/api/v1/export/referral-grants`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    findWithdrawnGrantsUsingGET(observe = 'body', reportProgress = false) {
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral-grants/withdrawn`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSuggestedCayCodesUsingGET(applId, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getSuggestedCayCodesUsingGET.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral-grants/suggested-cay-codes/${encodeURIComponent(String(applId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    searchGrantsForPDAssignmentUsingGET(remainingParams, accessionNum, activeSegments, applId, applIds, applStatusGroupCode, araMatchStatus, cancerActivities, composedGrantNumber, dualCas, formerGrantNumber, fyFrom, fyTo, grantIc, grantMech, grantSerial, grantSuffix, grantsWitCa, grantType, grantYear, groupCode, includeDeleted, includeOrphans, institution, irgCode, irgFlexCode, myCancerActivities, ncabFrom, ncabTo, notifyFlag, npnId, orderBy, pdAssignmentSearch, pdId, piName, referralOfficer, referralStatus, rfaPaNumber, role, roNpnId, selectFrom, sraDesignatorCode, sraFlexCode, wBSearch, observe = 'body', reportProgress = false) {
        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling searchGrantsForPDAssignmentUsingGET.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (accessionNum !== undefined && accessionNum !== null) {
            queryParameters = queryParameters.set('accessionNum', accessionNum);
        }
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', activeSegments);
        }
        if (applId) {
            applId.forEach((element) => {
                queryParameters = queryParameters.append('applId', element);
            });
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', element);
            });
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', element);
            });
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', element);
            });
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', element);
            });
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', element);
            });
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', ncabTo);
        }
        if (notifyFlag !== undefined && notifyFlag !== null) {
            queryParameters = queryParameters.set('notifyFlag', notifyFlag);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', element);
            });
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', element);
            });
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', wBSearch);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/pd-assignment/search`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    searchReferralGrantsUsingGET(remainingParams, accessionNum, activeSegments, applIds, applStatusGroupCode, araMatchStatus, cancerActivities, composedGrantNumber, dualCas, formerGrantNumber, fyFrom, fyTo, grantIc, grantMech, grantSerial, grantSuffix, grantsWitCa, grantType, grantYear, groupCode, includeDeleted, includeOrphans, institution, irgCode, irgFlexCode, myCancerActivities, ncabFrom, ncabTo, notifyFlag, npnId, orderBy, pdAssignmentSearch, pdId, piName, referralOfficer, referralStatus, rfaPaNumber, role, roNpnId, selectFrom, sraDesignatorCode, sraFlexCode, wBSearch, observe = 'body', reportProgress = false) {
        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling searchReferralGrantsUsingGET.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (accessionNum !== undefined && accessionNum !== null) {
            queryParameters = queryParameters.set('accessionNum', accessionNum);
        }
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', element);
            });
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', element);
            });
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', element);
            });
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', element);
            });
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', element);
            });
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', ncabTo);
        }
        if (notifyFlag !== undefined && notifyFlag !== null) {
            queryParameters = queryParameters.set('notifyFlag', notifyFlag);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', element);
            });
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', element);
            });
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', wBSearch);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral-grants/search`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    searchReferralGrantsUsingPOST(remainingParams, accessionNum, activeSegments, applIds, applStatusGroupCode, araMatchStatus, cancerActivities, composedGrantNumber, dualCas, formerGrantNumber, fyFrom, fyTo, grantIc, grantMech, grantSerial, grantSuffix, grantsWitCa, grantType, grantYear, groupCode, includeDeleted, includeOrphans, institution, irgCode, irgFlexCode, myCancerActivities, ncabFrom, ncabTo, notifyFlag, npnId, orderBy, pdAssignmentSearch, pdId, piName, referralOfficer, referralStatus, rfaPaNumber, role, roNpnId, selectFrom, sraDesignatorCode, sraFlexCode, wBSearch, observe = 'body', reportProgress = false) {
        if (remainingParams === null || remainingParams === undefined) {
            throw new Error('Required parameter remainingParams was null or undefined when calling searchReferralGrantsUsingPOST.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (accessionNum !== undefined && accessionNum !== null) {
            queryParameters = queryParameters.set('accessionNum', accessionNum);
        }
        if (activeSegments !== undefined && activeSegments !== null) {
            queryParameters = queryParameters.set('activeSegments', activeSegments);
        }
        if (applIds) {
            applIds.forEach((element) => {
                queryParameters = queryParameters.append('applIds', element);
            });
        }
        if (applStatusGroupCode) {
            applStatusGroupCode.forEach((element) => {
                queryParameters = queryParameters.append('applStatusGroupCode', element);
            });
        }
        if (araMatchStatus) {
            araMatchStatus.forEach((element) => {
                queryParameters = queryParameters.append('araMatchStatus', element);
            });
        }
        if (cancerActivities) {
            cancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('cancerActivities', element);
            });
        }
        if (composedGrantNumber !== undefined && composedGrantNumber !== null) {
            queryParameters = queryParameters.set('composedGrantNumber', composedGrantNumber);
        }
        if (dualCas !== undefined && dualCas !== null) {
            queryParameters = queryParameters.set('dualCas', dualCas);
        }
        if (formerGrantNumber !== undefined && formerGrantNumber !== null) {
            queryParameters = queryParameters.set('formerGrantNumber', formerGrantNumber);
        }
        if (fyFrom !== undefined && fyFrom !== null) {
            queryParameters = queryParameters.set('fyFrom', fyFrom);
        }
        if (fyTo !== undefined && fyTo !== null) {
            queryParameters = queryParameters.set('fyTo', fyTo);
        }
        if (grantIc !== undefined && grantIc !== null) {
            queryParameters = queryParameters.set('grantIc', grantIc);
        }
        if (grantMech !== undefined && grantMech !== null) {
            queryParameters = queryParameters.set('grantMech', grantMech);
        }
        if (grantSerial !== undefined && grantSerial !== null) {
            queryParameters = queryParameters.set('grantSerial', grantSerial);
        }
        if (grantSuffix !== undefined && grantSuffix !== null) {
            queryParameters = queryParameters.set('grantSuffix', grantSuffix);
        }
        if (grantsWitCa !== undefined && grantsWitCa !== null) {
            queryParameters = queryParameters.set('grantsWitCa', grantsWitCa);
        }
        if (grantType !== undefined && grantType !== null) {
            queryParameters = queryParameters.set('grantType', grantType);
        }
        if (grantYear !== undefined && grantYear !== null) {
            queryParameters = queryParameters.set('grantYear', grantYear);
        }
        if (groupCode !== undefined && groupCode !== null) {
            queryParameters = queryParameters.set('groupCode', groupCode);
        }
        if (includeDeleted !== undefined && includeDeleted !== null) {
            queryParameters = queryParameters.set('includeDeleted', includeDeleted);
        }
        if (includeOrphans !== undefined && includeOrphans !== null) {
            queryParameters = queryParameters.set('includeOrphans', includeOrphans);
        }
        if (institution !== undefined && institution !== null) {
            queryParameters = queryParameters.set('institution', institution);
        }
        if (irgCode !== undefined && irgCode !== null) {
            queryParameters = queryParameters.set('irgCode', irgCode);
        }
        if (irgFlexCode !== undefined && irgFlexCode !== null) {
            queryParameters = queryParameters.set('irgFlexCode', irgFlexCode);
        }
        if (myCancerActivities) {
            myCancerActivities.forEach((element) => {
                queryParameters = queryParameters.append('myCancerActivities', element);
            });
        }
        if (ncabFrom !== undefined && ncabFrom !== null) {
            queryParameters = queryParameters.set('ncabFrom', ncabFrom);
        }
        if (ncabTo !== undefined && ncabTo !== null) {
            queryParameters = queryParameters.set('ncabTo', ncabTo);
        }
        if (notifyFlag !== undefined && notifyFlag !== null) {
            queryParameters = queryParameters.set('notifyFlag', notifyFlag);
        }
        if (npnId !== undefined && npnId !== null) {
            queryParameters = queryParameters.set('npnId', npnId);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', orderBy);
        }
        if (pdAssignmentSearch !== undefined && pdAssignmentSearch !== null) {
            queryParameters = queryParameters.set('pdAssignmentSearch', pdAssignmentSearch);
        }
        if (pdId !== undefined && pdId !== null) {
            queryParameters = queryParameters.set('pdId', pdId);
        }
        if (piName !== undefined && piName !== null) {
            queryParameters = queryParameters.set('piName', piName);
        }
        if (referralOfficer !== undefined && referralOfficer !== null) {
            queryParameters = queryParameters.set('referralOfficer', referralOfficer);
        }
        if (referralStatus) {
            referralStatus.forEach((element) => {
                queryParameters = queryParameters.append('referralStatus', element);
            });
        }
        if (remainingParams !== undefined && remainingParams !== null) {
            queryParameters = queryParameters.set('remainingParams', remainingParams);
        }
        if (rfaPaNumber) {
            rfaPaNumber.forEach((element) => {
                queryParameters = queryParameters.append('rfaPaNumber', element);
            });
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', role);
        }
        if (roNpnId !== undefined && roNpnId !== null) {
            queryParameters = queryParameters.set('roNpnId', roNpnId);
        }
        if (selectFrom !== undefined && selectFrom !== null) {
            queryParameters = queryParameters.set('selectFrom', selectFrom);
        }
        if (sraDesignatorCode !== undefined && sraDesignatorCode !== null) {
            queryParameters = queryParameters.set('sraDesignatorCode', sraDesignatorCode);
        }
        if (sraFlexCode !== undefined && sraFlexCode !== null) {
            queryParameters = queryParameters.set('sraFlexCode', sraFlexCode);
        }
        if (wBSearch !== undefined && wBSearch !== null) {
            queryParameters = queryParameters.set('WBSearch', wBSearch);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        return this.httpClient.post(`${this.basePath}/api/v1/referral-grants/search`, null, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    searchUsingGET(applId, cancerActivity, grantsWithoutInterest, mech, minDaysSinceReferral, ncabFromDate, ncabToDate, orderBy, pocNpnId, referralDateHigh, referralDateLow, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (applId) {
            applId.forEach((element) => {
                queryParameters = queryParameters.append('applId', element);
            });
        }
        if (cancerActivity !== undefined && cancerActivity !== null) {
            queryParameters = queryParameters.set('cancerActivity', cancerActivity);
        }
        if (grantsWithoutInterest !== undefined && grantsWithoutInterest !== null) {
            queryParameters = queryParameters.set('grantsWithoutInterest', grantsWithoutInterest);
        }
        if (mech !== undefined && mech !== null) {
            queryParameters = queryParameters.set('mech', mech);
        }
        if (minDaysSinceReferral !== undefined && minDaysSinceReferral !== null) {
            queryParameters = queryParameters.set('minDaysSinceReferral', minDaysSinceReferral);
        }
        if (ncabFromDate !== undefined && ncabFromDate !== null) {
            queryParameters = queryParameters.set('ncabFromDate', ncabFromDate);
        }
        if (ncabToDate !== undefined && ncabToDate !== null) {
            queryParameters = queryParameters.set('ncabToDate', ncabToDate);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', orderBy);
        }
        if (pocNpnId !== undefined && pocNpnId !== null) {
            queryParameters = queryParameters.set('pocNpnId', pocNpnId);
        }
        if (referralDateHigh !== undefined && referralDateHigh !== null) {
            queryParameters = queryParameters.set('referralDateHigh', referralDateHigh);
        }
        if (referralDateLow !== undefined && referralDateLow !== null) {
            queryParameters = queryParameters.set('referralDateLow', referralDateLow);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral-grants`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
NciReferralGrantsControllerService.decorators = [
    { type: Injectable }
];
NciReferralGrantsControllerService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,