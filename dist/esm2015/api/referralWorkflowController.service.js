/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
export class ReferralWorkflowControllerService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://localhost';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    acceptUsingPOST(referrals, userId, observe = 'body', reportProgress = false) {
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling acceptUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling acceptUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/accept/${encodeURIComponent(String(userId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addCaInterestUsingPOST(referrals, userId, observe = 'body', reportProgress = false) {
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling addCaInterestUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling addCaInterestUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/add-ca-interest/${encodeURIComponent(String(userId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    assignROUsingPOST(applToRos, userId, observe = 'body', reportProgress = false) {
        if (applToRos === null || applToRos === undefined) {
            throw new Error('Required parameter applToRos was null or undefined when calling assignROUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling assignROUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/assign-ro/${encodeURIComponent(String(userId))}`, applToRos, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    closeReferralUsingPOST(referrals, userId, observe = 'body', reportProgress = false) {
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling closeReferralUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling closeReferralUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/close-referral/${encodeURIComponent(String(userId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCurrentRefPssCodeUsingGET(applId, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getCurrentRefPssCodeUsingGET.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral/current-ref-pss-code/${encodeURIComponent(String(applId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPreviousPdCaUsingGET(applId, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getPreviousPdCaUsingGET.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral/previous-pd-ca/${encodeURIComponent(String(applId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getReferralActionHistoryUsingGET(applId, orderBy, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getReferralActionHistoryUsingGET.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', orderBy);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral-action-history/${encodeURIComponent(String(applId))}`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getReopenPssCodeUsingGET(applId, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getReopenPssCodeUsingGET.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral/reopen-pss-code/${encodeURIComponent(String(applId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getReopenPssDescriptionUsingGET(applId, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling getReopenPssDescriptionUsingGET.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral/reopen-pss-description/${encodeURIComponent(String(applId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    referUsingPOST(referrals, userId, observe = 'body', reportProgress = false) {
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling referUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling referUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/refer/${encodeURIComponent(String(userId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    rejectReferralUsingPOST(referrals, userId, observe = 'body', reportProgress = false) {
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling rejectReferralUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling rejectReferralUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/reject-referral/${encodeURIComponent(String(userId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    releaseDualSpclCaseUsingPOST(npnId, referrals, userId, observe = 'body', reportProgress = false) {
        if (npnId === null || npnId === undefined) {
            throw new Error('Required parameter npnId was null or undefined when calling releaseDualSpclCaseUsingPOST.');
        }
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling releaseDualSpclCaseUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling releaseDualSpclCaseUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/release-dual-spcl-case/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    releaseDualUsingPOST(npnId, referrals, userId, observe = 'body', reportProgress = false) {
        if (npnId === null || npnId === undefined) {
            throw new Error('Required parameter npnId was null or undefined when calling releaseDualUsingPOST.');
        }
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling releaseDualUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling releaseDualUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/release-dual/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    removeCaInterestUsingPOST(referrals, userId, observe = 'body', reportProgress = false) {
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling removeCaInterestUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling removeCaInterestUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/remove-ca-interest/${encodeURIComponent(String(userId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    reopenReferralUsingPOST(referrals, userId, observe = 'body', reportProgress = false) {
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling reopenReferralUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling reopenReferralUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/reopen-referral/${encodeURIComponent(String(userId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    transferUsingPOST(isXfer, npeId, transfers, userId, observe = 'body', reportProgress = false) {
        if (isXfer === null || isXfer === undefined) {
            throw new Error('Required parameter isXfer was null or undefined when calling transferUsingPOST.');
        }
        if (npeId === null || npeId === undefined) {
            throw new Error('Required parameter npeId was null or undefined when calling transferUsingPOST.');
        }
        if (transfers === null || transfers === undefined) {
            throw new Error('Required parameter transfers was null or undefined when calling transferUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling transferUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/pd-assignment/transfer/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npeId))}/${encodeURIComponent(String(isXfer))}`, transfers, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    transferUsingPOST1(npnId, referrals, userId, observe = 'body', reportProgress = false) {
        if (npnId === null || npnId === undefined) {
            throw new Error('Required parameter npnId was null or undefined when calling transferUsingPOST1.');
        }
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling transferUsingPOST1.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling transferUsingPOST1.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/transfer/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(npnId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    unreferUsingPOST(referrals, userId, observe = 'body', reportProgress = false) {
        if (referrals === null || referrals === undefined) {
            throw new Error('Required parameter referrals was null or undefined when calling unreferUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling unreferUsingPOST.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/api/v1/referral/unrefer/${encodeURIComponent(String(userId))}`, referrals, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    validateReferralActionUsingGET(action, applId, userNpnId, observe = 'body', reportProgress = false) {
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling validateReferralActionUsingGET.');
        }
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling validateReferralActionUsingGET.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (action !== undefined && action !== null) {
            queryParameters = queryParameters.set('action', action);
        }
        if (applId) {
            applId.forEach((element) => {
                queryParameters = queryParameters.append('applId', element);
            });
        }
        if (userNpnId !== undefined && userNpnId !== null) {
            queryParameters = queryParameters.set('userNpnId', userNpnId);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/referral/validation`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    validateTransferGrantActionUsingGET(applId, userCayCodes, observe = 'body', reportProgress = false) {
        if (applId === null || applId === undefined) {
            throw new Error('Required parameter applId was null or undefined when calling validateTransferGrantActionUsingGET.');
        }
        if (userCayCodes === null || userCayCodes === undefined) {
            throw new Error('Required parameter userCayCodes was null or undefined when calling validateTransferGrantActionUsingGET.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (applId) {
            applId.forEach((element) => {
                queryParameters = queryParameters.append('applId', element);
            });
        }
        if (userCayCodes) {
            userCayCodes.forEach((element) => {
                queryParameters = queryParameters.append('userCayCodes', element);
            });
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.get(`${this.basePath}/api/v1/transferGrants/validation`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
ReferralWorkflowControllerService.decorators = [
    { type: Injectable }
];
ReferralWorkflowControllerService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,