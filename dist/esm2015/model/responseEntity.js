/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
export var ResponseEntity;
(function (ResponseEntity) {
    ResponseEntity.StatusCodeEnum = {
        ACCEPTED: 'ACCEPTED',
        ALREADYREPORTED: 'ALREADY_REPORTED',
        BADGATEWAY: 'BAD_GATEWAY',
        BADREQUEST: 'BAD_REQUEST',
        BANDWIDTHLIMITEXCEEDED: 'BANDWIDTH_LIMIT_EXCEEDED',
        CHECKPOINT: 'CHECKPOINT',
        CONFLICT: 'CONFLICT',
        CONTINUE: 'CONTINUE',
        CREATED: 'CREATED',
        DESTINATIONLOCKED: 'DESTINATION_LOCKED',
        EXPECTATIONFAILED: 'EXPECTATION_FAILED',
        FAILEDDEPENDENCY: 'FAILED_DEPENDENCY',
        FORBIDDEN: 'FORBIDDEN',
        FOUND: 'FOUND',
        GATEWAYTIMEOUT: 'GATEWAY_TIMEOUT',
        GONE: 'GONE',
        HTTPVERSIONNOTSUPPORTED: 'HTTP_VERSION_NOT_SUPPORTED',
        IMUSED: 'IM_USED',
        INSUFFICIENTSPACEONRESOURCE: 'INSUFFICIENT_SPACE_ON_RESOURCE',
        INSUFFICIENTSTORAGE: 'INSUFFICIENT_STORAGE',
        INTERNALSERVERERROR: 'INTERNAL_SERVER_ERROR',
        IAMATEAPOT: 'I_AM_A_TEAPOT',
        LENGTHREQUIRED: 'LENGTH_REQUIRED',
        LOCKED: 'LOCKED',
        LOOPDETECTED: 'LOOP_DETECTED',
        METHODFAILURE: 'METHOD_FAILURE',
        METHODNOTALLOWED: 'METHOD_NOT_ALLOWED',
        MOVEDPERMANENTLY: 'MOVED_PERMANENTLY',
        MOVEDTEMPORARILY: 'MOVED_TEMPORARILY',
        MULTIPLECHOICES: 'MULTIPLE_CHOICES',
        MULTISTATUS: 'MULTI_STATUS',
        NETWORKAUTHENTICATIONREQUIRED: 'NETWORK_AUTHENTICATION_REQUIRED',
        NONAUTHORITATIVEINFORMATION: 'NON_AUTHORITATIVE_INFORMATION',
        NOTACCEPTABLE: 'NOT_ACCEPTABLE',
        NOTEXTENDED: 'NOT_EXTENDED',
        NOTFOUND: 'NOT_FOUND',
        NOTIMPLEMENTED: 'NOT_IMPLEMENTED',
        NOTMODIFIED: 'NOT_MODIFIED',
        NOCONTENT: 'NO_CONTENT',
        OK: 'OK',
        PARTIALCONTENT: 'PARTIAL_CONTENT',
        PAYLOADTOOLARGE: 'PAYLOAD_TOO_LARGE',
        PAYMENTREQUIRED: 'PAYMENT_REQUIRED',
        PERMANENTREDIRECT: 'PERMANENT_REDIRECT',
        PRECONDITIONFAILED: 'PRECONDITION_FAILED',
        PRECONDITIONREQUIRED: 'PRECONDITION_REQUIRED',
        PROCESSING: 'PROCESSING',
        PROXYAUTHENTICATIONREQUIRED: 'PROXY_AUTHENTICATION_REQUIRED',
        REQUESTEDRANGENOTSATISFIABLE: 'REQUESTED_RANGE_NOT_SATISFIABLE',
        REQUESTENTITYTOOLARGE: 'REQUEST_ENTITY_TOO_LARGE',
        REQUESTHEADERFIELDSTOOLARGE: 'REQUEST_HEADER_FIELDS_TOO_LARGE',
        REQUESTTIMEOUT: 'REQUEST_TIMEOUT',
        REQUESTURITOOLONG: 'REQUEST_URI_TOO_LONG',
        RESETCONTENT: 'RESET_CONTENT',
        SEEOTHER: 'SEE_OTHER',
        SERVICEUNAVAILABLE: 'SERVICE_UNAVAILABLE',
        SWITCHINGPROTOCOLS: 'SWITCHING_PROTOCOLS',
        TEMPORARYREDIRECT: 'TEMPORARY_REDIRECT',
        TOOEARLY: 'TOO_EARLY',
        TOOMANYREQUESTS: 'TOO_MANY_REQUESTS',
        UNAUTHORIZED: 'UNAUTHORIZED',
        UNAVAILABLEFORLEGALREASONS: 'UNAVAILABLE_FOR_LEGAL_REASONS',
        UNPROCESSABLEENTITY: 'UNPROCESSABLE_ENTITY',
        UNSUPPORTEDMEDIATYPE: 'UNSUPPORTED_MEDIA_TYPE',
        UPGRADEREQUIRED: 'UPGRADE_REQUIRED',
        URITOOLONG: 'URI_TOO_LONG',
        USEPROXY: 'USE_PROXY',
        VARIANTALSONEGOTIATES: 'VARIANT_ALSO_NEGOTIATES'
    };
})(ResponseEntity || (ResponseEntity = {}));
//# sourceMappingURL=data:application/json;base64,